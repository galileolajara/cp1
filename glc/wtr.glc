{alias 'glc = %glc}
{alias 'c = %stdc}
{at(%glc)
{/wtr(
   .ref:ref,
   .pos:size,
   .p1:tnum[],
   .p4:num[],
   ) @union
   {n1(w:this, n:tnum) @inline;
      w.p1[0] = n;
      w.pos++;
   }
   {n2(w:this, n:num) @inline;
      w.p1[0] = n;
      w.p1[1] = n >> 8;
      w.pos += 2;
   }
   {n4(w:this, n:num) @inline;
      w.p1[0] = n;
      w.p1[1] = n >> 8;
      w.p1[2] = n >> 16;
      w.p1[3] = n >> 24;
      w.pos += 4;
   }
   {include("num.c")
      {n(w:this, n:num) @real-name(Fputnum) @no-decl}
   }
   {copy(w:this, data:ref, size:int) @inline;
      'c.memcpy(w.ref, data, size);
      w.pos += size;
   }
   {b(w:this, val:bool) @inline;
      {if(val) w.n1(1)}
      {else w.n1(0)}
   }
}
 

}
