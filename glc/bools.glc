{alias 'glc = %glc}
{at(%glc)
{{:expr-bools(left\expr, right\expr, type\bools)\expr}
   :quick-alloc-one(+(e/expr-bools));
   +e-idx = :expr-push(e.base, #bools);
   e.left = left;
   e.right = right;
   e.type = type;
   {return e-idx}
}
{{:expr-bools-add(bools\expr, right\expr)\expr}
   {+e/expr-bools = bools:ptr}
   +i = e.item-c++;
   {if(e.item-cap <= e.item-c)
      +old-cap = e.item-cap;
      :grow(e.item-cap, e.item-c);
      :realloc(e.item-v, e.item-cap, old-cap);
   }
   e.item-v[i].expr = right;
   {return bools}
}
{\bools(#and, #or):tnum
   {:wr(e:this, w`/wtr) @inline;
      w:n1(e);
   }
   {:rd(e:this&, r`/rdr) @inline;
      e = r:n1`\bools;
   }
}
{at(\expr)
   {:type-bools(expr`/expr, at`\at&) @case:type @inline;
      at = `:basic-type(#bool);
   }
   {:value-bools(e:this, ref:int, paren:bool, v`/value, ok:bool&) @case:value @inline;
      v.type = `:basic-type(#bool);
      v.info:init;
      v.info.array-c = 0;
      v.info.ref-v[0] = ''\0;
      v.info.star-c = 0;
      v.ref = 1;
      v.paren = :false;
      ok = :true;
   }
   {:process-bools(expr`/expr, ok:bool&) @case:process @inline;
      {+e`/expr-bools = expr}
		{if!(e.left:value(1, :true, e.left-val)) {return}}
		{if!(e.right:value(1, :true, e.right-val)) {return}}
      {do{+i = 0}{(e.item-c) i++}
         +item = e.item-v[i];
         {if!(item.expr:value(1, :true, item.val)) {return}}
      }
      ok = :true;
   }
   {:write-bools(expr`/expr) @case:write @inline;
      {+e`/expr-bools = expr}
      {switch(e.type)
         {case(#and)
            `.out:printf("(");
            e.left:write-value(e.left-val);
            `.out:printf(" && ");
            e.right:write-value(e.right-val);
            {do{+i = 0}{(e.item-c) i++}
               `.out:printf(" && ");
               +item = e.item-v[i];
               item.expr:write-value(item.val);
            }
            `.out:printf(")");
         }
         {case(#or)
            `.out:printf("(");
            e.left:write-value(e.left-val);
            `.out:printf(" || ");
            e.right:write-value(e.right-val);
            {do{+i = 0}{(e.item-c) i++}
               `.out:printf(" || ");
               +item = e.item-v[i];
               item.expr:write-value(item.val);
            }
            `.out:printf(")");
         }
      }
   }
   {:wr-bools(expr`/expr, w`/wtr, header:bool) @case:wr @inline;
      {+e`/expr-bools = expr}
      e.left:wr(w, header);
      e.right:wr(w, header);
      w:n1(e.item-c);
      {do{+i = 0}{(e.item-c) i++}
         e.item-v[i].expr:wr(w, header);
      }
      e.type:wr(w);
   }
   {:rd-bools(e-idx`\expr, r`/rdr) @case:rd @inline;
      `:quick-alloc-one(+(e`/expr-bools));
      e-idx:set(e.base, #bools);
      e.left:rd(r);
      e.right:rd(r);
      +item-c = r:n1;
      {if(item-c > 0)
         e.item-c = item-c;
         `:quick-alloc-arr(e.item-v, item-c);
         {do{+i = 0}{(item-c) i++}
            e.item-v[i].expr:rd(r);
         }
      }
      e.type:rd(r);
   }
}
 

}
