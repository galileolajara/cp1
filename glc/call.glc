{alias 'glc = %glc}
{alias 'c = %stdc}
{at(%glc)
{{:farg-process(e\expr, ca-ref:tint, ca-value/value, fd-arg/decl-var):bool}
   +ce = e.ptr();
   {+r:int}
   {if(ca-ref != 0)
      r = 1 + ca-ref;
   }{else
      r = 1;
      r += fd-arg.type-info.ref-v[fd-arg.type-info.array-c]:int;
   }
   `` 'c.out.printf("r %d, %d %d %d\n", r, j, fd-arg.type-info.array-c, fd-arg.type-info.ref-v[fd-arg.type-info.array-c]);
   {if(ce.type == #lvar)
      {+ve/expr-lvar = ce}
      +lvar = ve.lvar.ptr();
      +vd = lvar.decl;
      {if(vd.type == #nil)
         {if((lvar.flags & #set-expr) == #0)
            `` {if(vd.type-info.array-c != fd-arg.type-info.array-c)
            ``    'c.err.printf("%s:%u:%u: Type deduction failed for lvar '%s', array dimension mismatch\n", .ctx-func.file.path(), lvar.row, lvar.col, vd.name.str());
            ``    {return :false}
            `` }
            vd.type = fd-arg.type;
            vd.type-info.init();
            vd.type-info.copy-from(fd-arg.type-info);
            {if(fd-arg.type-info.built-in)
               vd.type-info.built-in = :true;
               vd.type-info.ref-v[0] = ''\0;
            }{elif(vd.type-info.ref-v[vd.type-info.array-c] + vd.type.pointer())
               vd.type-info.ref-v[vd.type-info.array-c] -= 1:char;
               vd.type-info.star-c -= 1;
            }
         }
      }
   }
   e.try-deduce(fd-arg.type);
   {if!(e.value(r, :false, ca-value)) {return :false}}
   {return :true}
}
{at(\expr)
   {:value-func(e:this, ref:int, paren:bool, v`/value, ok:bool&) @case.value() @inline;
      {+expr`/expr-func = e.ptr()}
      +f = expr.func-idx.ptr();
      v.set(ref, paren, f.decl.type, f.decl.type-info);
      {if(v.ref == 1)
         v.paren = :false;
      }
      ok = :true;
   }
   {:type-func(expr`/expr, at`\at&) @case.type() @inline;
      {+e`/expr-func = expr}
      at = e.func-idx.ptr().decl.type;
   }
   {:value-method(e:this, ref:int, paren:bool, v`/value, ok:bool&) @case.value() @inline;
      {+expr`/expr-method = e.ptr()}
      +f = expr.func-idx.ptr();
      v.set(ref, paren, f.decl.type, f.decl.type-info);
      {if(v.ref == 1)
         v.paren = :false;
      }
      ok = :true;
   }
   {:type-method(expr`/expr, at`\at&) @case.type() @inline;
      {+e`/expr-method = expr}
      at = e.func-idx.ptr().decl.type;
   }
   {:write-method(expr`/expr) @case.write() @inline;
      {+e`/expr-method = expr}
      +f = e.func-idx.ptr();
      f.write();
      `.out.printf("(");
      +first = :true;
      +i = 0;
      {do{(f.this-idx) i++}
         {if(first)
            first = :false;
         }{else
            `.out.printf(", ");
         }
         +ca = e.carg-v[i];
         ca.expr.write-value(ca.value);
      }
      {if(first)
         first = :false;
      }{else
         `.out.printf(", ");
      }
      e.this.write-value(e.this-value);
      {do{(e.carg-c - f.this-idx) i++}
         `.out.printf(", ");
         +ca = e.carg-v[i];
         ca.expr.write-value(ca.value);
      }
      `.out.printf(")");
   }
   {:wr-method(expr`/expr, w`/wtr, header:bool) @case.wr() @inline;
      {+e`/expr-method = expr}
      e.this.wr(w, header);
      e.func-name.wr(w, header);
      w.n1(e.group-c);
      {do{+i = 0}{(e.group-c) i++}
         w.n1(e.group-v[i]);
      }
      w.n1(e.carg-c);
      {do{+i = 0}{(e.carg-c) i++}
         e.carg-v[i].expr.wr(w, header);
      }
   }
   {:rd-method(e-idx`\expr, r`/rdr) @case.rd() @inline;
      `\expr.rd(+this-expr, r);
      `\id.rd(+func-name, r);
      +group-c = r.n1();
      {+group-v:tint[`#expr-carg-group-limit]}
      {do{+i = 0}{(group-c) i++}
         group-v[i] = r.n1();
      }
      +carg-c = r.n1();
      `.quick-alloc-plus(+(e`/expr-method), `/carg[:size] * carg-c);
      e-idx.set(e.base, #method);
      e.this = this-expr;
      e.func-name = func-name;
      e.group-c = group-c;
      {do{+i = 0}{(group-c) i++}
         e.group-v[i] = group-v[i];
      }
      e.carg-c = carg-c;
      {do{+i = 0}{(carg-c) i++}
         e.carg-v[i].expr.rd(r);
      }
   }
   {:process-method(expr`/expr, ok:bool&) @case.process() @inline;
      {+e`/expr-method = expr}
      +func-name = e.func-name;
      +group-c = e.group-c;
      +group-v = e.group-v;
      +carg-c = e.carg-c;
      +carg-c1 = carg-c + 1;
      +at-idx = e.this.type();
      {if(at-idx == #nil)
         'c.out.printf("%s:%u:%u - %u:%u: Cannot call method :%s on a value without a type\n", `.ctx-func.file.path(), `.ctx-begin-row, `.ctx-begin-col, `.ctx-end-row, `.ctx-end-col, func-name.str());
         {return}
      }
      +at = at-idx.ptr();
      {+method-c, method-v}
      {if(at.type == #basic)
         +t = `.basic-type[at.name.basic];
         method-c = t.method-c;
         method-v = t.method-v;
      }{else
         {if(&&, at.decl.struct == #nil, at.type != #basic, at.type != #module)
            {if(at.type == #struct)
               ++c = ''/;
            }{else
               c = ''\\;
            }
            'c.out.printf("%s:%u:%u - %u:%u: Cannot call method :%s because the type %c%s is not defined\n", `.ctx-func.file.path(), `.ctx-begin-row, `.ctx-begin-col, `.ctx-end-row, `.ctx-end-col, func-name.str(), c, at.name.id.str());
            {return}
         }
         {if(at.type == #struct)
            +t = at.decl.struct.ptr();
            method-c = t.method-c;
            method-v = t.method-v;
         }{elif(at.type == #enum)
            +t = at.decl.enum.ptr();
            method-c = t.method-c;
            method-v = t.method-v;
         }
      }
      +found = -1;
      +similar-c = 0;
      {do{+i = 0}{(method-c) i++}
         +f-idx = method-v[i];
         +f = f-idx.ptr();
         {if(f.decl.name != func-name) {continue}}
         found = i;
         similar-c++;
         {if(f.group-c != group-c) {continue}}
         +match = :true;
         {if((f.flags & #var-args) != #0)
            {if(f.farg-c > carg-c1) {continue}}
            {do{+j = 0}{(group-c - 1) j++}
               {if(f.this-group == j)
                  {if(f.group-v[j] != (group-v[j] + 1))
                     match = :false;
                     {break}
                  }
               }{else
                  {if(f.group-v[j] != group-v[j])
                     match = :false;
                     {break}
                  }
               }
            }
            {if(match)
               +j = group-c - 1;
               {if(f.this-group == j)
                  {if(f.group-v[j] > (group-v[j] + 1))
                     match = :false;
                  }
               }{else
                  {if(f.group-v[j] > group-v[j])
                     match = :false;
                  }
               }
            }
         }{else
            {if(f.farg-c != carg-c1) {continue}}
            {do{+j = 0}{(group-c) j++}
               {if(f.this-group == j)
                  {if(f.group-v[j] != (group-v[j] + 1))
                     match = :false;
                     {break}
                  }
               }{else
                  {if(f.group-v[j] != group-v[j])
                     match = :false;
                     {break}
                  }
               }
            }
         }
         {if!(match) {continue}}
         f-idx.process-later();
         +j = 0;
         +k = 0;
         {do{(f.this-idx) j++; k++}
            +ca = e.carg-v[k];
            {if!(`.farg-process(ca.expr, ca.ref, ca.value, f.farg-v[j].decl)) {return}}
         }
         {if!(`.farg-process(e.this, 0, e.this-value, f.farg-v[j++].decl)) {return}}
         {do{((f.farg-c - 1) - f.this-idx) j++; k++}
            +ca = e.carg-v[k];
            {if!(`.farg-process(ca.expr, ca.ref, ca.value, f.farg-v[j].decl)) {return}}
         }
         e.func-idx = f-idx;
         {if((f.flags & #var-args) != #0)
            {do{(e.carg-c - k) k++}
               +ca = e.carg-v[k];
               {+r:int}
               {if(ca.ref)
                  r = 1 + ca.ref;
               }{else
                  r = 1;
               }
               {if!(ca.expr.value(r, :false, ca.value)) {return}}
            }
         }
         ok = :true;
         {return}
      }
      'c.out.printf("%s:%u:%u - %u:%u: Cannot find method :%s with %u argument/s\n", `.ctx-func.file.path(), `.ctx-begin-row, `.ctx-begin-col, `.ctx-end-row, `.ctx-end-col, func-name.str(), carg-c);
      {if(found != -1)
         'c.out.printf("But found %u functions with different no. of argument/s:\n", similar-c);
         {do{+i = 0}{(at.func-c) i++}
            +f-idx = at.func-v[i];
            +f = `.func-v[f-idx];
            {if(f.decl.name == func-name)
               'c.out.printf("- :%s with %u args\n", func-name.str(), f.farg-c);
            }
         }
      }
   }
   {:write-func(expr`/expr) @case.write() @inline;
      {+e`/expr-func = expr}
      +f = e.func-idx.ptr();
      f.write();
      `.out.printf("(");
      {do{+i = 0}{(e.carg-c) i++}
         {if(i != 0)
            `.out.printf(", ");
         }
         e.carg-v[i].expr.write-value(e.carg-v[i].value);
      }
      `.out.printf(")");
   }
   {:wr-func(expr`/expr, w`/wtr, header:bool) @case.wr() @inline;
      {+e`/expr-func = expr}
      e.at.wr(w, header);
      e.func-name.wr(w, header);
      w.n1(e.group-c);
      {do{+i = 0}{(e.group-c) i++}
         w.n1(e.group-v[i]);
      }
      w.n1(e.carg-c);
      {do{+i = 0}{(e.carg-c) i++}
         e.carg-v[i].expr.wr(w, header);
      }
   }
   {:rd-func(e-idx`\expr, r`/rdr) @case.rd() @inline;
      `\at.rd(+at-idx, r);
      `\id.rd(+func-name, r);
      +group-c = r.n1();
      {+group-v:tint[`#expr-carg-group-limit]}
      {do{+i = 0}{(group-c) i++}
         group-v[i] = r.n1();
      }
      +carg-c = r.n1();

      `.quick-alloc-plus(+(e`/expr-func), `/carg[:size] * carg-c);
      e-idx.set(e.base, #func);
      e.at = at-idx;
      e.func-name = func-name;
      e.group-c = group-c;
      {do{+i = 0}{(group-c) i++}
         e.group-v[i] = group-v[i];
      }
      e.carg-c = carg-c;
      {do{+i = 0}{(carg-c) i++}
         e.carg-v[i].expr.rd(r);
      }
   }
   {:process-func(expr`/expr, ok:bool&) @case.process() @inline;
      {+e`/expr-func = expr}
      +func-name = e.func-name;
      +carg-c = e.carg-c;
      +group-c = e.group-c;
      +group-v = e.group-v;
      +at-idx = e.at;
      {if(at-idx == #nil)
         ++at = `.ctx-func.at.ptr();
      }{else
         at = at-idx.ptr();
      }
      {if(&&, at.decl.struct == #nil, at.type != #basic, at.type != #module)
         {if(at.type == #struct)
            ++c = ''/;
         }{else
            c = ''\\;
         }
         'c.out.printf("%s:%u:%u - %u:%u: Cannot call function :%s because the type %c%s is not defined\n", `.ctx-func.file.path(), `.ctx-begin-row, `.ctx-begin-col, `.ctx-end-row, `.ctx-end-col, func-name.str(), c, at.name.id.str());
         {return}
      }
      +found = -1;
      +similar-c = 0;
      `` 'c.out.printf("searching from %u functions\n", at.func-c);
      {do{+i = 0}{(at.func-c) i++}
         +f-idx = at.func-v[i];
         +f = f-idx.ptr();
         {if(f.decl.name != func-name) {continue}}
         found = i;
         similar-c++;
         {if(f.group-c != group-c) {continue}}
         +match = :true;
         {if((f.flags & #var-args) != #0)
            {if(f.farg-c > carg-c) {continue}}
            {do{+j = 0}{(group-c - 1) j++}
               {if(f.group-v[j] != group-v[j])
                  match = :false;
                  {break}
               }
            }
            {if(match)
               +j = group-c - 1;
               {if(f.group-v[j] > group-v[j])
                  match = :false;
               }
            }
         }{else
            {if(f.farg-c != carg-c) {continue}}
            {do{+j = 0}{(group-c) j++}
               {if(f.group-v[j] != group-v[j])
                  match = :false;
                  {break}
               }
            }
         }
         {if!(match) {continue}}
         f-idx.process-later();
         +j = 0;
         {do{(f.farg-c) j++}
            +ca = e.carg-v[j];
            {if!(`.farg-process(ca.expr, ca.ref, ca.value, f.farg-v[j].decl)) {return}}
         }
         e.func-idx = f-idx;
         {if((f.flags & #var-args) != #0)
            {do{(e.carg-c - j) j++}
               +ca = e.carg-v[j];
               {+r:int}
               {if(ca.ref)
                  r = 1 + ca.ref;
               }{else
                  r = 1;
               }
               {if!(ca.expr.value(r, :false, ca.value)) {return}}
            }
         }
         e.func-idx = f-idx;
         ok = :true;
         {return}
      }
      'c.out.printf("%s:%u:%u - %u:%u: Cannot find function :%s with %u argument/s\n", `.ctx-func.file.path(), `.ctx-begin-row, `.ctx-begin-col, `.ctx-end-row, `.ctx-end-col, func-name.str(), carg-c);
      {if(found != -1)
         'c.out.printf("But found %u functions with different no. of argument/s:\n", similar-c);
         {do{+i = 0}{(at.func-c) i++}
            +f-idx = at.func-v[i];
            +f = `.func-v[f-idx];
            {if(f.decl.name == func-name)
               'c.out.printf("- :%s with %u args\n", func-name.str(), f.farg-c);
            }
         }
      }
   }
   {:process-case-func(expr`/expr, f-idx`\func):bool @inline;
      {+e`/expr-func = expr}
      +func-name = e.func-name;
      +carg-c = e.carg-c;
      +group-c = e.group-c;
      +group-v = e.group-v;
      +at = `.ctx-func.at.ptr();
      f-idx.process-later();
      +f = f-idx.ptr();
      +j = 0;
      {do{(f.farg-c) j++}
         +ca = e.carg-v[j];
         {if!(`.farg-process(ca.expr, ca.ref, ca.value, f.farg-v[j].decl)) {return :false}}
      }
      e.func-idx = f-idx;
      {if((f.flags & #var-args) != #0)
         {do{(e.carg-c - j) j++}
            +ca = e.carg-v[j];
            {+r:int}
            {if(ca.ref)
               r = 1 + ca.ref;
            }{else
               r = 1;
            }
            {if!(ca.expr.value(r, :false, ca.value)) {return :false}}
         }
      }
      e.func-idx = f-idx;
      {return :true}
   }
}
 

}
