{alias 'glc = %glc}
{at(%glc)
{\assign(#eq, #plus-eq, #minus-eq, #mul-eq, #div-eq,
             #lshift-eq, #rshift-eq, #and-eq, #or-eq, #xor-eq,
             ):tnum
   {wr(s:this, w`:wtr) @inline
      w.n1(s);
   }
   {rd(s:this&, r`:rdr) @inline
      s = r.n1()`\assign;
   }
}
{expr-assign(left\expr, right\expr, type\assign)\expr
   quick-alloc-one(+(e:expr-assign));
   +e-idx = expr-push(e.base, #assign);
   e.left = left;
   e.right = right;
   e.type = type;
   :return e-idx;
}
{at(\expr)
   {wr-assign(expr`:expr, w`:wtr, header:bool) @case.wr() @inline
      {+e`:expr-assign = expr}
      e.left.wr(w, header);
      e.right.wr(w, header);
      e.type.wr(w);
   }
   {write-assign(expr`:expr) @case.write() @inline
      {+e`:expr-assign = expr}
      e.left.write-value(e.left-val);
      {switch(e.type)
         {case(#eq)
            `.out.printf(" = ");
         }
         {case(#plus-eq)
            `.out.printf(" += ");
         }
         {case(#minus-eq)
            `.out.printf(" -= ");
         }
         {case(#mul-eq)
            `.out.printf(" *= ");
         }
         {case(#div-eq)
            `.out.printf(" /= ");
         }
         {case(#lshift-eq)
            `.out.printf(" <<= ");
         }
         {case(#rshift-eq)
            `.out.printf(" >>= ");
         }
         {case(#and-eq)
            `.out.printf(" &= ");
         }
         {case(#or-eq)
            `.out.printf(" |= ");
         }
         {case(#xor-eq)
            `.out.printf(" ^= ");
         }
      }
      e.right.write-value(e.right-val);
   }
   {rd-assign(e-idx`\expr, r`:rdr) @case.rd() @inline
      `.quick-alloc-one(+(e`:expr-assign));
      e-idx.set(e.base, #assign);
      e.left.rd(r);
      e.right.rd(r);
      e.type.rd(r);
   }
   {type-assign(expr`:expr, at`\at&) @case.type() @inline
      {+e`:expr-assign = expr}
      at = e.left.type();
   }
   {value-assign(e:this, ref:tint, paren:bool, v`:value, ok:bool&) @case.value() @inline
      {+expr`:expr-assign = e.ptr()}
		{if(expr.left.value(1, paren, v) == :false)
         :return;
      }
		v.paren = paren;
		v.ref = ref;
      ok = :true;
	}
   {process-assign(expr`:expr, ok:bool&) @case.process() @inline
      {+e`:expr-assign = expr}
      +left-e = e.left.ptr();
      {if(left-e.type == #lvar)
         {+left`:expr-lvar = left-e}
         +lvar = left.lvar.ptr();
         {if(lvar.decl.type == #nil)
            {if!(e.right.value(1, :true, e.right-val))
               :return;
            }
            lvar.decl.type = e.right-val.type;
            +at = lvar.decl.type.ptr();
            lvar.decl.type-info.init();
            lvar.decl.type-info.copy-from(e.right-val.info);
            e.left.value(1, :true, e.left-val);
            ok = :true;
            :return;
         }
      }
		{if!(e.left.value(1, :true, e.left-val))
			:return;
      }
		e.right.try-deduce(e.left.type());
		{if!(e.right.value(1, :true, e.right-val))
			:return;
      }
      ok = :true;
   }
}
 

}
