{alias 'glc = %glc}
{at(%glc)
{\unary(#neg, #inc, #dec):tnum
   {rd(u:this&, r`/rdr) @inline;
      u = r.n1()`\unary;
   }
   {wr(u:this, w`/wtr) @inline;
      w.n1(u);
   }
}
{{expr-unary(expr\expr, type\unary)\expr}
   quick-alloc-one(+(e/expr-unary));
   +e-idx = expr-push(e.base, #unary);
   e.expr = expr;
   e.type = type;
   {return e-idx}
}
{at(\expr)
   {wr-unary(expr`/expr, w`/wtr, header:bool) @case.wr() @inline;
      {+e`/expr-unary = expr}
      e.expr.wr(w, header);
      e.type.wr(w);
   }
   {rd-unary(e-idx`\expr, r`/rdr) @case.rd() @inline;
      `.quick-alloc-one(+(e`/expr-unary));
      e-idx.set(e.base, #unary);
      e.expr.rd(r);
      e.type.rd(r);
   }
   {write-unary(expr`/expr) @case.write() @inline;
      {+e`/expr-unary = expr}
      {switch(e.type)
         {case(#neg)
            `.out.printf("-");
            e.expr.write-value(e.val);
         }
         {case(#inc)
            e.expr.write-value(e.val);
            `.out.printf("++");
         }
         {case(#dec)
            e.expr.write-value(e.val);
            `.out.printf("--");
         }
      }
   }
   {value-unary(e:this, ref:tint, paren:bool, v`/value, ok:bool&) @case.value() @inline;
      {+expr`/expr-unary = e.ptr()}
		v.type = expr.expr.type();
		v.info.init();
		v.info.array-c = 0;
		v.info.ref-v[0] = 0;
		v.info.star-c = 0;
		v.ref = 1;
      ok = :true;
	}
   {type-unary(expr`/expr, at`\at&) @case.type() @inline;
      {+e`/expr-unary = expr}
      at = e.expr.type();
   }
   {process-unary(expr`/expr, ok:bool&) @case.process() @inline;
      {+e`/expr-unary = expr}
		{if!(e.expr.value(1, :true, e.val))
			{return}
      }
      ok = :true;
   }
}
 

}
