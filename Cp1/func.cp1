using C = LibC;
using C1 = LibCp1;
using Cp1 {
enum Func[#nil = -1, #0, #1]:i32 {
   wr(f:this, w:Wtr) @inline {
      w.n(f:base + 1);
   }
   rd(f:this&, r:Rdr) @inline {
      f = (r.n() - 1):Func;
   }
   ptr(f:this):DeclFunc @inline {
      return .func-v[f];
   }
}
enum FuncFlags[
   #0,
   #has-body = 1,
   #inline = 2,
   #process = 4,
   #var-args = 8,
   #no-decl = 16,
   #no-body = 32,
   #real-name = 64,
   #case = 128,
   #cp1-name = 256,
   #decl = 512,
   #meta-method = 1024,
   ]:u32 {
   wr(e:this, w:Wtr) @inline {
      w.n(e:base);
   }
   rd(e:this&, r:Rdr) @inline {
      e = r.n():FuncFlags;
   }
}
enum FuncFlags2[
   #0,
   #main = 1,
]:u32;
using DeclFunc {
   write(f:this) {
      if (f.flags & #real-name) != #0 {
         output{f.real-name}
      } else {
         f.at.write-space();
         output{"_P" f.decl.name.c-name()}
         loop i = 0; f.group-c; i++ {
            output{''_ f.group-v[i]:u32}
         }
      }
   }
   lvars-rd(f:this, r:Rdr) {
      lvar-c! = r.n():Lvar;
      f.lvar-c = lvar-c;
      quick-alloc-arr(f.lvar-v, lvar-c:base);
      loop i = 0; f.lvar-c; i++ {
         l! = f.lvar-v[i];
         l.row = r.n();
         l.col = r.n();
         l.decl.rd(r);
         l.flags.rd(r);
         // if (l.flags & #set-expr) != #0 {
            // C1.stdout{"1\n"}
            // l.set-expr.rd(r);
         // }
         // C1.stdout{"lvar " l.decl.name " has type of " l.decl.type.ptr.name.basic.cp1-name ''\n}
      }
   }
   lvars-wr(f:this, w:Wtr, header:bool) {
      w.n(f.lvar-c:base);
      loop i = 0; f.lvar-c; i++ {
         l! = f.lvar-v[i];
         w.n(l.row);
         w.n(l.col);
         l.decl.wr(w, header);
         l.flags.wr(w);
         // if (l.flags & #set-expr) != #0 {
            // C1.stdout{"2\n"}
            // l.set-expr.wr(w, header);
         // }
      }
   }
}
struct Farg[
   row:u32,
   col:u32,
   decl:DeclVarData.,
   ] {
   rd(f:this, r:Rdr) {
      f.row = r.n();
      f.col = r.n();
      f.decl.rd(r);
   }
   wr(f:this, w:Wtr, header:bool) {
      w.n(f.row);
      w.n(f.col);
      f.decl.wr(w, header);
   }
   copy-from(f:this, src:Farg) {
      f.row = src.row;
      f.col = src.col;
      f.decl.copy-from(src.decl);
   }
}
var func-c:Func;
var func-cap:Func;
var func-v:DeclFunc[];
var decl-func-name:Id;
// var decl-func:DeclVarData.;
var decl-func-row:u32;
var decl-func-col:u32;
var decl-func-flags:FuncFlags;
var decl-func-flags2:FuncFlags2;
var decl-func-real-name:Id;
var decl-func-decl-str:char[];
var decl-func-decl-len:i32;
var decl-func-case:Id;
// #cp1-farg-limit = 1024;
var decl-farg-v:Farg.[];
var decl-farg-group-c:i8;
var decl-farg-group-v:i8[#expr-carg-group-limit];
var decl-farg-c:i32;
var decl-farg-cap:i32;
var decl-func-this-idx:i8;
var decl-func-this-group:i8;
var decl-func-space:StmtSpace;
var decl-func-ctx-space:StmtSpace;
var decl-func-meta-method-prefix1:Id;
var decl-func-meta-method-prefix2:Id;
var decl-func-meta-method-end:Id;
// var decl-stmt-c:u32;
// var decl-stmt-cap:u32;
// var decl-stmt-v:Stmt[];
decl-func-begin(name:Id, row:u32, col:u32) {
   .decl-func-name = name;
   .decl-func-row = row;
   .decl-func-col = col;
   .decl-func-flags = #0;
   .decl-func-flags2 = #0;
   .decl-farg-c = 0;
   // .decl-stmt-c = 0;
   .decl-farg-group-c = 1;
   .decl-farg-group-v[0] = 0;
   .decl-func-this-idx = -1;
   .decl-func-this-group = -1;
   .decl-func-real-name = #nil;
   .decl-func-case = #nil;
   .decl-func-decl-str = null;
   .decl-func-decl-len = 0;
   .decl-func-meta-method-prefix1 = #nil;
   .decl-func-meta-method-prefix2 = #nil;
   .decl-func-meta-method-end = #nil;
   quick-alloc-one(.decl-func-space);
   .decl-func-ctx-space = .decl-func-space;
}
farg-next-group() {
   .decl-farg-group-v[.decl-farg-group-c] = 0;
   .decl-farg-group-c++;
}
decl-var-as-farg(row:u32, col:u32) {
   farg-idx! = .decl-farg-c++;
   if .decl-farg-cap <= .decl-farg-c {
      old-cap! = .decl-farg-cap;
      grow(.decl-farg-cap, .decl-farg-c);
      realloc(.decl-farg-v, .decl-farg-cap, old-cap);
   }
   fa! = .decl-farg-v[farg-idx];
   fa.row = row;
   fa.col = col;
   fa.decl.copy-from(.decl-var);
   .decl-farg-group-v[.decl-farg-group-c - 1]++;
}
decl-var-as-this() {
   .decl-func-this-idx = .decl-farg-c;
   .decl-func-this-group = .decl-farg-group-c - 1;
   farg-idx! = .decl-farg-c++;
   if .decl-farg-cap <= .decl-farg-c {
      old-cap! = .decl-farg-cap;
      grow(.decl-farg-cap, .decl-farg-c);
      realloc(.decl-farg-v, .decl-farg-cap, old-cap);
   }
   .decl-farg-v[farg-idx].decl.copy-from(.decl-var);
   .decl-farg-v[farg-idx].decl.type = .decl-at;
   .decl-farg-group-v[.decl-farg-group-c - 1]++;
}
// var lvar-c:Lvar;
// var lvar-cap:Lvar;
// var lvar-v:LvarData[];
// var lvar-name-v:Id[];
decl-func-end(row:u32, col:u32) {
   f-idx! = (.func-c++):Func;
   if .func-cap <= .func-c {
      old-cap! = .func-cap;
      .func-cap = grow(.func-c:base):Func;
      realloc(.func-v, .func-cap:base, old-cap:base);
   }
   var f:DeclFunc;
   quick-alloc-plus(f, Farg[usz] * .decl-farg-c);
   .ctx-func = f;
   .nest-id = 0;
   .func-v[f-idx] = f;
   f.begin-row = .decl-func-row;
   f.begin-col = .decl-func-col;
   f.end-row = row;
   f.end-col = col;
   f.include = .decl-include;
   f.at = .decl-at;
   if (.decl-func-flags & #real-name) != #0 {
      if .decl-func-real-name == #nil {
         f.real-name = .decl-func-name;
      } else {
         f.real-name = .decl-func-real-name;
      }
   }
   if (.decl-func-flags & #meta-method) != #0 {
      f.meta-method-prefix1 = .decl-func-meta-method-prefix1;
      f.meta-method-prefix2 = .decl-func-meta-method-prefix2;
      f.meta-method-end = .decl-func-meta-method-end;
   }
   if (.decl-func-flags & #case) != #0 {
      f.cas = .decl-func-case;
   }
   // f.at.ptr().func-c ++;
   .decl-var.name = .decl-func-name;
   f.decl.copy-from(.decl-var);
   f.farg-c = .decl-farg-c;
   loop i = 0; .decl-farg-c; i++ {
      fa! = f.farg-v[i];
      fa.copy-from(.decl-farg-v[i]);
   }
   f.this-idx = .decl-func-this-idx;
   f.this-group = .decl-func-this-group;
   f.group-c = .decl-farg-group-c;
   loop i = 0; .decl-farg-group-c; i++ {
      f.group-v[i] = .decl-farg-group-v[i];
   }
   f.flags = .decl-func-flags;
   if (.decl-func-flags2 & #main) != #0 {
      .func-main = f-idx;
   } elif (&&, .decl-at == #root, f.decl.name.len() == 4, C.memcmp("main", f.decl.name.str(), 4) == 0) {
      if .func-main != #nil {
         main! = .func-main.ptr();
         C1.stdout{f.begin-row '': f.begin-col ": There's already a function with @main attribute at " main.begin-row '': main.begin-col ''\n}
         C.exit(#failure);
      } else {
         .func-main = f-idx;
      }
   }
   f.decl-str = .decl-func-decl-str;
   f.decl-len = .decl-func-decl-len;
   space! = .decl-func-space;
   f.stmt-space = space;
   loop i = 0; .decl-farg-c; i++ {
      fa! = f.farg-v[i];
      lvar-i! = space.lvar-new(fa.decl.name, fa.row, fa.col);
      lvar! = lvar-i.ptr();
      lvar.decl.copy-from(fa.decl);
   }
}
func-attr-main() {
   if (.decl-func-flags2 & #main) != #0 {
      C1.stdout{.input-path '': .last-row '': .last-col ": Error @main specified more than once\n"}
      C.exit(#failure);
   }
   if .func-main != #nil {
      first! = .func-main.ptr();
      C1.stdout{"There cannot be more than one function with @main attribute, first was " .input-path '': first.begin-row '': first.begin-col " and then " .decl-func-row '': .decl-func-col ''\n}
      C.exit(#failure);
   }
   .decl-func-flags2 |= #main;
}
func-attr-process() {
   if (.decl-func-flags & #process) != #0 {
      C1.stdout{.input-path '': .last-row '': .last-col ": Error @process specified more than once\n"}
      C.exit(#failure);
   }
   .decl-func-flags |= #process;
}
func-attr-inline() {
   if (.decl-func-flags & #inline) != #0 {
      C1.stdout{.input-path '': .last-row '': .last-col ": Error @inline specified more than once\n"}
      C.exit(#failure);
   }
   .decl-func-flags |= #inline
}
func-attr-cp1-name() {
   if (.decl-func-flags & #cp1-name) != #0 {
      C1.stdout{.input-path '': .last-row '': .last-col ": Error @cp1-name specified more than once\n"}
      C.exit(#failure);
   }
   .decl-func-flags |= #cp1-name;
}
func-attr-var-args() {
   if (.decl-func-flags & #var-args) != #0 {
      C1.stdout{.input-path '': .last-row '': .last-col ": Error @var-args specified more than once\n"}
      C.exit(#failure);
   }
   .decl-func-flags |= #var-args;
}
func-attr-no-decl() {
   if (.decl-func-flags & #no-decl) != #0 {
      C1.stdout{.input-path '': .last-row '': .last-col ": Error @no-decl specified more than once\n"}
      C.exit(#failure);
   }
   .decl-func-flags |= #no-decl;
}
func-attr-no-body() {
   if (.decl-func-flags & #no-body) != #0 {
      C1.stdout{.input-path '': .last-row '': .last-col ": Error @no-body specified more than once\n"}
      C.exit(#failure);
   }
   .decl-func-flags |= #no-body;
}
func-attr-real-name(name:Id) {
   if (.decl-func-flags & #real-name) != #0 {
      C1.stdout{.input-path '': .last-row '': .last-col ": Error @real-name specified more than once\n"}
      C.exit(#failure);
   }
   .decl-func-flags |= #real-name;
   .decl-func-real-name = name;
}
func-attr-meta-method(prefix1:Id, prefix2:Id, end:Id) {
   if (.decl-func-flags & #meta-method) != #0 {
      C1.stdout{.input-path '': .last-row '': .last-col ": Error @meta-method specified more than once\n"}
      C.exit(#failure);
   }
   .decl-func-flags |= #meta-method;
   .decl-func-meta-method-prefix1 = prefix1;
   .decl-func-meta-method-prefix2 = prefix2;
   .decl-func-meta-method-end = end;
}
func-attr-decl() {
   if (.decl-func-flags & #decl) != #0 {
      C1.stdout{.input-path '': .last-row '': .last-col ": Error @decl specified more than once\n"}
      C.exit(#failure);
   }
   .decl-func-flags |= #decl;
   .decl-func-decl-str = quick-alloc(.string-len + 1);
   C.memcpy(.decl-func-decl-str, .string-buf, .string-len);
   .decl-func-decl-str[.string-len] = 0;
   .decl-func-decl-len = .string-len;
}
func-attr-case(name:Id) {
   if (.decl-func-flags & #case) != #0 {
      C1.stdout{.input-path '': .last-row '': .last-col ": Error @case specified more than once\n"}
      C.exit(#failure);
   }
   name-str! = name.str();
   name-len! = name.len();
   func-name-str! = .decl-func-name.str();
   func-name-len! = .decl-func-name.len();
   if (||, name-len > func-name-len, func-name-str[name-len] != ''-, C.memcmp(name-str, func-name-str, name-len) != 0) {
      C1.stdout{.input-path '': .last-row '': .last-col ": Error, function name must begin with words used in @case followed by '-' (dash) then followed by the name of the cvar of case\n"}
      C.exit(#failure);
   }
   .decl-func-flags |= #case;
   .decl-func-case = name;
}
func-body-end() {
   f! = .func-v[.func-c - 1];
   f.flags |= #has-body;
   c! = 0;
   s! = f.stmt-space.stmt-first;
   loop s != null {
      c++;
      s = s.stmt-next;
   }
   .decl-func-ctx-space = null;
}
func-header-end() {
   .decl-func-ctx-space = null;
}
#expr-call-nest-limit:i32 = 8;
#expr-carg-group-limit:i32 = 256;
var expr-call-c:i8;
#cp1-carg-limit:i32 = 64;
var expr-call-carg-c:u8[#expr-call-nest-limit];
var expr-call-carg-v:ExprI[#expr-call-nest-limit][#cp1-carg-limit];
var expr-call-cgrp-c:u8[#expr-call-nest-limit];
var expr-call-cgrp-v:u8[#expr-call-nest-limit][#expr-carg-group-limit];
expr-push-call(row:u32, col:u32) {
   if .decl-func-ctx-space == null {
      C1.stdout{.input-path '': row '': row ": Use of functions are now allowed here\n"}
      C.exit(#failure);
   }
   call-idx! = .expr-call-c++;
   if call-idx >= #expr-call-nest-limit {
      C1.stdout{.input-path '': row '': col ": Too much nested calls\n"}
      C.exit(#failure);
   }
   .expr-call-carg-c[call-idx] = 0;
   .expr-call-cgrp-c[call-idx] = 1;
   .expr-call-cgrp-v[call-idx][0] = 0;
}
carg-next-group() {
   call-idx! = .expr-call-c - 1;
   .expr-call-cgrp-v[call-idx][.expr-call-cgrp-c[call-idx]] = 0;
   .expr-call-cgrp-c[call-idx]++;
}
carg-push(expr:ExprI) {
   call-idx! = .expr-call-c - 1;
   .expr-call-carg-v[call-idx][.expr-call-carg-c[call-idx]++] = expr;
   .expr-call-cgrp-v[call-idx][.expr-call-cgrp-c[call-idx] - 1]++;
}
carg-push-str(expr:ExprI) {
   if true {
      // push the string
      call-idx! = .expr-call-c - 1;
      .expr-call-carg-v[call-idx][.expr-call-carg-c[call-idx]++] = expr;
      .expr-call-cgrp-v[call-idx][.expr-call-cgrp-c[call-idx] - 1]++;
   }
   if true {
      // calculate the string length
      var e:ExprStr = expr.ptr();
      len! = 0;
      s! = e.first;
      loop {
         len += s.len;
         s = s.next;
         if s == null { break }
      }
      // push the string length
      call-idx! = .expr-call-c - 1;
      .expr-call-carg-v[call-idx][.expr-call-carg-c[call-idx]++] = expr-int(len, #u32);
      .expr-call-cgrp-v[call-idx][.expr-call-cgrp-c[call-idx] - 1]++;
   }
}
expr-pop-func(at:At, func-name:Id):ExprI {
   call-idx! = .expr-call-c -= 1;
   carg-c! = .expr-call-carg-c[call-idx];
   var e:ExprFunc;
   quick-alloc-plus(e, Carg[usz] * carg-c);
   e-idx! = expr-push(e.base, #func);
   e.at = at;
   e.func-name = func-name;
   e.carg-c = carg-c;
   loop i = 0; carg-c; i++ {
      e.carg-v[i].reff = 0;
      e.carg-v[i].expr = .expr-call-carg-v[call-idx][i];
   }
   e.group-c = .expr-call-cgrp-c[call-idx];
   loop i = 0; e.group-c; i++ {
      e.group-v[i] = .expr-call-cgrp-v[call-idx][i];
   }
   return e-idx;
}
expr-pop-method(thiss:ExprI, func-name:Id):ExprI {
   call-idx! = .expr-call-c -= 1;
   carg-c! = .expr-call-carg-c[call-idx];
   var e:ExprMethod;
   quick-alloc-plus(e, Carg[usz] * carg-c);
   e-idx! = expr-push(e.base, #method);
   e.thiss = thiss;
   e.func-name = func-name;
   e.carg-c = carg-c;
   loop i = 0; carg-c; i++ {
      e.carg-v[i].expr = .expr-call-carg-v[call-idx][i];
   }
   e.group-c = .expr-call-cgrp-c[call-idx];
   loop i = 0; e.group-c; i++ {
      e.group-v[i] = .expr-call-cgrp-v[call-idx][i];
   }
   return e-idx;
}
metacarg-next-group() {
   call-idx! = .expr-call-c - 1;
   .expr-call-cgrp-v[call-idx][.expr-call-cgrp-c[call-idx]] = 0;
   .expr-call-cgrp-c[call-idx]++;
}
metacarg-push(expr:ExprI) {
   call-idx! = .expr-call-c - 1;
   .expr-call-carg-v[call-idx][.expr-call-carg-c[call-idx]++] = expr;
   .expr-call-cgrp-v[call-idx][.expr-call-cgrp-c[call-idx] - 1]++;
}
var id-blank:Id;
expr-pop-metafunc(at:At, func-name:Id):ExprI {
   call-idx! = .expr-call-c -= 1;
   carg-c! = .expr-call-carg-c[call-idx];
   var e:ExprMetaFunc;
   quick-alloc-plus(e, Carg[usz] * carg-c);
   e-idx! = expr-push(e.base, #metafunc);
   e.at = at;
   e.func-name = func-name;
   quick-alloc-arr(e.lvars, carg-c);
   // C1.stdout{"parse func-name " func-name ''\n}
   space! = .decl-func-ctx-space;
   lvar-name! = .id-blank;
   e.carg-c = carg-c;
   loop i = 0; carg-c; i++ {
      e.carg-v[i].reff = 0;
      e.carg-v[i].expr = .expr-call-carg-v[call-idx][i];
      var e2:ExprLvar;
      quick-alloc-one(e2);
      e-idx! = expr-push(e2.base, #lvar);
      e2.lvar = space.lvar-new(lvar-name, .row, .col, false);
      lvar! = e2.lvar.ptr();
      .decl-var.name = lvar-name;
      decl-var-type(#nil);
      lvar.decl.copy-from(.decl-var);
      lvar.flags |= #set-expr;
      e.lvars[i] = e-idx;
   }
   e.group-c = .expr-call-cgrp-c[call-idx];
   loop i = 0; e.group-c; i++ {
      e.group-v[i] = .expr-call-cgrp-v[call-idx][i];
   }
   if true {
      var e2:ExprLvar;
      quick-alloc-one(e2);
      e-idx! = expr-push(e2.base, #lvar);
      e2.lvar = space.lvar-new(lvar-name, .row, .col, false);
      lvar! = e2.lvar.ptr();
      .decl-var.name = lvar-name;
      decl-var-type(#nil);
      lvar.decl.copy-from(.decl-var);
      lvar.flags |= #set-expr;
      e.lvar = e-idx;
   }
   return e-idx;
}
expr-pop-metamethod(thiss:ExprI, func-name:Id):ExprI {
   call-idx! = .expr-call-c -= 1;
   carg-c! = .expr-call-carg-c[call-idx];
   var e:ExprMetaMethod;
   quick-alloc-plus(e, Carg[usz] * carg-c);
   e-idx! = expr-push(e.base, #metamethod);
   e.thiss = thiss;
   e.func-name = func-name;
   quick-alloc-arr(e.lvars, carg-c);
   // C1.stdout{"parse func-name " func-name ''\n}
   space! = .decl-func-ctx-space;
   lvar-name! = .id-blank;
   e.carg-c = carg-c;
   loop i = 0; carg-c; i++ {
      e.carg-v[i].reff = 0;
      e.carg-v[i].expr = .expr-call-carg-v[call-idx][i];
      var e2:ExprLvar;
      quick-alloc-one(e2);
      e-idx! = expr-push(e2.base, #lvar);
      e2.lvar = space.lvar-new(lvar-name, .row, .col, false);
      lvar! = e2.lvar.ptr();
      .decl-var.name = lvar-name;
      decl-var-type(#nil);
      lvar.decl.copy-from(.decl-var);
      lvar.flags |= #set-expr;
      e.lvars[i] = e-idx;
   }
   e.group-c = .expr-call-cgrp-c[call-idx];
   loop i = 0; e.group-c; i++ {
      e.group-v[i] = .expr-call-cgrp-v[call-idx][i];
   }
   if true {
      var e2:ExprLvar;
      quick-alloc-one(e2);
      e-idx! = expr-push(e2.base, #lvar);
      e2.lvar = space.lvar-new(lvar-name, .row, .col, false);
      lvar! = e2.lvar.ptr();
      .decl-var.name = lvar-name;
      decl-var-type(#nil);
      lvar.decl.copy-from(.decl-var);
      lvar.flags |= #set-expr;
      e.lvar = e-idx;
   }
   return e-idx;
}
 

}
