using C = LibC;
using C1 = LibCp1;
using Cp1 {
enum Math[#add, #sub, #mul, #div, #mod, #lshift, #rshift, #and, #or, #xor]:u8 {
   wr(e:this, w:Wtr) @inline {
      w.n1(e:base);
   }
   rd(e:this&, r:Rdr) @inline {
      e = r.n1():Math;
   }
}
expr-math(left:ExprI, right:ExprI, type:Math):ExprI {
   var e:ExprMath;
   quick-alloc-one(e);
   e-idx! = expr-push(e.base, #math);
   e.left = left;
   e.right = right;
   e.type = type;
   return e-idx;
}
expr-math-add(expr:ExprI, right:ExprI):ExprI {
   var e:ExprMath = expr.ptr();
   i! = e.item-c++;
   if e.item-cap <= e.item-c {
      old-cap! = e.item-cap;
      grow(e.item-cap, e.item-c);
      realloc(e.item-v, e.item-cap, old-cap);
   }
   item! = e.item-v[i];
   item.expr = right;
   return expr;
}
using ExprI {
   try-deduce-math(expr:Expr, at:At) @case.try-deduce() @inline {
      var e:ExprMath = expr;
      e.left.try-deduce(at);
      e.right.try-deduce(at);
      loop i = 0; e.item-c; i++ {
         e.item-v[i].expr.try-deduce(at);
      }
   }
   wr-math(expr:Expr, w:Wtr, header:bool) @case.wr() @inline {
      var e:ExprMath = expr;
      e.left.wr(w, header);
      e.right.wr(w, header);
      e.type.wr(w);
      w.n1(e.item-c);
      loop i = 0; e.item-c; i++ {
         e.item-v[i].expr.wr(w, header);
      }
   }
   rd-math(e-idx:ExprI, r:Rdr) @case.rd() @inline {
      var e:ExprMath;
      quick-alloc-one(e);
      e-idx.set(e.base, #math);
      e.left.rd(r);
      e.right.rd(r);
      e.type.rd(r);
      item-c! = r.n1();
      if item-c > 0 {
         e.item-c = item-c;
         quick-alloc-arr(e.item-v, item-c);
         loop i = 0; e.item-c; i++ {
            e.item-v[i].expr.rd(r);
         }
      }
   }
   write-math(expr:Expr) @case.write() @inline {
      var e:ExprMath = expr;
      if e.is-overload {
         e.left.write-value(e.left-val);
         return;
      }
      switch e.type {
         case #add {
            e.left.write-value(e.left-val);
            output{" + "}
            e.right.write-value(e.right-val);
            loop i = 0; e.item-c; i++ {
               output{" + "}
               e.item-v[i].expr.write-value(e.item-v[i].val);
            }
         }
         case #sub {
            e.left.write-value(e.left-val);
            output{" - "}
            e.right.write-value(e.right-val);
            loop i = 0; e.item-c; i++ {
               output{" - "}
               e.item-v[i].expr.write-value(e.item-v[i].val);
            }
         }
         case #mul {
            e.left.write-value(e.left-val);
            output{" * "}
            e.right.write-value(e.right-val);
            loop i = 0; e.item-c; i++ {
               output{" * "}
               e.item-v[i].expr.write-value(e.item-v[i].val);
            }
         }
         case #div {
            e.left.write-value(e.left-val);
            output{" / "}
            e.right.write-value(e.right-val);
            loop i = 0; e.item-c; i++ {
               output{" / "}
               e.item-v[i].expr.write-value(e.item-v[i].val);
            }
         }
         case #mod {
            e.left.write-value(e.left-val);
            output{" % "}
            e.right.write-value(e.right-val);
            loop i = 0; e.item-c; i++ {
               output{" % "}
               e.item-v[i].expr.write-value(e.item-v[i].val);
            }
         }
         case #lshift {
            e.left.write-value(e.left-val);
            output{" << "}
            e.right.write-value(e.right-val);
         }
         case #rshift {
            e.left.write-value(e.left-val);
            output{" >> "}
            e.right.write-value(e.right-val);
         }
         case #and {
            e.left.write-value(e.left-val);
            output{" & "}
            e.right.write-value(e.right-val);
            loop i = 0; e.item-c; i++ {
               output{" & "}
               e.item-v[i].expr.write-value(e.item-v[i].val);
            }
         }
         case #or {
            e.left.write-value(e.left-val);
            output{" | "}
            e.right.write-value(e.right-val);
            loop i = 0; e.item-c; i++ {
               output{" | "}
               e.item-v[i].expr.write-value(e.item-v[i].val);
            }
         }
         case #xor {
            e.left.write-value(e.left-val);
            output{" ^ "}
            e.right.write-value(e.right-val);
            loop i = 0; e.item-c; i++ {
               output{" ^ "}
               e.item-v[i].expr.write-value(e.item-v[i].val);
            }
         }
      }
   }
   value-math(e:this, reff:i8, paren:bool, v:Value, ok:bool&) @case.value() @inline {
      var expr:ExprMath = e.ptr();
      // if expr.left.value(1, paren, v) == false {
      //    return;
      // }
      if !expr.left.value(1, paren, v) { return }
      // left! = e.left.type();
      // right! = e.right.type();
      // left-size! = left.real.basicType.to()Size;
      // if left-size > 0 {
      //    if left-size > right.real.basicType.to()struct Size[ 
      //       v.decl = left,
      //    ]
      // }
      v.paren = paren;
      v.reff = reff;
      ok = true;
   }
   type-math(expr:Expr, at:At&) @case.type() @inline {
      var e:ExprMath = expr;
      at = e.left.type();
   }
   process-math(expr:Expr, ok:bool&) @case.process() @inline {
      var e:ExprMath = expr;
      "again:";
      left-type! = e.left.type();
      left-type-ptr! = left-type.ptr();
      e.right.try-deduce(left-type);
      if left-type-ptr.def == #enum {
         en! = left-type-ptr.decl.enumm.ptr();
         f-idx! = en.overload-math-last;
         if f-idx != #nil {
            e-right-type! = e.right.type();
            f! = f-idx.ptr();
            loop {
               if f.farg-v[1].decl.type == e-right-type {
                  e-method! = ExprI.alloc();
                  var group-v:u8[1];
                  group-v[0] = 2;
                  var carg-v:ExprI[2];
                  carg-v[0] = e.right;
                  e-cvar! = ExprI.alloc();
                  var id-op;
                  switch e.type {
                     case #add {
                        id-op = .id-add;
                     }
                     case #sub {
                        id-op = .id-sub;
                     }
                     case #mul {
                        id-op = .id-mul;
                     }
                     case #div {
                        id-op = .id-div;
                     }
                  }
                  set-cvar(e-cvar, #nil, id-op);
                  carg-v[1] = e-cvar;
                  set-method(e-method, e.left, f.decl.name, 1, group-v, 2, carg-v);
                  e.left = e-method;
                  e.is-overload = true;
                  if !e.left.value(1, true, e.left-val) {
                     return;
                  }
                  if e.item-c != 0 {
                     e.right = e.item-v[0].expr;
                     e.item-c--;
                     loop i = 0; e.item-c; i++ {
                        e.item-v[i].expr = e.item-v[i + 1].expr;
                     }
                     "goto again;";
                  }
                  ok = true;
                  return;
               }
               f-idx = f.list1-prev;
               if f-idx == #nil { break }
               f = f-idx.ptr();
            }
            f-idx = en.overload-math-last;
            f = f-idx.ptr();
            loop {
               en2! = f.farg-v[1].decl.type.ptr().decl.enumm.ptr();
               f2-idx! = en2.overload-get-last;
               if f2-idx != #nil {
                  f2! = f2-idx.ptr();
                  loop {
                     if f2.farg-v[0].decl.type == e-right-type {
                        e-func! = ExprI.alloc();
                        var group-v:u8[1];
                        group-v[0] = 1;
                        var carg-v:ExprI[1];
                        carg-v[0] = e.right;
                        set-func(e-func, f2.at, f2.decl.name, 1, group-v, 1, carg-v);
                        if true {
                           e-method! = ExprI.alloc();
                           var group-v:u8[1];
                           group-v[0] = 2;
                           var carg-v:ExprI[2];
                           carg-v[0] = e-func;
                           e-cvar! = ExprI.alloc();
                           var id-op;
                           switch e.type {
                              case #add {
                                 id-op = .id-add;
                              }
                              case #sub {
                                 id-op = .id-sub;
                              }
                              case #mul {
                                 id-op = .id-mul;
                              }
                              case #div {
                                 id-op = .id-div;
                              }
                           }
                           set-cvar(e-cvar, #nil, id-op);
                           carg-v[1] = e-cvar;
                           set-method(e-method, e.left, f.decl.name, 1, group-v, 2, carg-v);
                           e.left = e-method;
                           e.is-overload = true;
                        }
                        if !e.left.value(1, true, e.left-val) {
                           return;
                        }
                        if e.item-c != 0 {
                           e.right = e.item-v[0].expr;
                           e.item-c--;
                           loop i = 0; e.item-c; i++ {
                              e.item-v[i].expr = e.item-v[i + 1].expr;
                           }
                           "goto again;";
                        }
                        ok = true;
                        return;
                     }
                     f2-idx = f2.list1-prev;
                     if f2-idx == #nil { break }
                     f2 = f2-idx.ptr();
                  }
               }
               f-idx = f.list1-prev;
               if f-idx == #nil { break }
               f = f-idx.ptr();
            }
         }
      }
      if !e.left.value(1, true, e.left-val) {
         return;
      }
      if !e.right.value(1, true, e.right-val) {
         return;
      }
      if !compatible(e.left-val.type, e.left-val.info.star-c + e.left-val.type.pointer(), e.right-val.type, e.right-val.info.star-c + e.right-val.type.pointer()) {
         C1.stdbuf{.ctx-func.file '': .ctx-begin-row '': .ctx-begin-col ": Type mismatch for the left and right operands of the operator '"}

         switch e.type {
            case #add { C1.stdbuf{"+"} }
            case #sub { C1.stdbuf{"-"} }
            case #mul { C1.stdbuf{"*"} }
            case #div { C1.stdbuf{"/"} }
            case #mod { C1.stdbuf{"%"} }
            case #lshift { C1.stdbuf{"<<"} }
            case #rshift { C1.stdbuf{">>"} }
            case #and { C1.stdbuf{"&"} }
            case #or { C1.stdbuf{"|"} }
            case #xor { C1.stdbuf{"^"} }
         }
         C1.stdout{"'\n"}
         C.exit(#failure);
         return;
      }
      loop i = 0; e.item-c; i++ {
         item! = e.item-v[i];
         item.expr.try-deduce(e.left-val.type);
         if !item.expr.value(1, true, item.val) { return }
         if !compatible(e.left-val.type, e.left-val.info.star-c + e.left-val.type.pointer(), item.val.type, item.val.info.star-c + item.val.type.pointer()) {
            C1.stdbuf{.ctx-func.file '': .ctx-begin-row '': .ctx-begin-col ": Type mismatch for the left and right operands of the operator '"}

            switch e.type {
               case #add { C1.stdbuf{"+"} }
               case #sub { C1.stdbuf{"-"} }
               case #mul { C1.stdbuf{"*"} }
               case #div { C1.stdbuf{"/"} }
               case #mod { C1.stdbuf{"%"} }
               case #lshift { C1.stdbuf{"<<"} }
               case #rshift { C1.stdbuf{">>"} }
               case #and { C1.stdbuf{"&"} }
               case #or { C1.stdbuf{"|"} }
               case #xor { C1.stdbuf{"^"} }
            }
            C1.stdout{"'\n"}
            C.exit(#failure);
            return;
         }
      }
      ok = true;
   }
}
 

}
