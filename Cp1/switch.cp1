using Cp1 = Cp1;
using C = LibC;
using C1 = LibCp1;
using Cp1 {
var switch-stack-v:StmtSwitch[64];
var switch-stack-c:u8;
using StmtSpace {
   wr-switch(stmt:Stmt, w:Wtr, header:bool) @case.wr() @inline {
      var s:StmtSwitch = stmt;
      s.expr.wr(w, header);
      s.cases.wr(w, header);
   }
   rd-switch(space:StmtSpace, r:Rdr) @case.rd() @inline {
      var s:StmtSwitch;
      quick-alloc-one(s);
      s.expr.rd(r);
      s.cases.rd(r);
      space.stmt-push(s.base, .ctx-begin-row, .ctx-begin-col, .ctx-end-row, .ctx-end-col, #switch);
   }
   wr-case(stmt:Stmt, w:Wtr, header:bool) @case.wr() @inline {
      var s:StmtCase = stmt;
      w.n(s.expr-c);
      loop i = 0; s.expr-c; i++ {
         s.expr-v[i].expr.wr(w, header);
      }
      w.b(s.fall-through);
   }
   rd-case(space:StmtSpace, r:Rdr) @case.rd() @inline {
      expr-c! = r.n();
      var s:StmtCase;
      quick-alloc-plus(s, StmtCaseItem[usz] * expr-c);
      s.expr-c = expr-c;
      loop i = 0; expr-c; i++ {
         s.expr-v[i].expr.rd(r);
      }
      s.fall-through = r.b();
      space.stmt-push(s.base, .ctx-begin-row, .ctx-begin-col, .ctx-end-row, .ctx-end-col, #case);
   }
   wr-case-end(stmt:Stmt, w:Wtr, header:bool) @case.wr() @inline {
   }
   rd-case-end(space:StmtSpace, r:Rdr) @case.rd() @inline {
      var s:StmtCaseEnd;
      quick-alloc-one(s);
      space.stmt-push(s.base, .ctx-begin-row, .ctx-begin-col, .ctx-end-row, .ctx-end-col, #case-end);
   }
   wr-default(stmt:Stmt, w:Wtr, header:bool) @case.wr() @inline {
      var s:StmtDefault = stmt;
      w.b(s.fall-through);
   }
   rd-default(space:StmtSpace, r:Rdr) @case.rd() @inline {
      var s:StmtDefault;
      quick-alloc-one(s);
      s.fall-through = r.b();
      space.stmt-push(s.base, .ctx-begin-row, .ctx-begin-col, .ctx-end-row, .ctx-end-col, #default);
   }
   wr-default-end(stmt:Stmt, w:Wtr, header:bool) @case.wr() @inline {
   }
   rd-default-end(space:StmtSpace, r:Rdr) @case.rd() @inline {
      var s:StmtDefaultEnd;
      quick-alloc-one(s);
      space.stmt-push(s.base, .ctx-begin-row, .ctx-begin-col, .ctx-end-row, .ctx-end-col, #default-end);
   }
   wr-switch-end(stmt:Stmt, w:Wtr, header:bool) @case.wr() @inline {
   }
   rd-switch-end(space:StmtSpace, r:Rdr) @case.rd() @inline {
      var s:StmtSwitchEnd;
      quick-alloc-one(s);
      space.stmt-push(s.base, 0, 0, 0, 0, #switch-end);
   }
}
union CaseStack[cas:StmtCase, defaul:StmtDefault];
var case-stack-v:CaseStack.[64];
var case-stack-c:u8;
using Stmt {
   write-switch(stmt:Stmt) @case.write() @inline {
      var s:StmtSwitch = stmt;
      output{"switch("}
      s.expr.write-value(s.val);
      output{") {\n"}
      if s.case-func-c > 0 {
         var e:Expr = s.cases.ptr();
         var func:ExprFunc = e;
         v! = s.case-func-v;
         loop i = 0; s.case-func-c; i++ {
            output{"case "}
            v[i].cvar.write();
            output{":;\n"}
            func.func-idx = v[i].func;
            ExprI.write-func(e);
            output{";\nbreak;\n"}
         }
      }
   }
   process-switch(stmt:Stmt, ok:bool&) @case.process() @inline {
      var s:StmtSwitch = stmt;
      .switch-stack-v[.switch-stack-c++] = s;
      if !s.expr.value(1, false, s.val) {
         return;
      }
      if s.val.type == #nil {
         C1.stdout{.ctx-func.file '': s.base.begin-row '': s.base.begin-col ": Error, the expression used for switch doesn't have a type\n"}
         return;
      }
      if s.cases != #nil {
         type! = s.val.type.ptr();
         if type.def != #enum {
            C1.stdout{.ctx-func.file '': s.base.begin-row '': s.base.begin-col ": Error, the expression used for switch must be an enum when using @case attribute\n"}
            return;
         }
         var e:ExprFunc = s.cases.ptr();
         func-name! = e.func-name;
         f! = .ctx-func.at.ptr();
         case-c! = 0;
         case-cap! = 0;
         var case-v:Func[] = null;
         loop i = 0; f.func-c; i++ {
            func-i! = f.func-v[i];
            func! = func-i.ptr();
            if (func.flags & #case) != #0 {
               if func.cas == func-name {
                  ci! = case-c++;
                  if case-cap <= case-c {
                     old-cap! = case-cap;
                     grow(case-cap, case-c);
                     realloc(case-v, case-cap, old-cap);
                  }
                  case-v[ci] = func-i;
               }
            }
         }
         if case-c > 0 {
            if !ExprI.process-case-func(s.cases.ptr(), case-v[0]) { return }
            func-name-str! = func-name.str();
            func-name-len! = func-name.len();
            s.case-func-c = case-c;
            quick-alloc-arr(s.case-func-v, case-c);
            func-v! = s.case-func-v;
            loop i = 0; case-c; i++ {
               func-i! = case-v[i];
               func! = func-i.ptr();
               func-name2! = func.decl.name;
               var cvar-name-str:char[] = &func-name2.str()[func-name-len + 1];
               cvar-name-len! = func-name2.len() - (func-name-len + 1);
               found-id! = Id#nil;
               loop j = 0:Id; .id-c; j++ {
                  if (&&, j.len() == cvar-name-len, C.memcmp(j.str(), cvar-name-str, cvar-name-len) == 0) {
                     found-id = j;
                     break;
                  }
               }
               if found-id == #nil {
                  C1.stdout{func.file '': func.begin-row '': func.begin-col ": Cannot find a case for cvar named '#" cvar-name-str "'\n"}
                  return;
               }
               found-cvar! = Cvar#nil;
               loop j = 0; type.cvar-c; j++ {
                  cvar-i! = type.cvar-v[j];
                  cvar! = cvar-i.ptr();
                  if cvar.decl.name == found-id {
                     found-cvar = cvar-i;
                     break;
                  }
               }
               if found-cvar == #nil {
                  C1.stdout{func.file '': func.begin-row '': func.begin-col ": Cannot find a case for cvar named '#" cvar-name-str "'\n"}
                  return;
               }
               if !found-cvar.process() { return }
               func-i.process-later();
               func-v[i].cvar = found-cvar;
               func-v[i].func = func-i;
            }
            C.free(case-v);
         }
      }
      ok = true;
   }
   write-case(stmt:Stmt) @case.write() @inline {
      var s:StmtCase = stmt;
      loop i = 0; s.expr-c; i++ {
         output{"case "}
         s.expr-v[i].expr.write-value(s.expr-v[i].val);
         output{":;\n"}
      }
      .case-stack-v[.case-stack-c++].cas = s;
   }
   process-case(stmt:Stmt, ok:bool&) @case.process() @inline {
      var s:StmtCase = stmt;
      switc! = .switch-stack-v[.switch-stack-c - 1];
      if switc.val.type != #nil {
         type-i! = switc.val.type;
         type! = type-i.ptr();
         if type.def == #enum {
            loop i = 0; s.expr-c; i++ {
               e-i! = s.expr-v[i].expr;
               e! = e-i.ptr();
               if e.type == #cvar {
                  var e2:ExprCvar = e;
                  if e2.at == #nil {
                     e2.try = type-i;
                  }
               }
            }
         }
      }
      loop i = 0; s.expr-c; i++ {
         e-i! = s.expr-v[i].expr;
         if !e-i.value(1, true, s.expr-v[i].val) {
            return;
         }
      }
      ok = true;
   }
   write-case-end(stmt:Stmt) @case.write() @inline {
      var s:StmtCaseEnd = stmt;
      cas! = .case-stack-v[.case-stack-c -= 1].cas;
      if !cas.fall-through {
         output{"break;\n"}
      }
   }
   process-case-end(stmt:Stmt, ok:bool&) @case.process() @inline {
      var s:StmtCaseEnd = stmt;
      ok = true;
   }
   write-default(stmt:Stmt) @case.write() @inline {
      var s:StmtDefault = stmt;
      output{"default:;\n"}
      .case-stack-v[.case-stack-c++].defaul = s;
   }
   process-default(stmt:Stmt, ok:bool&) @case.process() @inline {
      ok = true;
   }
   write-default-end(stmt:Stmt) @case.write() @inline {
      var s:StmtDefaultEnd = stmt;
      defaul! = .case-stack-v[.case-stack-c -= 1].defaul;
      if !defaul.fall-through {
         output{"break;\n"}
      }
   }
   process-default-end(stmt:Stmt, ok:bool&) @case.process() @inline {
      var s:StmtDefaultEnd = stmt;
      ok = true;
   }
   write-switch-end(stmt:Stmt) @case.write() @inline {
      var s:StmtSwitchEnd = stmt;
      output{"}\n"}
   }
   process-switch-end(stmt:Stmt, ok:bool&) @case.process() @inline {
      .switch-stack-c -= 1;
      var s:StmtSwitchEnd = stmt;
      ok = true;
   }
}
struct StmtSwitchCaseFunc[
   cvar:Cvar,
   func:Func,
];
struct StmtSwitchEnd[
   base:Stmt.,
];
var switch-expr-c:u32;
var switch-expr-cap:u32;
var switch-expr-v:ExprI[];
stmt-switch-expr-add(expr:ExprI) {
   expr-i! = .switch-expr-c++;
   if .switch-expr-cap <= .switch-expr-c {
      old-cap! = .switch-expr-cap;
      grow(.switch-expr-cap, .switch-expr-c);
      realloc(.switch-expr-v, .switch-expr-cap, old-cap);
   }
   .switch-expr-v[expr-i] = expr;
}
struct StmtCase[
   base:Stmt.,
   fall-through:bool,
   expr-c:u32,
   expr-v:StmtCaseItem.[0],
];
struct StmtCaseEnd[
   base:Stmt.,
];
struct StmtDefault[
   base:Stmt.,
   fall-through:bool,
];
struct StmtDefaultEnd[
   base:Stmt.,
];
stmt-switch-case-begin(begin-row:u32, begin-col:u32, end-row:u32, end-col:u32, fall-through:bool) {
   expr-c! = .switch-expr-c;
   .switch-expr-c = 0;
   var s:StmtCase;
   quick-alloc-plus(s, StmtCaseItem[usz] * expr-c);
   s.fall-through = fall-through;
   s.expr-c = expr-c;
   loop i = 0; expr-c; i++ {
      s.expr-v[i].expr = .switch-expr-v[i];
   }
   stmt-push(s.base, begin-row, begin-col, end-row, end-col, #case);
   stmt-space-begin();
}
stmt-switch-case-end() {
   stmt-space-end();
   var s:StmtCaseEnd;
   quick-alloc-one(s);
   stmt-push(s.base, 0, 0, 0, 0, #case-end);
}
stmt-switch-default-begin(begin-row:u32, begin-col:u32, end-row:u32, end-col:u32, fall-through:bool) {
   var s:StmtDefault;
   quick-alloc-one(s);
   s.fall-through = fall-through;
   stmt-push(s.base, begin-row, begin-col, end-row, end-col, #default);
   stmt-space-begin();
}
stmt-switch-default-end() {
   stmt-space-end();
   var s:StmtDefaultEnd;
   quick-alloc-one(s);
   stmt-push(s.base, 0, 0, 0, 0, #default-end);
}
stmt-switch-begin() {
   stmt-space-begin();
   .decl-func-ctx-space.flags |= #skip-lvar-decl;
}
stmt-switch-set(expr:ExprI, begin-row:u32, begin-col:u32, end-row:u32, end-col:u32, cases:ExprI) {
   var s:StmtSwitch;
   quick-alloc-one(s);
   s.expr = expr;
   s.cases = cases;
   stmt-push(s.base, begin-row, begin-col, end-row, end-col, #switch);
   .switch-expr-c = 0;
}
stmt-switch-end() {
   var s:StmtSwitchEnd;
   quick-alloc-one(s);
   stmt-push(s.base, 0, 0, 0, 0, #switch-end);
   stmt-space-end();
}
 

}
