using C = LibC;
using C1 = LibCp1;
using Cp1 {
enum Enum[#nil = -1, #0, #1]:i32 {
   wr(f:this, w:Wtr) @inline {
      w.n(f + #1);
   }
   rd(f:this&, r:Rdr) @inline {
      f = (r.n() - #1):Func;
   }
   ptr(f:this):EnumData @inline {
      return .enum-v[f];
   }
   output(e-i:this) {
      num! = e-i:u32;
      n3! = num >> 3;
      n17! = 1 << (num & 7);
      if (.enum-is-outputted[n3] & n17) != 0 { return }
      .enum-is-outputted[n3] |= n17;
      e! = e-i.ptr();

      e.base-type.output(e.file, e.begin-row, e.begin-col);

      if e.include != #nil {
         e.include.output();
      }

      // if (e.flags & #no-decl) == #0 {
         .enum-outputted-v[.enum-outputted-c++] = e-i;
      // }
   }
}
enum EnumFlags[
   #0,
   #real-name = 1,
   #no-decl = 2,
   #soa-field = 4,
   ]:u8 {
   wr(e:this, w:Wtr) @inline {
      w.n1(e:base);
   }
   rd(e:this&, r:Rdr) @inline {
      e = r.n1():EnumFlags;
   }
}
var enum-c:Enum;
var enum-cap:Enum;
var enum-v:EnumData[];
var decl-enum-row:u32;
var decl-enum-col:u32;
var decl-enum-at:At;
var decl-enum-real-name:Id;
var decl-enum-flags:EnumFlags;
var decl-enum-last-cvar:Cvar;
var decl-enum-soa-field-gvar-at:At;
var decl-enum-soa-field-gvar-id:Id;
decl-var-as-evar() {
   evar! = .decl-evar-c++;
   if .decl-evar-cap <= .decl-evar-c {
      grow(.decl-evar-cap, .decl-evar-c);
      realloc(.decl-evar-v, .decl-evar-cap);
   }
   .decl-evar-v[evar].copy-from(.decl-var);
}
decl-at-begin-enum(name:Id, row:u32, col:u32) {
   .decl-enum-row = row;
   .decl-enum-col = col;
   .build-at = .decl-at;
   decl-at-add(name, #struct-enum, row, col);
   .decl-at-v[.decl-at-c++] = .decl-at;
   .decl-at = .build-at;
   .decl-enum-at = .build-at;
   .decl-enum-flags = #0;
   .decl-enum-last-cvar = #nil;
   // C1.stdout{"began enum at:\n"}
   // at-i! = .build-at;
   // loop {
   //    at! = at-i.ptr();
   //    C1.stdout{"- " at.name.id ''\n}
   //    at-i = at.parent;
   //    if at-i == #root { break }
   // }
}
enum-base-begin() {
   .decl-at = .decl-at.ptr().parent;
}
// enum-base-end() {
//    .decl-at = .decl-enum-at;
// }
enum-attr-soa-field(at:At, id:Id) {
   .decl-enum-flags |= #soa-field;
   .decl-enum-soa-field-gvar-at = at;
   .decl-enum-soa-field-gvar-id = id;
}
enum-attr-no-decl() {
   .decl-enum-flags |= #no-decl;
}
enum-attr-real-name(id:Id) {
   .decl-enum-flags |= #real-name;
   .decl-enum-real-name = id;
}
decl-enum-end(base-type:At, row:u32, col:u32) {
   s-idx! = .enum-c++;
   if .enum-cap <= .enum-c {
      old-cap! = .enum-cap;
      .enum-cap = grow(.enum-c:base);
      realloc(.enum-v, .enum-cap:base, old-cap:base);
   }
   var s:EnumData;
   quick-alloc-one(s);
   .enum-v[s-idx] = s;
   s.begin-row = .decl-enum-row;
   s.begin-col = .decl-enum-col;
   s.end-row = row;
   s.end-col = col;
   s.include = .decl-include;
   s.at = .decl-enum-at;
   s.base-type = base-type;
   .decl-at = .decl-enum-at;
   s.flags = .decl-enum-flags;
   s.soa-field-gvar-at = .decl-enum-soa-field-gvar-at;
   s.soa-field-gvar-id = .decl-enum-soa-field-gvar-id;
   s.real-name = .decl-enum-real-name;
   .decl-enum-last-cvar = #nil;
   // s.name = .decl-enum-name;
   // s.evar-c = .decl-evar-c;
   // C1.stdout{"There are " s.evar-c " evars\n"}
   // loop i = 0; .decl-evar-c; i ++ {
   //    a! = s.evar-v[i];
   //    a.decl.copy-from(.decl-evar-v[i]);
   //    // C1.stdout{"- " a.name ''\n}
   // }
}
var last-cvar:Cvar;
enum-add-cvar(name:Id, row:u32, col:u32) {
   c-idx! = .cvar-c++;
   .last-cvar = c-idx;
   if .cvar-cap <= .cvar-c {
      old-cap! = .cvar-cap;
      .cvar-cap = grow(.cvar-c:base);
      realloc(.cvar-v, .cvar-cap:base, old-cap:base);
   }
   c! = c-idx.ptr();
   c.row = row;
   c.col = col;
   c.include = .decl-include;
   c.at = .decl-at;
   c.decl.name = name;
   c.decl.type = .decl-enum-at;
   c.decl.type-info.init();
   c.flags = #as-enum;
   c.last-cvar = .decl-enum-last-cvar;
   .decl-enum-last-cvar = c-idx;
}
decl-add-cvar(name:Id, row:u32, col:u32) {
   c-idx! = .cvar-c++;
   .last-cvar = c-idx;
   if .cvar-cap <= .cvar-c {
      old-cap! = .cvar-cap;
      .cvar-cap = grow(.cvar-c:base);
      realloc(.cvar-v, .cvar-cap:base, old-cap:base);
   }
   c! = c-idx.ptr();
   c.row = row;
   c.col = col;
   c.include = .decl-include;
   c.at = .decl-at;
   .decl-var.name = name;
   c.decl.copy-from(.decl-var);
   if (c.decl.flags & #real-name) != #0 {
      if (c.decl.name.len() == 7) && (C.memcmp(c.decl.name.str(), "failure", 7) == 0) {
         C1.stdout{"failure has a real-name at decl-add-cvar\n"}
      }
   }
   c.flags = #0;
}
enum-set-cvar-expr(set:ExprI) {
   c! = .last-cvar.ptr();
   c.flags |= #set-expr;
   c.expr-set = set;
}
cvar-attr-real-name(name:Id) {
   c! = .last-cvar.ptr();
   c.decl.flags |= #real-name;
   c.decl.real-name = name;
}
cvar-attr-no-decl() {
   c! = .last-cvar.ptr();
   c.decl.flags |= #no-decl;
}
 

}
