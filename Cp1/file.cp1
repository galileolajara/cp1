using C = LibC;
using C1 = LibCp1;
using X = Posix;
using W = Windows;
include "file.cp1.h" {
   using Windows {
      enum Handle[#null, #invalid @no-decl(INVALID_HANDLE_VALUE)]:usz @no-decl(HANDLE);
      CreateFileA(path:char[], access:W.CreateFileAccess, share-mode:W.CreateFileShareMode, security-attributes:ref, creation-disposition:W.CreateFileCreationDisposition, flags:W.CreateFileFlags, template-file:Handle):Handle @no-decl @real-name;
      enum CreateFileAccess[#read @no-decl(GENERIC_READ), #write @no-decl(GENERIC_WRITE)]:u32;
      enum CreateFileShareMode[#0, #read @no-decl(FILE_SHARE_READ)]:u32;
      enum CreateFileCreationDisposition[#open-existing @no-decl(OPEN_EXISTING), #create-always @no-decl(CREATE_ALWAYS)]:u32;
      enum CreateFileFlags[#normal @no-decl(FILE_ATTRIBUTE_NORMAL)]:u32;
      GetFileSizeEx(h:Handle, i:W.LargeInteger):bool @no-decl @real-name;
      union LargeInteger[
         quadPart:u64 @real-name(QuadPart),
      ] @no-decl(LARGE_INTEGER);
      CloseHandle(h:Handle):bool @no-decl @real-name;
      ReadFile(h:Handle, buf:ref, size:u32, bytes-read:u32&, overlapped:ref):bool @no-decl @real-name;
      WriteFile(h:Handle, buf:ref, size:u32, bytes-read:u32&, overlapped:ref):bool @no-decl @real-name;
   }
}
using Cp1 {
   read-file(path:char[], out-size:usz&):ref @inline {
      return read-file(path, 0, 0, -1, out-size);
   }
   read-file(path:char[], add-before:i32, add-after:i32, max-size:usz, out-size:usz&):ref {
      "#ifdef _WIN32";
      if true {
         h! = W.CreateFileA(path, #read, #read, null, #open-existing, #normal, #null);
         if h == #invalid {
            return null;
         }
         var f-size;
         if !W.GetFileSizeEx(h, f-size) {
            W.CloseHandle(h);
            return null;
         }
         size! = f-size.quadPart;
         if max-size != 0 {
            if size:usz > max-size {
               size =  max-size;
            }
         }
         var buf:u8[];
         C.malloc-arr(buf, add-before + size + add-after);
         var bytes-read;
         if !W.ReadFile(h, &buf[add-before], size, bytes-read, null) || (bytes-read != size) {
            C.free(buf);
            W.CloseHandle(h);
            return null;
         }
         W.CloseHandle(h);
         out-size = size;
         return buf;
      }
      "#else";
      if true {
         var fd;
         if !X.Fd.open(fd, path, #rdonly) {
            return null;
         }
         size! = fd.seek(0, #end);
         if size == -1 {
            fd.close();
            return null;
         }
         if max-size != 0 {
            if size:usz > max-size {
               size =  max-size;
            }
         }
         if fd.seek(0, #set) == -1 {
            fd.close();
            return null;
         }
         var buf:u8[];
         // C1.stdout{"malloc " (add-before + size + add-after):u32 "\n"}
         C.malloc-arr(buf, add-before + size + add-after);
         if fd.read(&buf[add-before], size) != size {
            C.free(buf);
            fd.close();
            return null;
         }
         fd.close();
         out-size = size;
         return buf;
      }
      "#endif";
   }
   write-file(path:char[], data:ref, size:usz):bool {
      "#ifdef _WIN32";
      if true {
         h! = W.CreateFileA(path, #write, #0, null, #create-always, #normal, #null);
         if h == #invalid {
            return false;
         }
         var bytes-written;
         if !W.WriteFile(h, data, size, bytes-written, null) || (bytes-written != size) {
            W.CloseHandle(h);
            return false;
         }
         W.CloseHandle(h);
         return true;
      }
      "#else";
      if true {
         var fd;
         if !X.Fd.open(fd, path, #create | #truncate | #wronly, 0o644) {
            return false;
         }
         if fd.write(data, size) != size {
            fd.close();
            return false;
         }
         fd.close();
         return true;
      }
      "#endif";
   }
   var output-data:char[] @real-name(output_data);
   var output-cap:u32;
   var output-len:u32 @real-name(output_len);
   struct Output[reserve:u32] {
      output-reserve-cstr(o:this, str:char[], len:u32, unused:intc) {
         o.reserve += len;
      }
      output-cstr(o:this, str:char[], len:u32, unused:intc) {
         output-bytes-nr(str, len);
      }
      output-reserve-end(o:this) {
         output-reserve(o.reserve);
      }
      output-end(o:this) {
      }
   }
   enum OutputIntType[#oct, #hex]:u8;
   output(o:Output) @meta(output-reserve output end) @inline {
      o.reserve = 0;
   }
   output-reserve(len:u32) {
      space! = .output-cap - .output-len;
      if space < len {
         .output-cap += .output-cap;
         space = .output-cap - .output-len;
         loop space < len {
            .output-cap += .output-cap;
            space = .output-cap - .output-len;
         }
         C.realloc-arr(.output-data, .output-cap);
      }
   }
   output-u32(val:u32) {
      output-reserve(10);
      output-u32-nr(val);
   }
   output-u32-nr(val:u32) {
      if val == 0 {
         .output-data[.output-len++] = ''0;
      } else {
         // integer to string, count the digits
         var data:char[];
         data = &.output-data[.output-len];
         digits! = 0;
         loop {
            data[digits++] = (val % 10) + ''0;
            val /= 10;
            if val == 0 { break }
         }
         // reverse the string
         start! = 0;
         end! = digits - 1;
         loop start < end {
            tmp! = data[start];
            data[start] = data[end];
            data[end] = tmp;
            start++;
            end--;
         }
         .output-len += digits;
      }
   }
   output-o32(val:u32) {
      output-reserve(11);
      output-o32-nr(val:u32);
   }
   output-o32-nr(val:u32) {
      if val == 0 {
         .output-data[.output-len++] = ''0;
      } else {
         // integer to string, count the digits
         var data:char[];
         data = &.output-data[.output-len];
         digits! = 0;
         loop {
            data[digits++] = (val % 8) + ''0;
            val /= 8;
            if val == 0 { break }
         }
         // reverse the string
         start! = 0;
         end! = digits - 1;
         loop start < end {
            tmp! = data[start];
            data[start] = data[end];
            data[end] = tmp;
            start++;
            end--;
         }
         .output-len += digits;
      }
   }
   output-x32(val:u32) {
      output-reserve(8);
      output-x32-nr(val);
   }
   output-x32-nr(val:u32) {
      if val == 0 {
         .output-data[.output-len++] = ''0;
      } else {
         // integer to string, count the digits
         var data:char[];
         data = &.output-data[.output-len];
         digits! = 0;
         loop {
            n! = val % 16;
            if n < 10 {
               data[digits++] = n + ''0;
            } else {
               data[digits++] = (n - 10) + ''a;
            }
            val /= 16;
            if val == 0 { break }
         }
         // reverse the string
         start! = 0;
         end! = digits - 1;
         loop start < end {
            tmp! = data[start];
            data[start] = data[end];
            data[end] = tmp;
            start++;
            end--;
         }
         .output-len += digits;
      }
   }
   output-f32(val:f32) {
      output-reserve(47);
      output-f32-nr(val);
   }
   output-f32-nr(val:f32) {
      var len:intc;
      C.sprintf(&.output-data[.output-len], "%f%n", val, &len);
      .output-len += len;
   }
   output-i32(val:i32) {
      output-reserve(11);
      output-i32-nr(val);
   }
   output-i32-nr(val:i32) {
      if val == 0 {
         .output-data[.output-len++] = ''0;
      } elif val < 0 {
         val = -val;
         .output-data[.output-len++] = ''-;
         // integer to string, count the digits
         var data:char[];
         data = &.output-data[.output-len];
         digits! = 0;
         loop {
            data[digits++] = (val % 10) + ''0;
            val /= 10;
            if val == 0 { break }
         }
         // reverse the string
         start! = 0;
         end! = digits - 1;
         loop start < end {
            tmp! = data[start];
            data[start] = data[end];
            data[end] = tmp;
            start++;
            end--;
         }
         .output-len += digits;
      } else {
         // integer to string, count the digits
         var data:char[];
         data = &.output-data[.output-len];
         digits! = 0;
         loop {
            data[digits++] = (val % 10) + ''0;
            val /= 10;
            if val == 0 { break }
         }
         // reverse the string
         start! = 0;
         end! = digits - 1;
         loop start < end {
            tmp! = data[start];
            data[start] = data[end];
            data[end] = tmp;
            start++;
            end--;
         }
         .output-len += digits;
      }
   }
   output-u64(val:i64) {
      output-reserve(20);
      output-u64-nr(val);
   }
   output-u64-nr(val:i64) {
      if val == 0 {
         .output-data[.output-len++] = ''0;
      } else {
         // integer to string, count the digits
         var data:char[];
         data = &.output-data[.output-len];
         digits! = 0;
         loop {
            data[digits++] = (val % 10) + ''0;
            val /= 10;
            if val == 0 { break }
         }
         // reverse the string
         start! = 0;
         end! = digits - 1;
         loop start < end {
            tmp! = data[start];
            data[start] = data[end];
            data[end] = tmp;
            start++;
            end--;
         }
         .output-len += digits;
      }
   }
   output-bytes(str:char[], len:u32) {
      output-reserve(len);
      output-bytes-nr(str, len);
   }
   output-bytes-nr(str:char[], len:u32) {
      C.memcpy(&.output-data[.output-len], str, len);
      .output-len += len;
   }
}
using f32 {
   output-reserve(val:this, so:Cp1.Output, unused:intc) @inline {
      so.reserve += 47;
   }
   output(val:this, so:Cp1.Output, unused:intc) @inline {
      Cp1.output-f32-nr(val);
   }
}
using i32 {
   output-reserve(val:this, so:Cp1.Output, unused:intc) @inline {
      so.reserve += 11;
   }
   output(val:this, so:Cp1.Output, unused:intc) @inline {
      Cp1.output-i32-nr(val);
   }
}
using u32 {
   output-reserve(val:this, so:Cp1.Output, unused:intc) @inline {
      so.reserve += 10;
   }
   output(val:this, so:Cp1.Output, unused:intc) @inline {
      Cp1.output-u32-nr(val);
   }
   output-reserve(val:this, type:Cp1.OutputIntType, so:Cp1.Output, unused:intc) @inline {
      switch type {
         case #oct {
            so.reserve += 11;
         }
         case #hex {
            so.reserve += 8;
         }
      }
   }
   output(val:this, type:Cp1.OutputIntType, so:Cp1.Output, unused:intc) @inline {
      switch type {
         case #oct {
            Cp1.output-o32-nr(val);
         }
         case #hex {
            Cp1.output-x32-nr(val);
         }
      }
   }
}
using u64 {
   output-reserve(val:this, so:Cp1.Output, unused:intc) @inline {
      so.reserve += 20;
   }
   output(val:this, so:Cp1.Output, unused:intc) @inline {
      Cp1.output-u64-nr(val);
   }
}
using char {
   output-reserve(val:this, o:Cp1.Output, unused:intc) {
      o.reserve += 1;
   }
   output(val:this, o:Cp1.Output, unused:intc) {
      Cp1.output-data[Cp1.output-len++] = val;
   }
   output-reserve-arr(val:this[], o:Cp1.Output, len:u32&) {
      o.reserve += len := C.strlen(val);
   }
   output-arr(val:this[], o:Cp1.Output, len:u32) {
      Cp1.output-bytes-nr(val, len);
   }
   output-reserve-arr(val:this[], len:usz, o:Cp1.Output, unused:intc) {
      o.reserve += len;
   }
   output-arr(val:this[], len:usz, o:Cp1.Output, unused:intc) {
      Cp1.output-bytes-nr(val, len);
   }
}
