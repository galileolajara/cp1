using Cp1 = Cp1;
using C = LibC;
using C1 = LibCp1;
using Cp1 {
enum Str[#nil = -1, #0]:i32;
var str-c:i32;
var str-cap:i32;
var str-ptr:ref[];
var str-len:i32[];
var string-buf:char[] @extern;
var string-len:i32 @extern;
expr-str(prev:ExprI):ExprI {
   len! = .string-len;
   var n:ExprStrNode;
   quick-alloc-plus(n, len + 1);
   n.len = len;
   C.memcpy(n.buf, .string-buf, len);
   n.buf[len] = ''\0;
   n.next = null;
   if prev == #nil {
      var e:ExprStr;
      quick-alloc-one(e);
      e-idx! = expr-push(e.base, #str);
      e.node-c = 1;
      e.first = n;
      e.last = n;
      return e-idx;
   } else {
      var e:ExprStr = prev.ptr();
      e.node-c++;
      e.last.next = n;
      e.last = n;
      return prev;
   }
}
write-str-node(len:i32, ptr:ref);
using ExprI {
   wr-str(expr:Expr, w:Wtr, header:bool) @case.wr() @inline {
      var e:ExprStr = expr;
      w.n(e.node-c);
      n! = e.first;
      loop {
         w.n(n.len);
         w.copy(n.buf, n.len);
         n = n.next;
         if n == null { break }
      }
   }
   rd-str(e-idx:ExprI, r:Rdr) @case.rd() @inline {
      node-c! = r.n();
      var e:ExprStr;
      quick-alloc-one(e);
      e-idx.set(e.base, #str);
      first! = true;
      loop node-c {
         len! = r.n();
         var n:ExprStrNode;
         quick-alloc-plus(n, len + 1);
         n.len = len;
         r.copy(n.buf, len);
         n.buf[len] = 0;
         n.next = null;
         if first {
            first = false;
            e.first = n;
            e.last = n;
         } else {
            e.last.next = n;
            e.last = n;
         }
      }
   }
   write-str(expr:Expr) @case.write() @inline {
      var e:ExprStr = expr;
      n! = e.first;
      loop {
         output-reserve(n.len << 1);
         n = n.next;
         if n == null { break }
      }
      n = e.first;
      loop {
         write-str-node(n.len, n.buf);
         n = n.next;
         if n == null { break }
         output{''\n}
      }
   }
   value-str(s:this, reff:i32, paren:bool, v:Value, ok:bool&) @case.value() @inline {
      v.type = basic-type(#char);
      v.info.init();
      v.info.array-c = 1;
      v.info.ref-v[0] = ''\0;
      v.info.ref-v[1] = ''\0;
      v.info.star-c = 1;
      v.reff = 1;
      ok = true;
   }
   process-str(expr:Expr, ok:bool&) @case.process() @inline {
      ok = true;
   }
}
 

}
