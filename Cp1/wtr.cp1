using C = LibC;
using C1 = LibCp1;
using Cp1 {
union Wtr[
   reff:ref,
   pos:usz,
   p1:u8[],
   p4:u32[],
   ] {
   n1(w:this, n:u8) @inline {
      w.p1[0] = n;
      w.pos++;
   }
   n2(w:this, n:u32) @inline {
      w.p1[0] = n;
      w.p1[1] = n >> 8;
      w.pos += 2;
   }
   n4(w:this, n:u32) @inline {
      w.p1[0] = n;
      w.p1[1] = n >> 8;
      w.p1[2] = n >> 16;
      w.p1[3] = n >> 24;
      w.pos += 4;
   }
   include "num.c" {
      n(w:this, n:u32) @real-name(Fputnum) @no-decl;
      i(w:this, n:i32) @real-name(Fputint) @no-decl;
      N(w:this, n:u64) @real-name(Fputlnum) @no-decl;
      I(w:this, n:i64) @real-name(Fputlint) @no-decl;
   }
   copy(w:this, data:ref, size:i32) @inline {
      C.memcpy(w.reff, data, size);
      w.pos += size;
   }
   b(w:this, val:bool) @inline {
      if val { w.n1(1) }
       else { w.n1(0) }
   }
}
 

}
