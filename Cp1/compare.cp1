using C1 = LibCp1;
using Cp1 {
enum Compare[#eq, #not-eq, #lt, #le, #gt, #ge]:u8 {
   wr(e:this, w:Wtr) @inline {
      w.n1(e:base);
   }
   rd(e:this&, r:Rdr) @inline {
      e = r.n1():Compare;
   }
}
expr-compare(left:ExprI, right:ExprI, type:Compare):ExprI {
   var e:ExprCompare;
   quick-alloc-one(e);
   e-idx! = expr-push(e.base, #compare);
   e.left = left;
   e.right = right;
   e.type = type;
   return e-idx;
}
using ExprI {
   wr-compare(expr:Expr, w:Wtr, header:bool) @case.wr() @inline {
      var e:ExprCompare = expr;
      e.left.wr(w, header);
      e.right.wr(w, header);
      e.type.wr(w);
   }
   rd-compare(e-idx:ExprI, r:Rdr) @case.rd() @inline {
      var e:ExprCompare;
      quick-alloc-one(e);
      e-idx.set(e.base, #compare);
      e.left.rd(r);
      e.right.rd(r);
      e.type.rd(r);
   }
   write-compare(expr:Expr) @case.write() @inline {
      var e:ExprCompare = expr;
      e.left.write-value(e.left-val);
      if e.is-overload { return }
      switch e.type {
         case #eq { output{" == "} }
         case #not-eq { output{" != "} }
         case #lt { output{" < "} }
         case #le { output{" <= "} }
         case #gt { output{" > "} }
         case #ge { output{" >= "} }
      }
      e.right.write-value(e.right-val);
   }
   value-compare(e:this, reff:i8, paren:bool, v:Value, ok:bool&) @case.value() @inline {
      var expr:ExprCompare = e.ptr();
      if expr.is-overload {
         ok = expr.left.value(reff, paren, v);
         return;
      }
      v.type = basic-type(#bool);
      v.info.init();
      v.info.array-c = 0;
      v.info.ref-v[0] = ''\0;
      v.info.star-c = 0;
      v.reff = 1;
      v.paren = paren;
      ok = true;
   }
   type-compare(expr:Expr, at:At&) @case.type() @inline {
      var e:ExprCompare = expr;
      if e.is-overload {
         at = e.left.type();
         return;
      }
      at = basic-type(#bool);
   }
   process-compare(expr:Expr, ok:bool&) @case.process() @inline {
      var e:ExprCompare = expr;
      left-type! = e.left.type();
      left-type-ptr! = left-type.ptr();
      e.right.try-deduce(left-type);
      if left-type-ptr.def == #enum {
         en! = left-type-ptr.decl.enumm.ptr();
         f-idx! = en.overload-compare-last;
         if f-idx != #nil {
            e-right-type! = e.right.type();
            f! = f-idx.ptr();
            loop {
               if f.farg-v[1].decl.type == e-right-type {
                  e-method! = ExprI.alloc();
                  var group-v:u8[1];
                  group-v[0] = 2;
                  var carg-v:ExprI[2];
                  carg-v[0] = e.right;
                  e-cvar! = ExprI.alloc();
                  var id-op;
                  switch e.type {
                     case #eq { id-op = .id-eq }
                     case #not-eq { id-op = .id-ne }
                     case #gt { id-op = .id-gt }
                     case #ge { id-op = .id-ge }
                     case #lt { id-op = .id-lt }
                     case #le { id-op = .id-le }
                  }
                  set-cvar(e-cvar, #nil, id-op);
                  carg-v[1] = e-cvar;
                  set-method(e-method, e.left, f.decl.name, 1, group-v, 2, carg-v);
                  e.left = e-method;
                  e.is-overload = true;
                  if !e.left.value(1, true, e.left-val) {
                     return;
                  }
                  ok = true;
                  return;
               }
               f-idx = f.list1-prev;
               if f-idx == #nil { break }
               f = f-idx.ptr();
            }
            f-idx = en.overload-compare-last;
            f = f-idx.ptr();
            loop {
               en2! = f.farg-v[1].decl.type.ptr().decl.enumm.ptr();
               f2-idx! = en2.overload-get-last;
               if f2-idx != #nil {
                  f2! = f2-idx.ptr();
                  loop {
                     if f2.farg-v[0].decl.type == e-right-type {
                        e-func! = ExprI.alloc();
                        var group-v:u8[1];
                        group-v[0] = 1;
                        var carg-v:ExprI[1];
                        carg-v[0] = e.right;
                        set-func(e-func, f2.at, f2.decl.name, 1, group-v, 1, carg-v);
                        if true {
                           e-method! = ExprI.alloc();
                           var group-v:u8[1];
                           group-v[0] = 2;
                           var carg-v:ExprI[2];
                           carg-v[0] = e-func;
                           e-cvar! = ExprI.alloc();
                           var id-op;
                           switch e.type {
                              case #eq { id-op = .id-eq }
                              case #not-eq { id-op = .id-ne }
                              case #gt { id-op = .id-gt }
                              case #ge { id-op = .id-ge }
                              case #lt { id-op = .id-lt }
                              case #le { id-op = .id-le }
                           }
                           set-cvar(e-cvar, #nil, id-op);
                           carg-v[1] = e-cvar;
                           set-method(e-method, e.left, f.decl.name, 1, group-v, 2, carg-v);
                           e.left = e-method;
                           e.is-overload = true;
                        }
                        if !e.left.value(1, true, e.left-val) {
                           return;
                        }
                        ok = true;
                        return;
                     }
                     f2-idx = f2.list1-prev;
                     if f2-idx == #nil { break }
                     f2 = f2-idx.ptr();
                  }
               }
               f-idx = f.list1-prev;
               if f-idx == #nil { break }
               f = f-idx.ptr();
            }
         }
      }
      if !e.left.value(1, true, e.left-val) {
         return;
      }
      if !e.right.value(1, true, e.right-val) {
         return;
      }
      if !compatible(e.left-val.type, e.left-val.info.star-c + e.left-val.type.pointer(), e.right-val.type, e.right-val.info.star-c + e.right-val.type.pointer()) {
         C1.stdbuf{.ctx-func.file '': .ctx-begin-row '': .ctx-begin-col ": Type mismatch for the left and right operands of the comparison operator '"}
         switch e.type {
            case #eq { C1.stdbuf{"=="} }
            case #not-eq { C1.stdbuf{"!="} }
            case #lt { C1.stdbuf{"<"} }
            case #le { C1.stdbuf{"<="} }
            case #gt { C1.stdbuf{">"} }
            case #ge { C1.stdbuf{">="} }
         }
         C1.stdout{"'\n"}
         return;
      }
      ok = true;
   }
}
 

}
