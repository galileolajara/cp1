using C1 = LibCp1;
using C = LibC;
using Cp1 {
enum Assign[#eq, #colon-eq, #plus-eq, #minus-eq, #mul-eq, #div-eq,
             #lshift-eq, #rshift-eq, #and-eq, #or-eq, #xor-eq,
             ]:u8 {
   wr(s:this, w:Wtr) @inline {
      w.n1(s:base);
   }
   rd(s:this&, r:Rdr) @inline {
      s = r.n1():Assign;
   }
}
expr-assign(left:ExprI, right:ExprI, type:Assign):ExprI {
   var e:ExprAssign;
   quick-alloc-one(e);
   e-idx! = expr-push(e.base, #assign);
   e.left = left;
   e.right = right;
   e.type = type;
   if e.type == #eq {
      e2! = left.ptr();
      if e2.type == #lvar {
         var lvar:ExprLvar = e2;
         if lvar.decl {
            lvar.lvar.ptr().flags ^= #set-expr;
         }
      }
   }
   return e-idx;
}
using ExprI {
   wr-assign(expr:Expr, w:Wtr, header:bool) @case.wr() @inline {
      var e:ExprAssign = expr;
      if e.is-stmt {
         if e.type == #colon-eq {
            C1.stdout{.input-path '': .ctx-begin-row '': .ctx-begin-col " - " .ctx-end-row '': .ctx-end-col ": Please use '=' instead of ':=' when using assignment operator in this instance.\n"}
            C.exit(#failure);
         }
      } else {
         if e.type == #eq {
            C1.stdout{.input-path '': .ctx-begin-row '': .ctx-begin-col " - " .ctx-end-row '': .ctx-end-col ": Please use ':=' instead of '=' when using assignment operator in this instance.\n"}
            C.exit(#failure);
         }
      }
      e.left.wr(w, header);
      e.right.wr(w, header);
      e.type.wr(w);
   }
   write-assign(expr:Expr) @case.write() @inline {
      var e:ExprAssign = expr;
      e.left.write-value(e.left-val);
      e-right! = e.right.ptr();
      if (e.type == #eq) && (e-right.type == #ref) {
         output{" = ((void*)"}
         e.right.write-value(e.right-val);
         output{'')}
         return;
      }
      switch e.type {
         case #eq { output{" = "} }
         case #colon-eq { output{" = "} }
         case #plus-eq { output{" += "} }
         case #minus-eq { output{" -= "} }
         case #mul-eq { output{" *= "} }
         case #div-eq { output{" /= "} }
         case #lshift-eq { output{" <<= "} }
         case #rshift-eq { output{" >>= "} }
         case #and-eq { output{" &= "} }
         case #or-eq { output{" |= "} }
         case #xor-eq { output{" ^= "} }
      }
      e-left! = e.left.ptr();
      if (e.type == #eq) && (e-left.type == #lvar) {
         var lvar:ExprLvar = e-left;
         if lvar.decl {
            output{"(("}
            ld! = lvar.lvar.ptr().decl;
            ld.type.write-type-info(ld.type-info, 0 - ld.size-c);
            output{")("}
            e.right.write-value(e.right-val);
            output{"))"}
            return;
         }
      }
      e.right.write-value(e.right-val);
   }
   rd-assign(e-idx:ExprI, r:Rdr) @case.rd() @inline {
      var e:ExprAssign;
      quick-alloc-one(e);
      e-idx.set(e.base, #assign);
      e.left.rd(r);
      e.right.rd(r);
      e.type.rd(r);
   }
   type-assign(expr:Expr, at:At&) @case.type() @inline {
      var e:ExprAssign = expr;
      at = e.left.type();
   }
   value-assign(e:this, reff:i8, paren:bool, v:Value, ok:bool&) @case.value() @inline {
      var expr:ExprAssign = e.ptr();
      if expr.left.value(1, paren, v) == false {
         return;
      }
      v.paren = paren;
      v.reff = reff;
      ok = true;
   }
   process-assign(expr:Expr, ok:bool&) @case.process() @inline {
      var e:ExprAssign = expr;
      left-e! = e.left.ptr();
      if left-e.type == #lvar {
         var left:ExprLvar = left-e;
         lvar! = left.lvar.ptr();
         if lvar.decl.type == #nil {
            if !e.right.value(1, true, e.right-val) {
               return;
            }
            lvar.decl.type = e.right-val.type;
            at! = lvar.decl.type.ptr();
            lvar.decl.type-info.init();
            lvar.decl.type-info.copy-from(e.right-val.info);
            e.left.value(1, true, e.left-val);
            ok = true;
            return;
         }
      }
      if !e.left.value(1, true, e.left-val) {
         return;
      }
      e.right.try-deduce(e.left.type());
      if !e.right.value(1, true, e.right-val) {
         return;
      }
      var e-left:ExprLvar = e.left.ptr();
      if (e-left.base.type == #lvar) && e-left.decl {
         // Bypass compatibility check on variable declaration assignment
      } elif !compatible(e.left-val.type, e.left-val.info.star-c + e.left-val.type.pointer(), e.right-val.type, e.right-val.info.star-c + e.right-val.type.pointer()) {
         C1.stdbuf{.ctx-func.file '': .ctx-begin-row '': .ctx-begin-col ": Type mismatch for the left and right operands of the assignment operator '"}
         switch e.type {
            case #eq { C1.stdbuf{"="} }
            case #colon-eq { C1.stdbuf{":="} }
            case #plus-eq { C1.stdbuf{"+="} }
            case #minus-eq { C1.stdbuf{"-="} }
            case #mul-eq { C1.stdbuf{"*="} }
            case #div-eq { C1.stdbuf{"/="} }
            case #lshift-eq { C1.stdbuf{"<<="} }
            case #rshift-eq { C1.stdbuf{">>="} }
            case #and-eq { C1.stdbuf{"&="} }
            case #or-eq { C1.stdbuf{"|="} }
            case #xor-eq { C1.stdbuf{"^="} }
         }
         C1.stdout{"'\n"}
         return;
      }
      ok = true;
   }
}
 

}
