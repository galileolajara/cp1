using Cp1 {
using StmtSpace {
   wr-if(stmt:Stmt, w:Wtr, header:bool) @case.wr() @inline {
      var s:StmtIf = stmt;
      s.expr.wr(w, header);
   }
   rd-if(space:StmtSpace, r:Rdr) @case.rd() @inline {
      var s:StmtIf;
      quick-alloc-one(s);
      s.expr.rd(r);
      space.stmt-push(s.base, .ctx-begin-row, .ctx-begin-col, .ctx-end-row, .ctx-end-col, #if);
   }
   wr-if-elif(stmt:Stmt, w:Wtr, header:bool) @case.wr() @inline {
      var s:StmtIfElif = stmt;
      s.expr.wr(w, header);
   }
   rd-if-elif(space:StmtSpace, r:Rdr) @case.rd() @inline {
      var s:StmtIfElif;
      quick-alloc-one(s);
      s.expr.rd(r);
      space.stmt-push(s.base, .ctx-begin-row, .ctx-begin-col, .ctx-end-row, .ctx-end-col, #if-elif);
   }
   wr-if-else(stmt:Stmt, w:Wtr, header:bool) @case.wr() @inline {
   }
   rd-if-else(space:StmtSpace, r:Rdr) @case.rd() @inline {
      var s:StmtIfElse;
      quick-alloc-one(s);
      space.stmt-push(s.base, 0, 0, 0, 0, #if-else);
   }
   wr-if-end(stmt:Stmt, w:Wtr, header:bool) @case.wr() @inline {
   }
   rd-if-end(space:StmtSpace, r:Rdr) @case.rd() @inline {
      var s:StmtIfEnd;
      quick-alloc-one(s);
      space.stmt-push(s.base, 0, 0, 0, 0, #if-end);
   }
}
using Stmt {
   write-if(stmt:Stmt) @case.write() @inline {
      var s:StmtIf = stmt;
      output{"if("}
      s.expr.write-value(s.val);
      output{") {\n"}
   }
   process-if(stmt:Stmt, ok:bool&) @case.process() @inline {
      var s:StmtIf = stmt;
      if !s.expr.value(1, false, s.val) {
         return;
      }
      ok = true;
   }
   write-if-elif(stmt:Stmt) @case.write() @inline {
      var s:StmtIfElif = stmt;
      output{"} else if("}
      s.expr.write-value(s.val);
      output{") {\n"}
   }
   process-if-elif(stmt:Stmt, ok:bool&) @case.process() @inline {
      var s:StmtIfElif = stmt;
      if !s.expr.value(1, false, s.val) {
         return;
      }
      ok = true;
   }
   write-if-else(stmt:Stmt) @case.write() @inline {
      var s:StmtIfElse = stmt;
      output{"} else {\n"}
   }
   process-if-else(stmt:Stmt, ok:bool&) @case.process() @inline {
      var s:StmtIfElse = stmt;
      ok = true;
   }
   write-if-end(stmt:Stmt) @case.write() @inline {
      var s:StmtIfEnd = stmt;
      output{"}\n"}
   }
   process-if-end(stmt:Stmt, ok:bool&) @case.process() @inline {
      var s:StmtIfEnd = stmt;
      ok = true;
   }
}
stmt-if-begin() {
   stmt-space-begin();
   .decl-func-ctx-space.flags |= #skip-lvar-decl;
}
stmt-elif-begin() {
}
stmt-if-set(expr:ExprI, begin-row:u32, begin-col:u32, end-row:u32, end-col:u32) {
   var s:StmtIf;
   quick-alloc-one(s);
   s.expr = expr;
   stmt-push(s.base, begin-row, begin-col, end-row, end-col, #if);
   stmt-space-begin();
}
stmt-elif-set(expr:ExprI, begin-row:u32, begin-col:u32, end-row:u32, end-col:u32) {
   var s:StmtIfElif;
   quick-alloc-one(s);
   s.expr = expr;
   stmt-push(s.base, begin-row, begin-col, end-row, end-col, #if-elif);
   stmt-space-begin();
}
stmt-else-set() {
   var s:StmtIfElse;
   quick-alloc-one(s);
   stmt-push(s.base, 0, 0, 0, 0, #if-else);
   stmt-space-begin();
}
stmt-if-end() {
   stmt-space-end();
}
stmt-elif-end() {
   stmt-space-end();
}
stmt-else-end() {
   stmt-space-end();
}
stmt-if-end-ifs() {
   var s:StmtIfEnd;
   quick-alloc-one(s);
   stmt-push(s.base, 0, 0, 0, 0, #if-end);
   stmt-space-end();
}
 

}
