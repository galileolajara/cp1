using C = LibC;
using C1 = LibCp1;
using Cp1 {
#MetaReadWriteProcess{method:true}
#MetaReadWriteProcess{method:false}
meta #MetaReadWriteProcess {
   using C1 = LibCp1;
   using Cp1.ExprI {
      wr-meta${arg.method ? 'method' : 'func'}(expr:Expr, w:Wtr, header:bool) @case.wr() @inline {
# if (arg.method) {
         var e:ExprMetaMethod = expr;
         e.thiss.wr(w, header);
# } else {
         var e:ExprMetaFunc = expr;
         e.at.wr(w, header);
# }
         e.func-name.wr(w, header);
         w.n1(e.group-c);
         loop i = 0; e.group-c; i++ {
            w.n1(e.group-v[i]);
         }
         w.n1(e.carg-c);
         loop i = 0; e.carg-c; i++ {
            e.carg-v[i].expr.wr(w, header);
            e.lvars[i].wr(w, header);
         }
         e.lvar.wr(w, header);
      }
      rd-meta${arg.method ? 'method' : 'func'}(e-idx:ExprI, r:Rdr) @case.rd() @inline {
# if (arg.method) {
         ExprI.rd(thiss!, r);
# } else {
         At.rd(at-idx!, r);
# }
         Id.rd(func-name!, r);
         group-c! = r.n1();
         var group-v:u8[#expr-carg-group-limit];
         loop i = 0; group-c; i++ {
            group-v[i] = r.n1();
         }
         carg-c! = r.n1();
         var carg-v:ExprI[256];
         var lvars:ExprI[256];
         loop i = 0; carg-c; i++ {
            carg-v[i].rd(r);
            lvars[i].rd(r);
         }
         ExprI.rd(lvar!, r);

         expr-c! = (group-c << 1) + 1;
         // C1.stdout{group-c " -> " expr-c ''\n}
         var e:ExprMetaFunc;
         quick-alloc-plus(e, ExprI[usz] * expr-c);
         e-idx.set(e.base, #metafunc);

         e.expr-c = expr-c;
         k! = 0;
         j! = 0;
         // Create expressions for meta-method-prefix1
         e-idx = ExprI.alloc();
         e.expr-v[k++] = e-idx;
         if true {
            var group-v:u8[1];
            group-v[0] = 1;
            var carg-v:ExprI[1];
            carg-v[0] = lvar;
# if (arg.method) {
            set-method(e-idx, thiss, func-name, 1, group-v, 1, carg-v);
# } else {
            set-func(e-idx, at-idx, func-name, 1, group-v, 1, carg-v);
# }
         }
         j-begin! = j;
         // C1.stdout{"group-c " group-c ", carg-c " carg-c ''\n}
# for (let i = 0; i < 2; i++) {
         j = j-begin;
         loop i = 1; group-c - 1; i++ {
            carg-c! = group-v[i];
            e-idx = ExprI.alloc();
            e.expr-v[k++] = e-idx;

            carg! = carg-v[j++];
            e-carg! = carg.ptr();
            var group-v:u8[1];
            var carg2-v:ExprI[256];
            if e-carg.type == #str {
               var e-str:ExprStr = e-carg;
               group-v[0] = 2 + (carg-c - 1) + 1;
               carg2-v[0] = carg;
               e-idx2! = ExprI.alloc();
               var e:ExprIntData;
               quick-alloc-one(e);
               e-idx2.set(e.base, #int);
               e.value.ii32 = e-str.len();
               e.type = #u32;
               carg2-v[1] = e-idx2;
               k! = 2;
               loop ; carg-c - 1 {
                  carg2-v[k++] = carg-v[j++];
               }
               carg2-v[k] = lvars[i - 1];
               set-method(e-idx, lvar, #nil, 1, group-v, group-v[0], carg2-v);
            } else {
               group-v[0] = 1 + (carg-c - 1) + 1;
               k! = 0;
               loop ; carg-c - 1 {
                  carg2-v[k++] = carg-v[j++];
               }
               carg2-v[k++] = lvar;
               carg2-v[k] = lvars[i - 1];
               set-method(e-idx, carg, #nil, 1, group-v, group-v[0], carg2-v);
            }
         }
         // Create an expression for meta-method-end1
         e-idx = ExprI.alloc();
         e.expr-v[k++] = e-idx;
         if true {
            var group-v:u8[1];
            group-v[0] = 0;
            set-method(e-idx, lvar, #nil, 1, group-v, 0, null);
         }
# }
      }
      process-meta${arg.method ? 'method' : 'func'}(expr:Expr, ok:bool&) @case.process() @inline {
# if (arg.method) {
         var e:ExprMetaMethod = expr;
# } else {
         var e:ExprMetaFunc = expr;
# }
         i! = 0;
         if !e.expr-v[i].process() {
            C1.stdout{.ctx-func.file ":" .ctx-begin-row ":" .ctx-begin-col " - " .ctx-end-row ":" .ctx-end-col ": Error in processing the beginning of meta-${arg.method ? 'method' : 'function'}\n"}
            return;
         }
         var e-func:ExprFunc = e.expr-v[i].ptr();
         f! = e-func.func-idx.ptr();
         if (f.flags & #meta-method) == #0 {
            C1.stdout{.ctx-func.file ":" .ctx-begin-row ":" .ctx-begin-col " - " .ctx-end-row ":" .ctx-end-col ": When using " f.decl.name "{...}, there must be a @meta(NAME-PREFIX END-NAME) attribute in the function " f.decl.name ''\n}
            return;
         }
         i++;
         arg-c! = ((e.expr-c - 1) >> 1) - 1;
# for (let i = 1; i <= 2; i++) {
# if (i == 2) {
         if f.meta-method-prefix2 != #nil {
# }
         arg-num! = 1;
         loop ; arg-c; i++; arg-num++ {
            e-idx! = e.expr-v[i];
            var e-method:ExprMethod = e-idx.ptr();
# if (i == 1) {
            if f.meta-method-prefix2 == #nil {
               e-method.group-v[0]--;
               e-method.carg-c--;
            }
# }
            var lvar:ExprLvar = e-method.thiss.ptr();
            if (lvar.base.type == #lvar) && (lvar.lvar.ptr().decl.name == .id-blank) {
               // C1.stdout{"constant string\n"}
               e-method.func-name = f.meta-method-cstr${i};
            } else {
               e-idx2! = e-method.thiss;
               e-data2! = e-idx2.ptr();
               var val;
               if !e-idx2.value(1, true, val) {
                  C1.stdout{.ctx-func.file ":" .ctx-begin-row ":" .ctx-begin-col " - " .ctx-end-row ":" .ctx-end-col ": Error in processing the argument group #" arg-num " of meta-${arg.method ? 'method' : 'function'}\n"}
                  return;
               }
               if val.info.array-c > 0 {
                  e-method.func-name = f.meta-method-arr${i};
               } else {
                  e-method.func-name = f.meta-method-prefix${i};
               }
            }
            if !e-idx.process() {
               C1.stdout{.ctx-func.file ":" .ctx-begin-row ":" .ctx-begin-col " - " .ctx-end-row ":" .ctx-end-col ": Error in processing the argument group #" arg-num " of meta-${arg.method ? 'method' : 'function'}\n"}
               return;
            }
         }
         e-last! = e.expr-v[i++];
         var e-last-method:ExprMethod = e-last.ptr();
         e-last-method.func-name = f.meta-method-end${i};
         if !e-last.process() {
            C1.stdout{.ctx-func.file ":" .ctx-begin-row ":" .ctx-begin-col " - " .ctx-end-row ":" .ctx-end-col ": Error in processing the end of meta-${arg.method ? 'method' : 'function'}\n"}
            return;
         }
# if (i == 2) {
         }
# }
# }
         ok = true;
      }
   }
}
print-type(at-i:At, info:TypeInfo) {
   at! = at-i.ptr();
   if at.type == #basic {
      C1.stdout{"basic type " at.name.basic.cp1-name() ", star-c " info.star-c ''\n}
   } else {
      C1.stdout{"custom type " at.name.id ", star-c " info.star-c ''\n}
   }
}
compatible(src:At, src-c:u8, des:At, des-c:u8):bool {
   if src == des { return true }
   if (src >= basic-type(#char)) && (src <= basic-type(#usz)) {
      if (des >= basic-type(#char)) && (des <= basic-type(#usz)) {
         return true;
      }
   }
   if des == basic-type(#ref) {
      if src-c > 0 {
         return true;
      }
   }
   if src == basic-type(#ref) {
      if des-c > 0 {
         return true;
      }
   }
   return false;
}
farg-process(e-in-out:ExprI&, ca-ref:i8, ca-value:Value, fd-arg:DeclVarData, base-at:At, arg-num:i32, f-name:Id):bool {
   e! = e-in-out;
   ce! = e.ptr();
   var r:i32;
   if ca-ref != 0 {
      r = 1 + ca-ref;
   } else {
      r = 1;
      r += fd-arg.type-info.ref-v[fd-arg.type-info.array-c]:i32;
   }
   // C1.stdout{"r " r ", " j ''  fd-arg.type-info.array-c ''  fd-arg.type-info.ref-v[fd-arg.type-info.array-c] ''\n}
   if ce.type == #lvar {
      var ve:ExprLvar = ce;
      lvar! = ve.lvar.ptr();
      vd! = lvar.decl;
      if vd.type == #nil {
         // if (lvar.flags & #set-expr) == #0 {
            // if vd.type-info.array-c != fd-arg.type-info.array-c {
            //    C.err.printf("%s:%u:%u: Type deduction failed for lvar '%s', array dimension mismatch\n", .ctx-func.file.path(), lvar.row, lvar.col, vd.name.str());
            //    return false;
            // }
            parent! = fd-arg.type.ptr().parent.ptr();
            if (parent.type == #basic) && (parent.name.basic == #relative) {
               C1.stdout{"farg-process without processing farg first\n"}
               C.exit(#failure);
            }
            vd.type = fd-arg.type;
            vd.type-info.init();
            vd.type-info.copy-from(fd-arg.type-info);
            if fd-arg.type-info.built-in {
               vd.type-info.built-in = true;
               vd.type-info.ref-v[0] = ''\0;
            } elif (vd.type-info.ref-v[0] + vd.type.pointer()) != 0 {
               vd.type-info.ref-v[vd.type-info.array-c] -= 1:char;
               vd.type-info.star-c -= 1;
            }
         // }
      }
   }
   // fd-arg.validate(base-at);
   left-type-ptr! = fd-arg.type.ptr();
   e.try-deduce(fd-arg.type);
   if left-type-ptr.def == #enum {
      en! = left-type-ptr.decl.enumm.ptr();
      f-idx! = en.overload-get-last;
      if f-idx != #nil {
         e-right-type! = e.type();
         f! = f-idx.ptr();
         loop {
            if f.farg-v[0].decl.type == e-right-type {
               e-func! = ExprI.alloc();
               var group-v:u8[1];
               group-v[0] = 1;
               var carg-v:ExprI[1];
               carg-v[0] = e;
               ExprI.set-func(e-func, f.at, f.decl.name, 1, group-v, 1, carg-v);
               e-in-out = e-func;
               if !e-func.value(1, false, ca-value) {
                  return false;
               }
               return true;
            }
            f-idx = f.list1-prev;
            if f-idx == #nil { break }
            f = f-idx.ptr();
         }
      }
   }
   if !e.value(r, false, ca-value) { return false }
   if !compatible(ca-value.type, ca-value.info.star-c + ca-value.type.pointer(), fd-arg.type, fd-arg.type-info.star-c + fd-arg.type.pointer()) {
      C1.stdout{.ctx-func.file '': .ctx-begin-row '': .ctx-begin-col ": Type mismatch for the argument "}
      if arg-num == -1 {
         C1.stdbuf{"'this'"}
      } else {
         C1.stdbuf{''# (arg-num + 1):u32}
      }
      C1.stdout{" of function '" f-name "'\n"}
      // print-type(ca-value.type, ca-value.info);
      // print-type(fd-arg.type, fd-arg.type-info);
      return false;
   }
   return true;
}
using ExprI {
   value-func(e:this, reff:i32, paren:bool, v:Value, ok:bool&) @case.value() @inline {
      var expr:ExprFunc = e.ptr();
      f! = expr.func-idx.ptr();
      v.set(reff, paren, f.decl.type, f.decl.type-info);
      if v.reff == 1 {
         v.paren = false;
      }
      ok = true;
   }
   type-func(expr:Expr, at:At&) @case.type() @inline {
      var e:ExprFunc = expr;
      at = e.func-idx.ptr().decl.type;
   }
   value-method(e:this, reff:i32, paren:bool, v:Value, ok:bool&) @case.value() @inline {
      var expr:ExprMethod = e.ptr();
      f! = expr.func-idx.ptr();
      v.set(reff, paren, f.decl.type, f.decl.type-info);
      if v.reff == 1 {
         v.paren = false;
      }
      ok = true;
   }
   type-method(expr:Expr, at:At&) @case.type() @inline {
      var e:ExprMethod = expr;
      at = e.func-idx.ptr().decl.type;
   }
   write-method(expr:Expr) @case.write() @inline {
      var e:ExprMethod = expr;
      f! = e.func-idx.ptr();
      f.write();
      output{''(}
      first! = true;
      i! = 0;
      loop ; f.this-idx; i++ {
         if first {
            first = false;
         } else {
            output{", "}
         }
         ca! = e.carg-v[i];
         ca.expr.write-value(ca.value);
      }
      if first {
         first = false;
      } else {
         output{", "}
      }
      e.thiss.write-value(e.this-value);
      loop ; e.carg-c - f.this-idx; i++ {
         output{", "}
         ca! = e.carg-v[i];
         ca.expr.write-value(ca.value);
      }
      output{'')}
   }
   wr-method(expr:Expr, w:Wtr, header:bool) @case.wr() @inline {
      var e:ExprMethod = expr;
      e.thiss.wr(w, header);
      e.func-name.wr(w, header);
      w.n1(e.group-c);
      loop i = 0; e.group-c; i++ {
         w.n1(e.group-v[i]);
      }
      w.n1(e.carg-c);
      loop i = 0; e.carg-c; i++ {
         e.carg-v[i].expr.wr(w, header);
      }
   }
   rd-method(e-idx:ExprI, r:Rdr) @case.rd() @inline {
      ExprI.rd(this-expr!, r);
      Id.rd(func-name!, r);
      group-c! = r.n1();
      var group-v:u8[#expr-carg-group-limit];
      loop i = 0; group-c; i++ {
         group-v[i] = r.n1();
      }
      carg-c! = r.n1();
      var carg-v:ExprI[256];
      loop i = 0; carg-c; i++ {
         carg-v[i].rd(r);
      }
      set-method(e-idx, this-expr, func-name, group-c, group-v, carg-c, carg-v);
   }
   set-method(e-idx:ExprI, this-expr:ExprI, func-name:Id, group-c:u8, group-v:u8[], carg-c:u8, carg-v:ExprI[]) {
      var e:ExprMethod;
      quick-alloc-plus(e, Carg[usz] * carg-c);
      e-idx.set(e.base, #method);
      e.thiss = this-expr;
      e.func-name = func-name;
      e.group-c = group-c;
      loop i = 0; group-c; i++ {
         e.group-v[i] = group-v[i];
      }
      e.carg-c = carg-c;
      loop i = 0; carg-c; i++ {
         e.carg-v[i].expr = carg-v[i];
      }
   }
   process-method(expr:Expr, ok:bool&) @case.process() @inline {
      var e:ExprMethod = expr;
      func-name! = e.func-name;
      group-c! = e.group-c;
      group-v! = e.group-v;
      carg-c! = e.carg-c;
      carg-c1! = carg-c + 1;
      at-idx! = e.thiss.type();
      if at-idx == #nil {
         C1.stdout{.ctx-func.file '': .ctx-begin-row '': .ctx-begin-col " - " .ctx-end-row '': .ctx-end-col ": Cannot call method " func-name " on a value without a type\n"}
         return;
      }
      at! = at-idx.ptr();
      var method-c, method-v;
      if at.type == #basic {
         t! = .basic-type[at.name.basic];
         method-c = t.method-c;
         method-v = t.method-v;
      } else {
         if (&&, at.decl.structt == #nil, at.type != #basic, at.type != #module) {
            C1.stdout{.ctx-func.file '': .ctx-begin-row '': .ctx-begin-col " - " .ctx-end-row '': .ctx-end-col ": Cannot call method " func-name " because the type " at.name.id " is not defined\n"}
            return;
         }
         if at.def == #struct {
            t! = at.decl.structt.ptr();
            method-c = t.method-c;
            method-v = t.method-v;
         } elif at.def == #enum {
            t! = at.decl.enumm.ptr();
            method-c = t.method-c;
            method-v = t.method-v;
         }
      }
      found! = -1;
      similar-c! = 0:u32;
      loop i = 0; method-c; i++ {
         f-idx! = method-v[i];
         f! = f-idx.ptr();
         if f.decl.name != func-name { continue }
         found = i;
         similar-c++;
         if f.group-c != group-c { continue }
         match! = true;
         if (f.flags & #var-args) != #0 {
            if f.farg-c > carg-c1 { continue }
            loop j = 0; group-c - 1; j++ {
               if f.this-group == j {
                  if f.group-v[j] != (group-v[j] + 1) {
                     match = false;
                     break;
                  }
               } else {
                  if f.group-v[j] != group-v[j] {
                     match = false;
                     break;
                  }
               }
            }
            if match {
               j! = group-c - 1;
               if f.this-group == j {
                  if f.group-v[j] > (group-v[j] + 1) {
                     match = false;
                  }
               } else {
                  if f.group-v[j] > group-v[j] {
                     match = false;
                  }
               }
            }
         } else {
            if f.farg-c != carg-c1 { continue }
            loop j = 0; group-c; j++ {
               if f.this-group == j {
                  if f.group-v[j] != (group-v[j] + 1) {
                     match = false;
                     break;
                  }
               } else {
                  if f.group-v[j] != group-v[j] {
                     match = false;
                     break;
                  }
               }
            }
         }
         if !match { continue }
         if !f-idx.process-later() {
            return;
         }
         f-at! = f.at;
         j! = 0;
         k! = 0;
         loop ; f.this-idx; j++; k++ {
            ca! = e.carg-v[k];
            if !farg-process(ca.expr, ca.reff, ca.value, f.farg-v[j].decl, f-at, k, f.decl.name) {
               "error:";
               C1.stdout{.ctx-func.file '': .ctx-begin-row '': .ctx-begin-col " - " .ctx-end-row '': .ctx-end-col ": Error in processing method '" func-name "'\n"}
               return;
            }
         }
         if !farg-process(e.thiss, 0, e.this-value, f.farg-v[j++].decl, f-at, -1, f.decl.name) {
            "goto error;";
         }
         loop ; (f.farg-c - 1) - f.this-idx; j++; k++ {
            ca! = e.carg-v[k];
            if !farg-process(ca.expr, ca.reff, ca.value, f.farg-v[j].decl, f-at, k, f.decl.name) {
               "goto error;";
            }
         }
         e.func-idx = f-idx;
         if (f.flags & #var-args) != #0 {
            loop ; e.carg-c - k; k++ {
               ca! = e.carg-v[k];
               var r:i32;
               if ca.reff != 0 {
                  r = 1 + ca.reff;
               } else {
                  r = 1;
               }
               if !ca.expr.value(r, false, ca.value) {
                  "goto error;";
               }
            }
         }
         ok = true;
         return;
      }
      C1.stdbuf{.ctx-func.file '': .ctx-begin-row '': .ctx-begin-col " - " .ctx-end-row '': .ctx-end-col ": Cannot find method " func-name " from type "}
      if at.type == #basic {
         C1.stdbuf{at.name.basic.cp1-name()}
      } else {
         C1.stdbuf{at.name.id}
      }
      C1.stdout{" with " carg-c " argument/s\n"}
      if found != -1 {
         C1.stdout{"But found " similar-c " functions with different no. of argument/s:\n"}
         loop i = 0; at.func-c; i++ {
            f-idx! = at.func-v[i];
            f! = .func-v[f-idx];
            if f.decl.name == func-name {
               C1.stdout{"- :" func-name " with " f.farg-c " args\n"}
            }
         }
      }
   }
   write-func(expr:Expr) @case.write() @inline {
      var e:ExprFunc = expr;
      f! = e.func-idx.ptr();
      f.write();
      output{''(}
      loop i = 0; e.carg-c; i++ {
         if i != 0 {
            output{", "}
         }
         e.carg-v[i].expr.write-value(e.carg-v[i].value);
      }
      output{'')}
   }
   write-metafunc(expr:Expr) @case.write() @inline {
      i! = 0;
      var e:ExprMetaFunc = expr;
      e.expr-v[i].write();
      var e-func:ExprFunc = e.expr-v[i].ptr();
      f! = e-func.func-idx.ptr();
      i++;
      arg-c! = ((e.expr-c - 1) >> 1) - 1;
      loop ; arg-c + 1; i++ {
         output{";\n"}
         e.expr-v[i].write();
      }
      if f.meta-method-prefix2 != #nil {
         // C1.stdout{f.decl.name ", e.expr-c = " e.expr-c ''\n}
         loop ; arg-c + 1; i++ {
            output{";\n"}
            e.expr-v[i].write();
         }
      }
   }
   // var id-end:Id;
   // var id-str:Id;
   // var id-cstr:Id;
   wr-func(expr:Expr, w:Wtr, header:bool) @case.wr() @inline {
      var e:ExprFunc = expr;
      e.at.wr(w, header);
      e.func-name.wr(w, header);
      w.n1(e.group-c);
      loop i = 0; e.group-c; i++ {
         w.n1(e.group-v[i]);
      }
      w.n1(e.carg-c);
      loop i = 0; e.carg-c; i++ {
         e.carg-v[i].expr.wr(w, header);
      }
   }
   rd-func(e-idx:ExprI, r:Rdr) @case.rd() @inline {
      At.rd(at-idx!, r);
      Id.rd(func-name!, r);
      group-c! = r.n1();
      var group-v:u8[#expr-carg-group-limit];
      loop i = 0; group-c; i++ {
         group-v[i] = r.n1();
      }
      carg-c! = r.n1();
      var carg-v:ExprI[256];
      loop i = 0; carg-c; i++ {
         carg-v[i].rd(r);
      }
      set-func(e-idx, at-idx, func-name, group-c, group-v, carg-c, carg-v);
   }
   set-func(e-idx:ExprI, at-idx:At, func-name:Id, group-c:u8, group-v:u8[], carg-c:u8, carg-v:ExprI[]) {
      var e:ExprFunc;
      quick-alloc-plus(e, Carg[usz] * carg-c);
      e-idx.set(e.base, #func);
      e.at = at-idx;
      e.func-name = func-name;
      e.group-c = group-c;
      loop i = 0; group-c; i++ {
         e.group-v[i] = group-v[i];
      }
      e.carg-c = carg-c;
      loop i = 0; carg-c; i++ {
         e.carg-v[i].expr = carg-v[i];
      }
   }
   process-func(expr:Expr, ok:bool&) @case.process() @inline {
      var e:ExprFunc = expr;
      func-name! = e.func-name;
      carg-c! = e.carg-c;
      group-c! = e.group-c;
      group-v! = e.group-v;
      at-idx! = e.at;
      try-parent! = false;
      if at-idx == #nil {
         at-idx = .ctx-func.at;
         try-parent = true;
      } else {
         at-idx = at-validate(at-idx, .ctx-func.at, .ctx-func.file, .ctx-begin-row, .ctx-begin-col);
         e.at = at-idx;
      }
      loop {
         at! = at-idx.ptr();
         // if (&&, at.decl.struct == #nil, at.type != #basic, at.type != #module) {
         //    C1.stdout{.ctx-func.file '': .ctx-begin-row '': .ctx-begin-col " - " .ctx-end-row '': .ctx-end-col ": Cannot call function " func-name " because the type :" at.name.id " is not defined\n"}
         //    return;
         // }
         // found! = -1;
         // similar-c! = 0;
         // C1.stdout{"searching from " at.func-c " functions\n"}
         loop i = 0; at.func-c; i++ {
            f-idx! = at.func-v[i];
            f! = f-idx.ptr();
            if f.decl.name != func-name { continue }
            // found = i;
            // similar-c++;
            if f.group-c != group-c { continue }
            match! = true;
            if (f.flags & #var-args) != #0 {
               if f.farg-c > carg-c { continue }
               loop j = 0; group-c - 1; j++ {
                  if f.group-v[j] != group-v[j] {
                     match = false;
                     break;
                  }
               }
               if match {
                  j! = group-c - 1;
                  if f.group-v[j] > group-v[j] {
                     match = false;
                  }
               }
            } else {
               if f.farg-c != carg-c { continue }
               loop j = 0; group-c; j++ {
                  if f.group-v[j] != group-v[j] {
                     match = false;
                     break;
                  }
               }
            }
            if !match { continue }
            if !f-idx.process-later() {
               return;
            }
            f-at! = f.at;
            j! = 0;
            loop ; f.farg-c; j++ {
               ca! = e.carg-v[j];
               if !farg-process(ca.expr, ca.reff, ca.value, f.farg-v[j].decl, f-at, j, f.decl.name) { return }
            }
            e.func-idx = f-idx;
            if (f.flags & #var-args) != #0 {
               loop ; e.carg-c - j; j++ {
                  ca! = e.carg-v[j];
                  var r:i32;
                  if ca.reff != 0 {
                     r = 1 + ca.reff;
                  } else {
                     r = 1;
                  }
                  if !ca.expr.value(r, false, ca.value) { return }
               }
            }
            e.func-idx = f-idx;
            ok = true;
            return;
         }
         if !try-parent { break }
         if at-idx == #root { break }
         at-idx = at.parent;
      }
      C1.stdout{.ctx-func.file '': .ctx-begin-row '': .ctx-begin-col " - " .ctx-end-row '': .ctx-end-col ": Cannot find function " func-name " with " carg-c " argument/s\n"}
      // if found != -1 {
      //    C1.stdout{"But found " similar-c " functions with different no. of argument/s:\n"}
      //    loop i = 0; at.func-c; i++ {
      //       f-idx! = at.func-v[i];
      //       f! = .func-v[f-idx];
      //       if f.decl.name == func-name {
      //          C1.stdout{"- :" func-name " with " f.farg-c " args\n"}
      //       }
      //    }
      // }
   }
   process-case-func(expr:Expr, f-idx:Func):bool @inline {
      var e:ExprFunc = expr;
      func-name! = e.func-name;
      carg-c! = e.carg-c;
      group-c! = e.group-c;
      group-v! = e.group-v;
      at! = .ctx-func.at.ptr();
      if !f-idx.process-later() {
         return false;
      }
      f! = f-idx.ptr();
      f-at! = f.at;
      j! = 0;
      loop ; f.farg-c; j++ {
         ca! = e.carg-v[j];
         if !farg-process(ca.expr, ca.reff, ca.value, f.farg-v[j].decl, f-at, j, f.decl.name) { return false }
      }
      e.func-idx = f-idx;
      if (f.flags & #var-args) != #0 {
         loop ; e.carg-c - j; j++ {
            ca! = e.carg-v[j];
            var r:i32;
            if ca.reff != 0 {
               r = 1 + ca.reff;
            } else {
               r = 1;
            }
            if !ca.expr.value(r, false, ca.value) { return false }
         }
      }
      e.func-idx = f-idx;
      return true;
   }
}
 

}
