using Cp1 {
export() {
   quick-alloc-undo(0);
   decl-import(#nil, 0, 0, false);
   decl-template-inst(#nil, 0, 0);
   decl-template-code(#nil, 0, false, false);
   decl-func-begin(#0, 0, 0);
   decl-func-end(0, 0);
   decl-struct-end(0, 0);
   decl-var-begin(#0, 0, 0);
   decl-var-attr-real-name(#nil);
   decl-var-attr-extern();
   decl-var-attr-no-decl();
   decl-var-end();
   decl-var-as-farg(0, 0);
   farg-next-group();
   decl-var-as-this();
   decl-var-as-fvar();
   func-body-end();
   func-header-end();
   expr-push-call(0, 0);
   expr-pop-func(#nil, #nil);
   expr-pop-metafunc(#nil, #nil);
   expr-pop-metamethod(#nil, #nil);
   expr-pop-method(#nil, #nil);
   metacarg-push(#nil);
   metacarg-next-group();
   carg-push(#nil);
   carg-push-str(#nil);
   carg-next-group();
   expr2stmt(#nil, 0, 0, 0, 0);
   stmt-return(#nil, 0, 0, 0, 0);
   stmt-continue(#nil, 0, 0, 0, 0);
   stmt-break(#nil, 0, 0, 0, 0);
   func-attr-main();
   func-attr-decl();
   func-attr-cp1-name();
   func-attr-process();
   func-attr-inline();
   func-attr-var-args();
   func-attr-no-decl();
   func-attr-no-body();
   func-attr-real-name(#nil);
   func-attr-meta-method(#nil, #nil, #nil);
   func-attr-case(#nil);
   enum-attr-soa-field(#nil, #nil);
   enum-attr-no-decl();
   enum-attr-real-name(#nil);
   expr-lvar(#0, 0, 0, 0);
   expr-gvar(#nil, #0, 0, 0);
   expr-fvar(#nil, #nil, 0, 0);
   expr-soa-field(#nil, #nil, #nil, 0, 0);
   expr-assign(#0, #0, #eq);
   expr-math(#0, #0, #add);
   expr-math-add(#0, #0);
   expr-bools(#0, #0, #and);
   expr-bools-add(#0, #0);
   token-name(#nil);
   decl-var-type(#nil);
   decl-var-this();
   // stmt-lvar-begin(0, 0);
   stmt-lvar-add(#0, #nil, 0, 0);
   stmt-lvar-end(0, 0);
   decl-include-begin(#0, 0, 0);
   decl-include-end();
   decl-at-basic(#root);
   decl-at-add(#0, #module, 0, 0);
   decl-at-begin(0, 0);
   decl-at-begin-struct(#nil, 0, 0);
   decl-at-end();
   decl-alias(#nil, #nil, 0, 0);
   at-push(#0, #module, 0, 0);
   at-done();
   at-begin();
   at-begin-relative();
   at-begin-relative-pause();
   at-begin-relative-resume();
   at-root();
   at-alias(#nil, 0, 0);
   at-graves(0, 0, 0);
   // at-create();
   at-basic-type(#i32);
   decl-var-as-gvar();
   type-info-arr(null, 0);
   type-info-ref(0);
   type-info-static();
   type-info-begin(false);
   type-info-finalize();
   expr-int(0, #i32);
   expr-int64(0, #u64);
   expr-f32(0.0f);
   expr-size-of-type(#nil);
   expr-null();
   decl-at-begin-enum(#nil, 0, 0);
   // decl-enum-begin(#nil, 0, 0);
   decl-enum-end(#nil, 0, 0);
   expr-cvar(#nil, #nil);
   enum-add-cvar(#nil, 0, 0);
   decl-add-cvar(#nil, 0, 0);
   enum-set-cvar-expr(#nil);
   struct-attr-real-name(#nil);
   struct-attr-aligned(0);
   struct-attr-union();
   struct-attr-no-decl();
   expr-str(#nil);
   expr-unary(#nil, #neg);
   expr-ref(#nil);
   expr-cast-fast(#nil, #nil);
   expr-index(#nil, null, 0);
   enum-base-begin();
   stmt-switch-begin();
   stmt-switch-set(#nil, 0, 0, 0, 0, #nil);
   stmt-switch-expr-add(#nil);
   stmt-switch-case-begin(0, 0, 0, 0, false);
   stmt-switch-case-end();
   stmt-switch-default-begin(0, 0, 0, 0, false);
   stmt-switch-default-end();
   stmt-switch-end();
   stmt-if-begin();
   stmt-if-set(#nil, 0, 0, 0, 0);
   stmt-if-end();
   stmt-loop-begin();
   stmt-loop-set(#nil, 0, 0, 0, 0, null);
   stmt-loop-end();
   stmt-elif-begin();
   stmt-elif-set(#nil, 0, 0, 0, 0);
   stmt-elif-end();
   stmt-else-set();
   stmt-else-end();
   stmt-if-end-ifs();
   stmt-space-begin();
   stmt-space-begin-detach();
   stmt-space-end();
   expr-compare(#nil, #nil, #eq);
   expr-bool(false);
   expr-char(0);
   cvar-attr-real-name(#nil);
   cvar-attr-no-decl();
}
 

}
