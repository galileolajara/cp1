using Cp1 = Cp1;
using C = LibC;
using C1 = LibCp1;
using Cp1 {
enum Fvar[#nil = -1, #0]:i32;
expr-fvar(expr:ExprI, member:Id):ExprI {
   quick-alloc-one(+(e:ExprFvar));
   +e-idx = expr-push(e.base, #fvar);
   e.expr = expr;
   e.member = member;
   return e-idx;
}
using ExprI {
   wr-fvar(expr:Expr, w:Wtr, header:bool) @case.wr() @inline {
      var e:ExprFvar = expr;
      e.expr.wr(w, header);
      e.member.wr(w, header);
   }
   rd-fvar(e-idx:ExprI, r:Rdr) @case.rd() @inline {
      ExprI.rd(+expr, r);
      Id.rd(+member, r);
      e-idx.set-fvar(expr, member);
   }
   set-fvar(e-idx:this, expr:ExprI, member:Id) {
      quick-alloc-one(+(e:ExprFvar));
      e-idx.set(e.base, #fvar);
      e.expr = expr;
      e.member = member;
   }
   type-fvar(expr:Expr, at:At&) @case.type() @inline {
      var e:ExprFvar = expr;
      at = e.val.type.ptr().decl.structt.ptr().fvar-v[e.fvar].decl.type;
   }
   value-fvar(expr:this, reff:i8, paren:bool, v:Value, ok:bool&) @case.value() @inline {
      var e:ExprFvar = expr.ptr();
      +fvar = e.val.type.ptr().decl.structt.ptr().fvar-v[e.fvar];
      v.set(reff, paren, fvar.decl.type, fvar.decl.type-info);
      if v.reff == 1 {
         v.paren = false;
      }
      ok = true;
   }
   write-fvar(expr:Expr) @case.write() @inline {
      var e:ExprFvar = expr;
      e.expr.write-value(e.val);
      output<''.>;
      e.val.type.ptr().decl.structt.ptr().fvar-v[e.fvar].decl.write(#fvar);
   }
   process-fvar(expr:Expr, ok:bool&) @case.process() @inline {
      var e:ExprFvar = expr;
      +type-i = e.expr.type();
      if type-i == #nil {
         C1.stdout<.ctx-func.file '': .ctx-begin-row '': .ctx-begin-col " - " .ctx-end-row '': .ctx-end-col " Cannot get member '." e.member "' from an expression of unknown type\n">;
         return;
      }
      +type = type-i.ptr();
      if type.def != #struct {
         C1.stdout<.ctx-func.file '': .ctx-begin-row '': .ctx-begin-col " - " .ctx-end-row '': .ctx-end-col " Cannot get member '." e.member "' because the type is not a struct or union\n">;
         return;
      }
      if !e.expr.value(1 - type-i.pointer(), true, e.val) { return }
      if e.val.info.array-c > 0 {
         C1.stdout<.ctx-func.file '': .ctx-begin-row '': .ctx-begin-col " - " .ctx-end-row '': .ctx-end-col " Cannot get member '." e.member "' because the expression is an array(" e.val.info.array-c ")\n">;
         return;
      }
      if type.decl.structt == #nil {
         C1.stdout<.ctx-func.file '': .ctx-begin-row '': .ctx-begin-col " - " .ctx-end-row '': .ctx-end-col " Cannot get member '." e.member "' because the type '/" type.name.id "' was not defined\n">;
         return;
      }
      +struct-i = type.decl.structt;
      struct-i.output();
      +structt = struct-i.ptr();
      +member = e.member;
      loop i = 0:Fvar; structt.fvar-c; i++ {
         if structt.fvar-v[i].decl.name == member {
            e.fvar = i;
            ok = true;
            return;
         }
      }
      C1.stdout<.ctx-func.file '': .ctx-begin-row '': .ctx-begin-col " - " .ctx-end-row '': .ctx-end-col " Cannot find member named '." e.member "' from type '/" type.name.id "'\n">;
   }
}
 

}
