using Cp1 = Cp1;
using C = LibC;
using (Cp1) {
Lvar[#nil = -1, #0]:i32 {
   rd(l:this&, r:Rdr) @inline {
      l = (r.n() - 1):Lvar;
   }
   wr(l:this, w:Wtr) @inline {
      w.n(l + 1);
   }
   process(l:this):bool @inline {
      +lvar = l.ptr();
      if ((lvar.flags & #processed) != #0) { return true }
      lvar.flags |= #processed;
      +at-i = lvar.decl.type;
      if (at-i == #nil) {
         if ((lvar.flags & #set-expr) != #0) {
            if !(lvar.set-expr.value(1, false, ++v)) { return false }
            lvar.decl.type = v.type;
            lvar.decl.type-info.init();
            lvar.decl.type-info.copy-from(v.info);
         } else {
            C.out.printf("%s:%u:%u: local variable '%s' doesn:T have a type or a value\n", .ctx-func.file.path(), lvar.row, lvar.col, lvar.decl.name.str());
            return false;
         }
         return true;
      }
      return lvar.decl.process(.ctx-func.file, lvar.row, lvar.col, .ctx-func.at);
   }
}
LvarFlags[
   #0,
   #set-expr = 1,
   #processed = 2,
]:u8 {
   rd(f:this&, r:Rdr) @inline {
      f = r.n1():LvarFlags;
   }
   wr(f:this, w:Wtr) @inline {
      w.n1(f);
   }
}
LvarData(
   row:i32,
   col:i32,
   decl:DeclVarData+,
   flags:LvarFlags,
   set-expr:ExprI,
);
expr-lvar(name:Id, decl:u8, row:i32, col:i32):ExprI {
   if (decl == 0) {
      +space = .decl-func-ctx-space;
      loop {
         +v = space.lvar-v;
         +found = Lvar#nil;
         loop i = 0; space.lvar-c; i++ {
            +lvar = v[i];
            if (lvar.name() == name) {
               found = lvar;
               break;
            }
         }
         if (found != #nil) {
            quick-alloc-one(+(e:ExprLvar));
            +e-idx = expr-push(e.base, #lvar);
            e.lvar = found;
            return e-idx;
         }
         space = space.parent;
         if (space == null) { break }
      }
      C.out.printf("%s:%u:%u: local variable '%s' was not found\n", .input-path, row, col, name.str());
      C.exit(#failure);
      return #nil;
   } else {
      +space = .decl-func-ctx-space;
      loop (decl > 1) {
         space = space.parent;
         if (space == null) {
            C.out.printf("%s:%u:%u: Cannot declare local variable '%s' with too much '+'\n", .input-path, row, col, name.str());
            C.exit(#failure);
         }
         if ((space.flags & #skip-lvar-decl) == #0) {
            decl--;
         }
      }
      quick-alloc-one(+(e:ExprLvar));
      +e-idx = expr-push(e.base, #lvar);
      e.lvar = space.lvar-new(name, row, col);
      +lvar = e.lvar.ptr();
      .decl-var.name = name;
      lvar.decl.copy-from(.decl-var);
      return e-idx;
   }
}
using (ExprI) {
   write-lvar(expr:Expr) @case.write() @inline {
      var e:ExprLvar = expr;
      e.lvar.ptr().decl.write-lvar(e.lvar);
   }
   type-lvar(expr:Expr, at:At&) @case.type() @inline {
      var e:ExprLvar = expr;
      +lvar = e.lvar.ptr();
      at = lvar.decl.type;
   }
   value-lvar(e:this, reff:i8, paren:bool, v:Value, ok:bool&) @case.value() @inline {
      var expr:ExprLvar = e.ptr();
      +lvar = expr.lvar.ptr();
      v.set(reff, paren, lvar.decl.type, lvar.decl.type-info);
      if (v.reff == 1) {
         v.paren = false;
      }
      ok = true;
   }
   wr-lvar(expr:Expr, w:Wtr, header:bool) @case.wr() @inline {
      var e:ExprLvar = expr;
      e.lvar.wr(w);
   }
   rd-lvar(e-idx:ExprI, r:Rdr) @case.rd() @inline {
      quick-alloc-one(+(e:ExprLvar));
      e-idx.set(e.base, #lvar);
      e.lvar.rd(r);
   }
   process-lvar(expr:Expr, ok:bool&) @case.process() @inline {
      var e:ExprLvar = expr;
      if !(e.lvar.process()) { return }
      ok = true;
   }
}
 

}
