using Cp1 = Cp1;
using Cp1 {
stmt-return(e:ExprI, begin-row:u32, begin-col:u32, end-row:u32, end-col:u32) {
   quick-alloc-one(+(s:StmtReturn));
   stmt-push(s.base, begin-row, begin-col, end-row, end-col, #return);
   s.expr = e;
}
using StmtSpace {
   wr-return(stmt:Stmt, w:Wtr, header:bool) @case.wr() @inline {
      var s:StmtReturn = stmt;
      s.expr.wr(w, header);
   }
   rd-return(space:StmtSpace, r:Rdr) @case.rd() @inline {
      quick-alloc-one(+(s:StmtReturn));
      s.expr.rd(r);
      space.stmt-push(s.base, .ctx-begin-row, .ctx-begin-col, .ctx-end-row, .ctx-end-col, #return);
   }
}
using Stmt {
   write-return(stmt:Stmt) @case.write() @inline {
      var s:StmtReturn = stmt;
      if s.expr == #nil {
         output{"return;\n"}
      } else {
         output{"return "}
         s.expr.write-value(s.val);
         output{";\n"}
      }
   }
   process-return(stmt:Stmt, ok:bool&) @case.process() @inline {
      var s:StmtReturn = stmt;
      if s.expr != #nil {
         s.expr.try-deduce(.ctx-func.decl.type);
         if !s.expr.value(1 + .ctx-func.decl.type-info.ref-v[.ctx-func.decl.type-info.array-c], false, s.val) {
            return;
         }
      }
      ok = true;
   }
}
 

}
