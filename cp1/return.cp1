using 'cp1 = :cp1;
{at(:cp1)
stmt-return(e:expr-i, begin-row:i32, begin-col:i32, end-row:i32, end-col:i32) {
   quick-alloc-one(+(s:stmt-return));
   stmt-push(s.base, begin-row, begin-col, end-row, end-col, #return);
   s.expr = e;
}
{at(:stmt-space)
   wr-return(stmt:stmt, w:wtr, header:bool) @case.wr() @inline {
      {+s:stmt-return = stmt}
      s.expr.wr(w, header);
   }
   rd-return(space:stmt-space, r:rdr) @case.rd() @inline {
      quick-alloc-one(+(s:stmt-return));
      s.expr.rd(r);
      space.stmt-push(s.base, .ctx-begin-row, .ctx-begin-col, .ctx-end-row, .ctx-end-col, #return);
   }
}
{at(:stmt)
   write-return(stmt:stmt) @case.write() @inline {
      {+s:stmt-return = stmt}
      {if(s.expr == #nil)
         .out.printf("return;\n");
      }{else
         .out.printf("return ");
         s.expr.write-value(s.val);
         .out.printf(";\n");
      }
   }
   process-return(stmt:stmt, ok:bool&) @case.process() @inline {
      {+s:stmt-return = stmt}
      {if(s.expr != #nil)
         s.expr.try-deduce(.ctx-func.decl.type);
         {if!(s.expr.value(1 + .ctx-func.decl.type-info.ref-v[.ctx-func.decl.type-info.array-c], false, s.val))
            return;
         }
      }
      ok = true;
   }
}
 

}
