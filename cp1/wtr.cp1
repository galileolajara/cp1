using Cp1 = Cp1;
using C = StdC;
using (Cp1) {
Wtr(
   reff:ref,
   pos:usz,
   p1:u8[],
   p4:u32[],
   ) @union {
   n1(w:this, n:u8) @inline {
      w.p1[0] = n;
      w.pos++;
   }
   n2(w:this, n:u32) @inline {
      w.p1[0] = n;
      w.p1[1] = n >> 8;
      w.pos += 2;
   }
   n4(w:this, n:u32) @inline {
      w.p1[0] = n;
      w.p1[1] = n >> 8;
      w.p1[2] = n >> 16;
      w.p1[3] = n >> 24;
      w.pos += 4;
   }
   include("num.c") {
      n(w:this, n:u32) @real-name(Fputnum) @no-decl;
   }
   copy(w:this, data:ref, size:i32) @inline {
      C.memcpy(w.reff, data, size);
      w.pos += size;
   }
   b(w:this, val:bool) @inline {
      if (val) { w.n1(1)}
       else { w.n1(0)}
   }
}
 

}
