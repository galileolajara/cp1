using 'cp1 = :cp1;
using (:cp1) {
using (:stmt-space) {
   wr-while(stmt:stmt, w:wtr, header:bool) @case.wr() @inline {
      var s:stmt-while = stmt;
      s.expr.wr(w, header);
      if (s.continu != null) {
         w.b(true);
         s.continu.wr(w, header);
      } else {
         w.b(false);
      }
   }
   rd-while(space:stmt-space, r:rdr) @case.rd() @inline {
      quick-alloc-one(+(s:stmt-while));
      s.expr.rd(r);
      space.stmt-push(s.base, .ctx-begin-row, .ctx-begin-col, .ctx-end-row, .ctx-end-col, #while);
      if (r.b()) {
         quick-alloc-one(+(space2:stmt-space));
         s.continu = space2;
         space2.rd(r, space);
      }
      .nest-stack-id-v[.nest-stack-c] = .nest-id++;
      .nest-stack-ptr-v[.nest-stack-c].whil = s;
      .nest-stack-c++;
   }
   wr-while-end(stmt:stmt, w:wtr, header:bool) @case.wr() @inline {
   }
   rd-while-end(space:stmt-space, r:rdr) @case.rd() @inline {
      +whil = .nest-stack-ptr-v[.nest-stack-c -= 1].whil;
      quick-alloc-one(+(s:stmt-while-end));
      s.whil = whil;
      whil.end = s;
      space.stmt-push(s.base, 0, 0, 0, 0, #while-end);
   }
}
using (:stmt) {
   write-while(stmt:stmt) @case.write() @inline {
      var s:stmt-while = stmt;
      .nest-stack-id-v[.nest-stack-c] = .nest-id++;
      .nest-stack-ptr-v[.nest-stack-c].whil = s;
      .nest-stack-c++;
      .out.printf("while(");
      s.expr.write();
      .out.printf(") {\n");
   }
   process-while(stmt:stmt, ok:bool&) @case.process() @inline {
      var s:stmt-while = stmt;
      if (s.expr != #nil) {
         if !(s.expr.process()) {
            return;
         }
      }
      ok = true;
   }
   write-while-end(stmt:stmt) @case.write() @inline {
      +id = .nest-stack-id-v[.nest-stack-c -= 1];
      var s:stmt-while-end = stmt;
      .out.printf("continue_%u:;\n", id);
      +continu = s.whil.continu;
      if (continu != null) {
         continu.write();
      }
      .out.printf("}\nbreak_%u:;\n", id);
   }
   process-while-end(stmt:stmt, ok:bool&) @case.process() @inline {
      var s:stmt-while-end = stmt;
      +continu = s.whil.continu;
      if (continu != null) {
         continu.process();
      }
      ok = true;
   }
}
stmt-while-begin() {
   stmt-space-begin();
   .decl-func-ctx-space.flags |= #skip-lvar-decl;
}
:stmt-while(
   base:stmt+,
   expr:expr-i,
   continu:stmt-space,
   end:stmt-while-end,
);
:stmt-while-end(
   base:stmt+,
   whil:stmt-while,
);
stmt-while-set(expr:expr-i, begin-row:i32, begin-col:i32, end-row:i32, end-col:i32, continu:stmt-space) {
   quick-alloc-one(+(s:stmt-while));
   .nest-stack-id-v[.nest-stack-c] = .nest-id++;
   .nest-stack-ptr-v[.nest-stack-c].whil = s;
   .nest-stack-c++;
   s.expr = expr;
   s.continu = continu;
   stmt-push(s.base, begin-row, begin-col, end-row, end-col, #while);
   stmt-space-begin();
}
stmt-while-end() {
   .nest-stack-c -= 1;
   stmt-space-end();
   quick-alloc-one(+(s:stmt-while-end));
   stmt-push(s.base, 0, 0, 0, 0, #while-end);
   stmt-space-end();
}
 

}
