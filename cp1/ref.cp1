using Cp1 = Cp1;
using Cp1 {
expr-ref(expr:ExprI):ExprI {
   quick-alloc-one(+(e:ExprRef));
   +e-idx = expr-push(e.base, #ref);
   e.expr = expr;
   return e-idx;
}
using ExprI {
   wr-ref(expr:Expr, w:Wtr, header:bool) @case.wr() @inline {
      var e:ExprRef = expr;
      e.expr.wr(w, header);
   }
   rd-ref(e-idx:ExprI, r:Rdr) @case.rd() @inline {
      quick-alloc-one(+(e:ExprRef));
      e-idx.set(e.base, #ref);
      e.expr.rd(r);
   }
   write-ref(expr:Expr) @case.write() @inline {
      var e:ExprRef = expr;
      e.expr.write-value(e.val);
   }
   value-ref(e:this, reff:i8, paren:bool, v:Value, ok:bool&) @case.value() @inline {
      var expr:ExprRef = e.ptr();
      v.type = basic-type(#ref);
      v.info.init();
      v.info.array-c = 0;
      v.info.ref-v[0] = 1;
      v.info.star-c = 1;
      v.reff = 1;
      ok = true;
   }
   type-ref(expr:Expr, at:At&) @case.type() @inline {
      at = basic-type(#ref);
   }
   process-ref(expr:Expr, ok:bool&) @case.process() @inline {
      var e:ExprRef = expr;
      if !e.expr.value(2, false, e.val) {
         return;
      }
      ok = true;
   }
}
 

}
