using Cp1 = Cp1;
using C = LibC;
using C1 = LibCp1;
using Cp1 {
union Nest[do:StmtLoop, reff:ref];
var nest-stack-ptr-v:Nest.[64];
var nest-stack-id-v:i32[64];
var nest-stack-c:u8;
var nest-id:i32;
using StmtSpace {
   wr-loop(stmt:Stmt, w:Wtr, header:bool) @case.wr() @inline {
      var s:StmtLoop = stmt;
      s.expr.wr(w, header);
      if s.continu != null {
         w.b(true);
         s.continu.wr(w, header);
      } else {
         w.b(false);
      }
   }
   rd-loop(space:StmtSpace, r:Rdr) @case.rd() @inline {
      quick-alloc-one(+(s:StmtLoop));
      s.expr.rd(r);
      space.stmt-push(s.base, .ctx-begin-row, .ctx-begin-col, .ctx-end-row, .ctx-end-col, #loop);
      if r.b() {
         quick-alloc-one(+(space2:StmtSpace));
         s.continu = space2;
         space2.rd(r, space);
      }
      .nest-stack-id-v[.nest-stack-c] = .nest-id++;
      .nest-stack-ptr-v[.nest-stack-c].do = s;
      .nest-stack-c++;
   }
   wr-loop-end(stmt:Stmt, w:Wtr, header:bool) @case.wr() @inline {
   }
   rd-loop-end(space:StmtSpace, r:Rdr) @case.rd() @inline {
      +do = .nest-stack-ptr-v[.nest-stack-c -= 1].do;
      quick-alloc-one(+(s:StmtLoopEnd));
      s.do = do;
      do.end = s;
      space.stmt-push(s.base, 0, 0, 0, 0, #loop-end);
   }
}
using Stmt {
   write-loop(stmt:Stmt) @case.write() @inline {
      var s:StmtLoop = stmt;
      .nest-stack-id-v[.nest-stack-c] = .nest-id++;
      .nest-stack-ptr-v[.nest-stack-c].do = s;
      .nest-stack-c++;
      if s.expr == #nil {
         output{"while(1) {\n"}
      } else {
         if (&&, s.val.type == basic-type(#bool), s.val.info.star-c == 0) {
            output{"while("}
            s.expr.write-value(s.val);
            output{") {\n"}
         } else {
            output{"for(int i = "}
            s.expr.write-value(s.val);
            output{"; i > 0; ) {\ni --;\n"}
         }
      }
   }
   process-loop(stmt:Stmt, ok:bool&) @case.process() @inline {
      var s:StmtLoop = stmt;
      if s.expr != #nil {
         if !s.expr.value(1, false, s.val) {
            return;
         }
      }
      ok = true;
   }
   write-loop-end(stmt:Stmt) @case.write() @inline {
      +id = .nest-stack-id-v[.nest-stack-c -= 1];
      var s:StmtLoopEnd = stmt;
      output{"continue_" id ":;\n"}
      +continu = s.do.continu;
      if continu != null {
         continu.write();
      }
      output{"}\nbreak_" id ":;\n"}
   }
   process-loop-end(stmt:Stmt, ok:bool&) @case.process() @inline {
      var s:StmtLoopEnd = stmt;
      +continu = s.do.continu;
      if continu != null {
         continu.process();
      }
      ok = true;
   }
}
stmt-loop-begin() {
   stmt-space-begin();
   .decl-func-ctx-space.flags |= #skip-lvar-decl;
}
struct StmtLoop[
   base:Stmt.,
   expr:ExprI,
   val:Value.,
   continu:StmtSpace,
   end:StmtLoopEnd,
];
struct StmtLoopEnd[
   base:Stmt.,
   do:StmtLoop,
];
stmt-loop-set(expr:ExprI, begin-row:u32, begin-col:u32, end-row:u32, end-col:u32, continu:StmtSpace) {
   quick-alloc-one(+(s:StmtLoop));
   .nest-stack-id-v[.nest-stack-c] = .nest-id++;
   .nest-stack-ptr-v[.nest-stack-c].do = s;
   .nest-stack-c++;
   s.expr = expr;
   s.continu = continu;
   stmt-push(s.base, begin-row, begin-col, end-row, end-col, #loop);
   stmt-space-begin();
}
stmt-loop-end() {
   .nest-stack-c -= 1;
   stmt-space-end();
   quick-alloc-one(+(s:StmtLoopEnd));
   stmt-push(s.base, 0, 0, 0, 0, #loop-end);
   stmt-space-end();
}
 

}
