using Cp1 = Cp1;
using C = StdC;
using (Cp1) {
DeclVar[]:u32 {
   ptr(v:this):DeclVarData @inline {
      return .var-v[v];
   }
}
DeclVarType[#gvar, #fvar]:u8;
#decl-var-size-limit:i32 = 8;
at-validate(vd-type:At, at-i:At, file:File, row:u32, col:u32):At {
   +type = vd-type.ptr();
   +parent = type.parent.ptr();
   if (&&, parent.type == #basic, parent.name.basic == #relative) {
      +name = type.name;
      // C.out.printf("type is %s\n", at-i.ptr().type.cgl-name());
      // if (at-i.ptr().type == #module) {
      //    C.out.printf("name is %s\n", at-i.ptr().name.id.str());
      //    C.out.printf("parent type is %s\n", at-i.ptr().parent.ptr().type.cgl-name());
      //    if (at-i.ptr().parent.ptr().type == #basic) {
      //       C.out.printf("parent basic type is %s\n", at-i.ptr().parent.ptr().name.basic.cgl-name());
      //    }
      // }
      // C.out.printf("relative type detected, finding :%s\n", name.id.str());
      loop {
         loop i = 0:At; .at-c; i++ {
            if (&&, .at-v[i].parent == at-i, .at-v[i].type != #basic) {
               // C.out.printf("%u) :%s, %d\n", i, .at-v[i].name.id.str(), .at-v[i].decl.struct);
               if (.at-v[i].name.id == name.id) {
                  // C.out.printf("found\n");
                  return i;
               }
            }
         }
         if (at-i == #root) { break }
         at-i = at-i.ptr().parent;
      }
      C.out.printf("%s:%u:%u: Type :%s was not found\n", file.path(), row, col, name.id.str());
      C.exit(#failure);
   }
   return vd-type;
}
using (DeclVarData) {
   validate(vd:this, base-at:At) {
      // C.out.printf("validating the type of %s\n", vd.name.str());
      vd.type = at-validate(vd.type, base-at);
   }
   process(vd:this, file:File, row:i32, col:i32, base-at:At):bool {
      +at-i = at-validate(vd.type, base-at, file, row, col);
      vd.type = at-i;
      +at = at-i.ptr();
      if (&&, at.type != #basic, at.decl.struct == #nil) {
         C.out.printf("%s:%u:%u: Error, the type '%s' used in '%s' was not defined\n", .ctx-func.file.path(), row, col, at.name.id.str(), vd.name.str());
         return false;
      }
      at-i.output(.ctx-func.file, row, col);
      if !(at-i.finalize(vd.type-info, row, col)) { return false }
      loop i = 0; vd.size-c; i++ {
         if !(vd.size-expr-v[i].value(1, false, vd.size-value-v[i])) { return false }
      }
      return true;
   }
   write(vd:this, var-type:DeclVarType) {
      if ((vd.flags & #real-name) != #0) {
         if (vd.real-name == #nil) {
            .out.printf("%s", vd.name.c-name());
         } else {
            .out.printf("%s", vd.real-name.str());
         }
         return;
      }
      switch (var-type) {
         case (#gvar) {
            .out.printf("_G%s", vd.name.c-name());
         }
         case (#fvar) {
            .out.printf("_F%s", vd.name.c-name());
         }
      }
   }
   write-lvar(vd:this, lvar:Lvar) {
      .out.printf("_L%s_%u", vd.name.c-name(), lvar);
   }
   write-type(vd:this, var-type:DeclVarType) {
      if (vd.type-info.const) {
         .out.printf("const ");
      }
      vd.type.write-type-info(vd.type-info, 0 - vd.size-c);
      .out.printf(" ");
      vd.write(var-type);
      loop i = 0; vd.size-c; i++ {
         .out.printf("[");
         vd.size-expr-v[i].write-value(vd.size-value-v[i]);
         .out.printf("]");
      }
   }
   write-lvar-type(vd:this, lvar:Lvar) {
      if (vd.type-info.const) {
         .out.printf("const ");
      }
      vd.type.write-type-info(vd.type-info, 0 - vd.size-c);
      .out.printf(" ");
      vd.write-lvar(lvar);
      loop i = 0; vd.size-c; i++ {
         .out.printf("[");
         vd.size-expr-v[i].write-value(vd.size-value-v[i]);
         .out.printf("]");
      }
   }
   wr(vd:this, w:Wtr, header:bool) {
      vd.name.wr(w, header);
      vd.type.wr(w, header);
      vd.flags.wr(w);
      if ((vd.flags & #real-name) != #0) {
         vd.real-name.wr(w, header);
      }
      vd.type-info.wr(w);
      // C.out.printf("%s, vd.size-c %d\n", vd.name.str(), vd.size-c);
      w.n1(vd.size-c);
      loop i = 0; vd.size-c; i++ {
         vd.size-expr-v[i].wr(w, header);
      }
   }
   // validate(vd-type:At, at-i:At, vd-name:Id):At {
   //    +type = vd-type.ptr();
   //    if (type.type == #basic) { return vd-type }
   //    +parent = type.parent.ptr();
   //    if (&&, parent.type == #basic, parent.name.basic == #relative) {
   //       +name = type.name;
   //       C.out.printf("type is %s\n", at-i.ptr().type.cgl-name());
   //       if (at-i.ptr().type == #module) {
   //          C.out.printf("name is %s\n", at-i.ptr().name.id.str());
   //          C.out.printf("parent type is %s\n", at-i.ptr().parent.ptr().type.cgl-name());
   //          if (at-i.ptr().parent.ptr().type == #basic) {
   //             C.out.printf("parent basic type is %s\n", at-i.ptr().parent.ptr().name.basic.cgl-name());
   //          }
   //       }
   //       C.out.printf("relative detected on var %s, finding :%s\n", vd-name.str(), name.id.str());
   //       // +old-out = .out;
   //       // .out = C.out;
   //       // at-i.write-space();
   //       // .out = old-out;
   //       loop {
   //          loop i = 0:At; .at-c; i++ {
   //             if (&&, .at-v[i].parent == at-i, .at-v[i].type != #basic) {
   //                C.out.printf("%u) :%s\n", i, .at-v[i].name.id.str());
   //                if (.at-v[i].name.id == name.id) {
   //                   return i;
   //                }
   //             }
   //          }
   //          if (at-i == #root) { break }
   //          at-i = at-i.ptr().parent;
   //       }
   //       C.out.printf("not found\n");
   //       C.exit(#failure);
   //    }
   //    return vd-type;
   // }
   rd(vd:this, r:Rdr) {
      vd.name.rd(r);
      vd.type.rd(r);
      // At.rd(+vd-type, r);
      // vd.type = validate(vd-type, default-at, vd.name);
      vd.flags.rd(r);
      if ((vd.flags & #real-name) != #0) {
         vd.real-name.rd(r);
      }
      vd.type-info.rd(r);
      vd.size-c = r.n1();
      if (vd.size-c > 0) {
         quick-alloc-arr(vd.size-expr-v, vd.size-c);
         quick-alloc-arr(vd.size-value-v, vd.size-c);
         loop i = 0; vd.size-c; i++ {
            vd.size-expr-v[i].rd(r);
         }
      }
   }
   copy-from(vd:this, src:DeclVarData) {
      vd.name = src.name;
      vd.type = src.type;
      vd.flags = src.flags;
      vd.real-name = src.real-name;
      vd.type-info.copy-from(src.type-info);
      vd.type-info.built-in = src.type-info.built-in;
      vd.size-c = src.size-c;
      if (vd.size-c > 0) {
         quick-alloc-arr(vd.size-expr-v, vd.size-c);
         loop i = 0; vd.size-c; i++ {
            vd.size-expr-v[i] = src.size-expr-v[i];
         }
      }
   }
}
#type-info-star-limit:i32 = 8;
Value(reff:i8, paren:bool, type:At, info:TypeInfo+) {
   set(v:this, reff:i8, paren:bool, type:At, info:TypeInfo) {
      +c = info.ref-v[info.array-c];
      v.type = type;
      v.reff = (c + 2) - reff;
      v.info.init();
      v.info.copy-from(info);
      v.info.ref-v[v.info.array-c] = reff - 1;
      v.info.count();
      v.paren = paren;
   }
   rd(v:this, r:Rdr) {
      v.reff = r.n1();
      v.paren = r.n1() != 0;
      v.type.rd(r);
      v.info.rd(r);
   }
   wr(v:this, w:Wtr, header:bool) {
      w.n1(v.reff);
      w.b(v.paren);
      v.type.wr(w, header);
      v.info.wr(w);
   }
}
TypeInfo(ref-v:i8[#type-info-star-limit], array-c:i8, star-c:i8, built-in:bool, const:bool) {
   init(ti:this) {
      ti.ref-v[0] = 0;
      ti.array-c = 0;
      ti.star-c = 0;
      ti.built-in = false;
      ti.const = false;
   }
   rd(ti:this, r:Rdr) {
      +c = r.n1();
      loop i = 0; c; i++ {
         ti.ref-v[i] = r.n1();
      }
      ti.array-c = r.n1();
      ti.star-c = r.n1();
      ti.built-in = r.n1() != 0;
      ti.const = r.n1() != 0;
   }
   wr(ti:this, w:Wtr) {
      +c = 0;
      loop (#type-info-star-limit) {
         if (ti.ref-v[c] == 0) {
            break;
         }
         c++;
      }
      w.n1(c);
      loop i = 0; c; i++ {
         w.n1(ti.ref-v[i]);
      }
      w.n1(ti.array-c);
      w.n1(ti.star-c);
      w.b(ti.built-in);
      w.b(ti.const);
   }
   copy-from(ti:this, ti2:TypeInfo) {
      C.memcpy(ti.ref-v, ti2.ref-v, #type-info-star-limit);
      ti.array-c = ti2.array-c;
      ti.star-c = ti2.star-c;
      ti.const = ti2.const;
      // intentionally did not copy .built-in
   }
   finalize(ti:this) {
      var ref-v:i8[#type-info-star-limit];
      +c = ti.array-c;
      +star-c = ti.array-c;
      loop i = 0; c + 1; {
         ref-v[i] = ti.ref-v[i];
         star-c += ref-v[i];
         i += 1;
      }
      loop i = 0, j = c; c + 1; {
         ti.ref-v[i] = ref-v[j];
         i += 1;
         j -= 1;
      }
      ti.star-c = star-c;
   }
   count(ti:this) {
      +star-c = ti.array-c;
      loop i = ti.array-c; i + 1; {
         star-c += ti.ref-v[i];
         i -= 1;
      }
      ti.star-c = star-c;
   }
}
var gvar-c:Gvar;
var gvar-cap:Gvar;
var gvar-v:DeclGvar+[];

var decl-var-row:i32;
var decl-var-col:i32;
// var decl-var-name:Id;
// var decl-var-type:At;
// var decl-var-type-info:TypeInfo+;
#type-info-stack-limit:i32 = 8;
// var stack-type-info:TypeInfo+; // [#type-info-stack-limit]}
// var stack-type-info-c:i8;
var decl-var:DeclVarData+;
VarFlags[
   #0,
   #real-name = 1,
   #extern = 2,
   #no-decl = 4,
   ]:u32 {
   rd(f:this&, r:Rdr) @inline {
      f = r.n():VarFlags;
   }
   wr(f:this, w:Wtr) @inline {
      w.n(f);
   }
}
decl-var-begin(name:Id, row:i32, col:i32) {
   .decl-var.name = name;
   .decl-var-row = row;
   .decl-var-col = col;
   .decl-var.type-info.init();
   .decl-var.flags = #0;
   .decl-var.real-name = #nil;
   .decl-var.size-c = 0;
   // C.out.printf("var-begin %s\n", name.str());
}
decl-var-end() {
}
decl-var-attr-real-name(name:Id) {
   if ((.decl-var.flags & #real-name) != #0) {
      C.out.printf("%u:%u: error @real-name specified more than once\n", .last-row, .last-col);
      C.exit(#failure);
   }
   .decl-var.flags |= #real-name;
   .decl-var.real-name = name;
}
decl-var-attr-extern() {
   if ((.decl-var.flags & #extern) != #0) {
      C.out.printf("%u:%u: error @extern specified more than once\n", .last-row, .last-col);
      C.exit(#failure);
   }
   .decl-var.flags |= #extern;
}
decl-var-attr-no-decl() {
   if ((.decl-var.flags & #no-decl) != #0) {
      C.out.printf("%u:%u: error @no-decl specified more than once\n", .last-row, .last-col);
      C.exit(#failure);
   }
   .decl-var.flags |= #no-decl;
}
decl-var-type(type:At) {
   if (type != #nil) {
      +at = type.ptr();
      if (at.type == #module) {
         C.out.printf("%u:%u: module '%%%s' cannot be used as a type\n", .last-row, .last-col, at.name.id.str());
         C.exit(#failure);
      }
   }
   .decl-var.type = type;
   .decl-var.size-c = 0;
   .decl-var.type-info.init();
   .decl-var.flags = #0;
   // .stack-type-info = .decl-var.type-info;
}
decl-var-this() {
   +type = .decl-at;
   +at = type.ptr();
   if (at.type == #module) {
      C.out.printf("%u:%u: module '%%%s' cannot be used as a type\n", .last-row, .last-col, at.name.id.str());
      C.exit(#failure);
   }
   .decl-var.type = type;
   // .stack-type-info = .decl-var.type-info;
}
decl-var-as-gvar() {
   +gvar-idx = .gvar-c++;
   if (.gvar-cap <= .gvar-c) {
      +old-cap = .gvar-cap;
      grow(.gvar-cap, .gvar-c);
      realloc(.gvar-v, .gvar-cap, old-cap);
   }
   +gvar = .gvar-v[gvar-idx];
   gvar.include = .decl-include;
   gvar.at = .decl-at;
   gvar.decl.copy-from(.decl-var);
}
 

}
