using Cp1 = Cp1;
using C = LibC;
using C1 = LibCp1;
using Cp1 {
enum DeclVar[]:u32 {
   ptr(v:this):DeclVarData @inline {
      return .var-v[v];
   }
}
enum DeclVarType[#gvar, #fvar]:u8;
#decl-var-size-limit:i32 = 8;
at-validate(vd-type:At, at-i:At, file:File, row:u32, col:u32):At {
   +type = vd-type.ptr();
   +parent = type.parent.ptr();
   if (&&, parent.type == #basic, parent.name.basic == #relative) {
      +name = type.name;
      loop {
         loop i = 0:At; .at-c; i++ {
            if (&&, .at-v[i].parent == at-i, .at-v[i].type != #basic) {
               if .at-v[i].name.id == name.id {
                  return i;
               }
            }
         }
         if at-i == #root { break }
         at-i = at-i.ptr().parent;
      }
      C1.stdout{file '': row '': col ": Type '" name.id "' was not found\n"}
      return #nil;
   }
   return vd-type;
}
using DeclVarData {
   validate(vd:this, base-at:At):bool {
      vd.type = at-validate(vd.type, base-at);
      if vd.type == #nil { return false }
      return true;
   }
   process(vd:this, file:File, row:u32, col:u32, base-at:At):bool {
      +at-i = at-validate(vd.type, base-at, file, row, col);
      if at-i == #nil { return false }
      vd.type = at-i;
      +at = at-i.ptr();
      if (&&, at.type != #basic, at.decl.structt == #nil) {
         C1.stdout{file '': row '': col ": Error, the type '" at.name.id "' used in '" vd.name "' was not defined\n"}
         return false;
      }
      at-i.output(.ctx-func.file, row, col);
      if !at-i.finalize(vd.type-info, row, col) { return false }
      loop i = 0; vd.size-c; i++ {
         if !vd.size-expr-v[i].value(1, false, vd.size-value-v[i]) { return false }
      }
      return true;
   }
   write(vd:this, var-type:DeclVarType) {
      if (vd.flags & #real-name) != #0 {
         if vd.real-name == #nil {
            output{vd.name.c-name()}
         } else {
            output{vd.real-name}
         }
         return;
      }
      switch var-type {
         case #gvar {
            output{"_G" vd.name.c-name()}
         }
         case #fvar {
            output{"_F" vd.name.c-name()}
         }
      }
   }
   write-lvar(vd:this, lvar:Lvar) {
      output{"_L" vd.name.c-name() ''_ lvar:u32}
   }
   write-type(vd:this, var-type:DeclVarType) {
      if vd.type-info.const {
         output{"const "}
      }
      vd.type.write-type-info(vd.type-info, 0 - vd.size-c);
      output{'' }
      vd.write(var-type);
      loop i = 0; vd.size-c; i++ {
         output{''[}
         vd.size-expr-v[i].write-value(vd.size-value-v[i]);
         output{'']}
      }
   }
   write-lvar-type(vd:this, lvar:Lvar) {
      if vd.type-info.const {
         output{"const "}
      }
      vd.type.write-type-info(vd.type-info, 0 - vd.size-c);
      output{'' }
      vd.write-lvar(lvar);
      loop i = 0; vd.size-c; i++ {
         output{''[}
         vd.size-expr-v[i].write-value(vd.size-value-v[i]);
         output{'']}
      }
   }
   wr(vd:this, w:Wtr, header:bool) {
      vd.name.wr(w, header);
      vd.type.wr(w, header);
      vd.flags.wr(w);
      if (vd.flags & #real-name) != #0 {
         vd.real-name.wr(w, header);
      }
      vd.type-info.wr(w);
      w.n1(vd.size-c);
      loop i = 0; vd.size-c; i++ {
         vd.size-expr-v[i].wr(w, header);
      }
   }
   rd(vd:this, r:Rdr) {
      vd.name.rd(r);
      vd.type.rd(r);
      // At.rd(+vd-type, r);
      // vd.type = validate(vd-type, default-at, vd.name);
      vd.flags.rd(r);
      if (vd.flags & #real-name) != #0 {
         vd.real-name.rd(r);
      }
      vd.type-info.rd(r);
      vd.size-c = r.n1();
      if vd.size-c > 0 {
         quick-alloc-arr(vd.size-expr-v, vd.size-c);
         quick-alloc-arr(vd.size-value-v, vd.size-c);
         loop i = 0; vd.size-c; i++ {
            vd.size-expr-v[i].rd(r);
         }
      }
   }
   copy-from(vd:this, src:DeclVarData) {
      vd.name = src.name;
      vd.type = src.type;
      vd.flags = src.flags;
      vd.real-name = src.real-name;
      vd.type-info.copy-from(src.type-info);
      vd.type-info.built-in = src.type-info.built-in;
      vd.size-c = src.size-c;
      if vd.size-c > 0 {
         quick-alloc-arr(vd.size-expr-v, vd.size-c);
         loop i = 0; vd.size-c; i++ {
            vd.size-expr-v[i] = src.size-expr-v[i];
         }
      }
   }
}
#type-info-star-limit:i32 = 8;
struct Value[reff:i8, paren:bool, type:At, info:TypeInfo.] {
   set(v:this, reff:i8, paren:bool, type:At, info:TypeInfo) {
      +c = info.ref-v[info.array-c];
      v.type = type;
      v.reff = (c + 2) - reff;
      v.info.init();
      v.info.copy-from(info);
      v.info.ref-v[v.info.array-c] = reff - 1;
      v.info.count();
      v.paren = paren;
   }
   rd(v:this, r:Rdr) {
      v.reff = r.n1();
      v.paren = r.n1() != 0;
      v.type.rd(r);
      v.info.rd(r);
   }
   wr(v:this, w:Wtr, header:bool) {
      w.n1(v.reff);
      w.b(v.paren);
      v.type.wr(w, header);
      v.info.wr(w);
   }
}
struct TypeInfo[ref-v:i8[#type-info-star-limit], array-c:u8, star-c:i8, built-in:bool, const:bool] {
   init(ti:this) {
      ti.ref-v[0] = 0;
      ti.array-c = 0;
      ti.star-c = 0;
      ti.built-in = false;
      ti.const = false;
   }
   rd(ti:this, r:Rdr) {
      +c = r.n1();
      loop i = 0; c; i++ {
         ti.ref-v[i] = r.n1();
      }
      ti.array-c = r.n1();
      ti.star-c = r.n1();
      ti.built-in = r.n1() != 0;
      ti.const = r.n1() != 0;
   }
   wr(ti:this, w:Wtr) {
      +c = 0;
      loop #type-info-star-limit {
         if ti.ref-v[c] == 0 {
            break;
         }
         c++;
      }
      w.n1(c);
      loop i = 0; c; i++ {
         w.n1(ti.ref-v[i]);
      }
      w.n1(ti.array-c);
      w.n1(ti.star-c);
      w.b(ti.built-in);
      w.b(ti.const);
   }
   copy-from(ti:this, ti2:TypeInfo) {
      C.memcpy(ti.ref-v, ti2.ref-v, #type-info-star-limit);
      ti.array-c = ti2.array-c;
      ti.star-c = ti2.star-c;
      ti.const = ti2.const;
      // intentionally did not copy .built-in
   }
   finalize(ti:this) {
      var ref-v:i8[#type-info-star-limit];
      +c = ti.array-c;
      +star-c = ti.array-c;
      loop i = 0; c + 1; {
         ref-v[i] = ti.ref-v[i];
         star-c += ref-v[i];
         i += 1;
      }
      loop i = 0, j = c; c + 1; {
         ti.ref-v[i] = ref-v[j];
         i += 1;
         j -= 1;
      }
      ti.star-c = star-c;
   }
   count(ti:this) {
      +star-c = ti.array-c;
      loop i = ti.array-c; i + 1; {
         star-c += ti.ref-v[i];
         i -= 1;
      }
      ti.star-c = star-c;
   }
}
var gvar-c:Gvar;
var gvar-cap:Gvar;
var gvar-v:DeclGvar.[];

var decl-var-row:u32;
var decl-var-col:u32;
// var decl-var-name:Id;
// var decl-var-type:At;
// var decl-var-type-info:TypeInfo.;
#type-info-stack-limit:i32 = 8;
// var stack-type-info:TypeInfo.; // [#type-info-stack-limit]}
// var stack-type-info-c:i8;
var decl-var:DeclVarData.;
enum VarFlags[
   #0,
   #real-name = 1,
   #extern = 2,
   #no-decl = 4,
   ]:u32 {
   rd(f:this&, r:Rdr) @inline {
      f = r.n():VarFlags;
   }
   wr(f:this, w:Wtr) @inline {
      w.n(f:base);
   }
}
decl-var-begin(name:Id, row:u32, col:u32) {
   .decl-var.name = name;
   .decl-var-row = row;
   .decl-var-col = col;
   .decl-var.type-info.init();
   .decl-var.flags = #0;
   .decl-var.real-name = #nil;
   .decl-var.size-c = 0;
}
decl-var-end() {
}
decl-var-attr-real-name(name:Id) {
   if (.decl-var.flags & #real-name) != #0 {
      C1.stdout{.input-path '': .last-row '': .last-col ": error @real-name specified more than once\n"}
      C.exit(#failure);
   }
   .decl-var.flags |= #real-name;
   .decl-var.real-name = name;
}
decl-var-attr-extern() {
   if (.decl-var.flags & #extern) != #0 {
      C1.stdout{.input-path '': .last-row '': .last-col ": error @extern specified more than once\n"}
      C.exit(#failure);
   }
   .decl-var.flags |= #extern;
}
decl-var-attr-no-decl() {
   if (.decl-var.flags & #no-decl) != #0 {
      C1.stdout{.input-path '': .last-row '': .last-col ": error @no-decl specified more than once\n"}
      C.exit(#failure);
   }
   .decl-var.flags |= #no-decl;
}
decl-var-type(type:At) {
   .decl-var.type = type;
   .decl-var.size-c = 0;
   .decl-var.type-info.init();
   .decl-var.flags = #0;
   // .stack-type-info = .decl-var.type-info;
}
decl-var-this() {
   +type = .decl-at;
   .decl-var.type = type;
   // .stack-type-info = .decl-var.type-info;
}
decl-var-as-gvar() {
   +gvar-idx = .gvar-c++;
   if .gvar-cap <= .gvar-c {
      +old-cap = .gvar-cap;
      .gvar-cap = grow(.gvar-c:base);
      realloc(.gvar-v, .gvar-cap:base, old-cap:base);
   }
   +gvar = .gvar-v[gvar-idx];
   gvar.include = .decl-include;
   gvar.at = .decl-at;
   gvar.decl.copy-from(.decl-var);
}
 

}
