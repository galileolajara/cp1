using Cp1 = Cp1;
using Cp1 {
expr-char(value:i32):ExprI {
   var e:ExprChar;
   quick-alloc-one(e);
   e-idx! = expr-push(e.base, #char);
   e.value = value;
   return e-idx;
}
write-char(c:char);
using ExprI {
   wr-char(expr:Expr, w:Wtr, header:bool) @case.wr() @inline {
      var e:ExprChar = expr;
      w.n(e.value);
   }
   rd-char(e-idx:ExprI, r:Rdr) @case.rd() @inline {
      var e:ExprChar;
      quick-alloc-one(e);
      e-idx.set(e.base, #char);
      e.value = r.n();
   }
   write-char(expr:Expr) @case.write() @inline {
      var e:ExprChar = expr;
      `.write-char(e.value);
   }
   process-char(expr:Expr, ok:bool&) @case.process() @inline {
      ok = true;
   }
   type-char(expr:Expr, at:At&) @case.type() @inline {
      at = basic-type(#char);
   }
   value-char(le:this, reff:i32, paren:bool, v:Value, ok:bool&) @case.value() @inline {
      v.type = basic-type(#char);
      v.info.init();
      v.info.array-c = 0;
      v.info.ref-v[0] = ''\0;
      v.info.star-c = 0;
      v.reff = 1;
      v.paren = false;
      ok = true;
   }
}
 

}
