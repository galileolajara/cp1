using Cp1 = Cp1;
using C = Stdc;
using (Cp1) {
Cvar[#nil = -1, #0]:i32 {
   rd(c:this&, r:Rdr) @inline {
      +idx = (r.n() - 1):Cvar;
      if (idx == #nil) {
         c = #nil;
      } else {
         c = .cvar-table[idx];
      }
   }
   wr(g:this, w:Wtr) @inline {
      w.n(g + 1);
   }
   process(c:this):bool {
      +num = c:u32;
      +n3 = num >> 3;
      +n17 = 1 << (num & 7);
      if ((.cvar-is-outputted[n3] & n17) != 0) { return true}
      .cvar-is-outputted[n3] |= n17;

      +cvar = c.ptr();

      if ((cvar.flags & #set-expr) != #0) {
         if !(cvar.expr-set.process()) { return false}
      } elif (cvar.last-cvar != #nil) {
         if !(cvar.last-cvar.process()) { return false}
      }

      +at-i = cvar.decl.type;
      if (at-i != #nil) {
         +at = at-i.ptr();
         if (&&, at.type != #basic, at.decl.struct == #nil) {
            C.out.printf("Error, the type '%s' used in cvar '.%s' was not defined\n", at.name.id.str(), cvar.decl.name.str());
            return false;
         }
         at-i.output(cvar.file, cvar.row, cvar.col);
      }

      // if ((gvar.flags & #no-decl) == #0) {
         .cvar-outputted-v[.cvar-outputted-c++] = c;
      // }
      
      return true;
   }
   ptr(c:this):CvarData @inline {
      return .cvar-v[c];
   }
   write(c:this) @inline {
      +cvar = c.ptr();
      if ((cvar.decl.flags & #real-name) != #0) {
         .out.printf("%s", cvar.decl.real-name.str());
      } else {
         cvar.at.write-space();
         .out.printf("_C%s", cvar.decl.name.c-name());
      }
   }
}
CvarFlags[
   #0,
   #set-expr = 1,
   #as-enum = 2,
   // #real-name = 2,
   ]:u8 {
   wr(f:this, w:Wtr) @inline {
      w.n1(f);
   }
   rd(f:this&, r:Rdr) @inline {
      f = r.n1():CvarFlags;
   }
}
var cvar-c:Cvar;
var cvar-cap:Cvar;
var cvar-v:CvarData+[];
expr-cvar(at:At, name:Id):ExprI {
   quick-alloc-one(+(e:ExprCvar));
   +e-idx = expr-push(e.base, #cvar);
   e.at = at;
   e.name = name;
   return e-idx;
}
using (ExprI) {
   write-cvar(expr:Expr) @case.write() @inline {
      var e:ExprCvar = expr;
      e.cvar.write();
   }
   wr-cvar(expr:Expr, w:Wtr, header:bool) @case.wr() @inline {
      var e:ExprCvar = expr;
      e.at.wr(w, header);
      e.name.wr(w, header);
   }
   rd-cvar(e-idx:ExprI, r:Rdr) @case.rd() @inline {
      quick-alloc-one(+(e:ExprCvar));
      e-idx.set(e.base, #cvar);
      e.at.rd(r);
      e.name.rd(r);
      e.try = #nil;
   }
   value-cvar(e:this, reff:i8, paren:bool, v:Value, ok:bool&) @case.value() @inline {
      var expr:ExprCvar = e.ptr();
      +cvar = expr.cvar.ptr();
      v.set(reff, paren, cvar.decl.type, cvar.decl.type-info);
      if (v.reff == 1) {
         v.paren = false;
      }
      ok = true;
   }
   type-cvar(expr:Expr, at:At&) @case.type() @inline {
      var e:ExprCvar = expr;
      +cvar = e.cvar.ptr();
      at = cvar.decl.type;
   }
   process-cvar(expr:Expr, ok:bool&) @case.process() @inline {
      var e:ExprCvar = expr;
      +name = e.name;
      var cvar-c, cvar-v;
      if (e.try != #nil) {
         +at = e.try.ptr();
         cvar-c = at.cvar-c;
         cvar-v = at.cvar-v;
         // C.out.printf("e.try = %d, %s, %s, cvar-c %d\n", e.try, at.name.id.str(), name.str(), cvar-c);
         loop var i = 0; {(cvar-c) i++} {
            +cvar = cvar-v[i];
            // C.out.printf("- %s\n", cvar.ptr().decl.name.str());
            if (cvar.ptr().decl.name == name) {
               if !(cvar.process()) { return}
               e.cvar = cvar;
               ok = true;
               return;
            }
         }
      }
      var at-idx, at;
      +try-parent = false;
      if (e.at != #nil) {
         e.at = at-validate(e.at, .ctx-func.at, .ctx-func.file, .ctx-begin-row, .ctx-begin-col);
         at-idx = e.at;
         at = at-idx.ptr();
         cvar-c = at.cvar-c;
         cvar-v = at.cvar-v;
      } else {
         at-idx = .ctx-func.at;
         at = at-idx.ptr();
         cvar-c = at.cvar-c;
         cvar-v = at.cvar-v;
         try-parent = true;
      }
      loop {
         loop var i = 0; {(cvar-c) i++} {
            +cvar = cvar-v[i];
            if (cvar.ptr().decl.name == name) {
               if !(cvar.process()) { return}
               e.cvar = cvar;
               ok = true;
               return;
            }
         }
         if !(try-parent) { break}
         if (at-idx == #root) { break}
         at-idx = at.parent;
         at = at-idx.ptr();
         cvar-c = at.cvar-c;
         cvar-v = at.cvar-v;
      }
      C.out.printf("%s:%u:%u - %u:%u: Cannot find #%s\n",
         .ctx-func.file.path(), .ctx-begin-row, .ctx-begin-col, .ctx-end-row, .ctx-end-col, name.str());
   }
   try-deduce-cvar(expr:Expr, at:At) @case.try-deduce() @inline {
      var e:ExprCvar = expr;
      if (e.at == #nil) {
         e.try = at;
      }
   }
}
 

}
