using Cp1 = Cp1;
using Cp1 {
expr-bools(left:ExprI, right:ExprI, type:Bools):ExprI {
   quick-alloc-one(+(e:ExprBools));
   +e-idx = expr-push(e.base, #bools);
   e.left = left;
   e.right = right;
   e.type = type;
   return e-idx;
}
expr-bools-add(bools:ExprI, right:ExprI):ExprI {
   var e:ExprBools = bools.ptr();
   +i = e.item-c++;
   if e.item-cap <= e.item-c {
      +old-cap = e.item-cap;
      grow(e.item-cap, e.item-c);
      realloc(e.item-v, e.item-cap, old-cap);
   }
   e.item-v[i].expr = right;
   return bools;
}
enum Bools[#and, #or]:u8 {
   wr(e:this, w:Wtr) @inline {
      w.n1(e:base);
   }
   rd(e:this&, r:Rdr) @inline {
      e = r.n1():Bools;
   }
}
using ExprI {
   type-bools(expr:Expr, at:At&) @case.type() @inline {
      at = basic-type(#bool);
   }
   value-bools(e:this, reff:i32, paren:bool, v:Value, ok:bool&) @case.value() @inline {
      v.type = basic-type(#bool);
      v.info.init();
      v.info.array-c = 0;
      v.info.ref-v[0] = ''\0;
      v.info.star-c = 0;
      v.reff = 1;
      v.paren = false;
      ok = true;
   }
   process-bools(expr:Expr, ok:bool&) @case.process() @inline {
      var e:ExprBools = expr;
      if !e.left.value(1, true, e.left-val) { return }
      if !e.right.value(1, true, e.right-val) { return }
      loop i = 0; e.item-c; i++ {
         +item = e.item-v[i];
         if !item.expr.value(1, true, item.val) { return }
      }
      ok = true;
   }
   write-bools(expr:Expr) @case.write() @inline {
      var e:ExprBools = expr;
      switch e.type {
         case #and {
            output{''(}
            e.left.write-value(e.left-val);
            output{" && "}
            e.right.write-value(e.right-val);
            loop i = 0; e.item-c; i++ {
               output{" && "}
               +item = e.item-v[i];
               item.expr.write-value(item.val);
            }
            output{'')}
         }
         case #or {
            output{''(}
            e.left.write-value(e.left-val);
            output{" || "}
            e.right.write-value(e.right-val);
            loop i = 0; e.item-c; i++ {
               output{" || "}
               +item = e.item-v[i];
               item.expr.write-value(item.val);
            }
            output{'')}
         }
      }
   }
   wr-bools(expr:Expr, w:Wtr, header:bool) @case.wr() @inline {
      var e:ExprBools = expr;
      e.left.wr(w, header);
      e.right.wr(w, header);
      w.n1(e.item-c);
      loop i = 0; e.item-c; i++ {
         e.item-v[i].expr.wr(w, header);
      }
      e.type.wr(w);
   }
   rd-bools(e-idx:ExprI, r:Rdr) @case.rd() @inline {
      quick-alloc-one(+(e:ExprBools));
      e-idx.set(e.base, #bools);
      e.left.rd(r);
      e.right.rd(r);
      +item-c = r.n1();
      if item-c > 0 {
         e.item-c = item-c;
         quick-alloc-arr(e.item-v, item-c);
         loop i = 0; item-c; i++ {
            e.item-v[i].expr.rd(r);
         }
      }
      e.type.rd(r);
   }
}
 

}
