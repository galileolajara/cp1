using Cp1 = Cp1;
using C = LibC;
using Cp1 {
enum Struct[#nil = -1, #0, #1]:i32 {
   wr(s:this, w:Wtr) @inline {
      w.n(s + #1);
   }
   rd(s:this&, r:Rdr) @inline {
      s = (r.n() - #1):Func;
   }
   ptr(s:this):StructData @inline {
      return .struct-v[s];
   }
   output(s-i:this) {
      +num = s-i:u32;
      +n3 = num >> 3;
      +n17 = 1 << (num & 7);
      if (.struct-is-outputted[n3] & n17) != 0 { return }
      .struct-is-outputted[n3] |= n17;
      +s = s-i.ptr();
      +s-at = s.at;
      +s-file = s.file;
      +s-row = s.begin-row;
      +s-col = s.begin-col;
      loop i = 0; s.fvar-c; i++ {
         // s.fvar-v[i].decl.type.output(s.file, row, col);
         // if !s.fvar-v[i].decl.type.finalize(s.fvar-v[i].decl.type-info, row, col) { return }
         s.fvar-v[i].decl.type = at-validate(s.fvar-v[i].decl.type, s-at, s-file, s-row, s-col);
         if !s.fvar-v[i].decl.process(s-file, s-row, s-col, s-at) {
            C.out.printf("err\n");
            C.exit(#failure);
            return;
         }
      }

      if s.include != #nil {
         s.include.output();
      }

      if (s.flags & #no-decl) == #0 {
         .struct-outputted-v[.struct-outputted-c++] = s-i;
      }
   }
}
struct FvarData[
   decl:DeclVarData+,
   ] {
   rd(f:this, r:Rdr) {
      f.decl.rd(r);
   }
   wr(f:this, w:Wtr, header:bool) {
      f.decl.wr(w, header);
   }
}
var struct-c:Struct;
var struct-cap:Struct;
var struct-v:StructData[];
var decl-struct-row:i32;
var decl-struct-col:i32;
var decl-struct-at:At;
var decl-struct-real-name:Id;
enum StructFlags[
   #0,
   #real-name = 1,
   #no-decl = 2,
   #union = 4,
   ]:u8 {
   wr(f:this, w:Wtr) @inline {
      w.n1(f:base);
   }
   rd(f:this&, r:Rdr) @inline {
      f = r.n1():StructFlags;
   }
}
var decl-struct-flags:StructFlags;
var decl-fvar-c:u32;
var decl-fvar-cap:u32;
var decl-fvar-v:DeclVarData+[];
decl-var-as-fvar() {
   +fvar = .decl-fvar-c++;
   if .decl-fvar-cap <= .decl-fvar-c {
      +old-cap = .decl-fvar-cap;
      grow(.decl-fvar-cap, .decl-fvar-c);
      realloc(.decl-fvar-v, .decl-fvar-cap, old-cap);
   }
   .decl-fvar-v[fvar].copy-from(.decl-var);
}
decl-at-begin-struct(name:Id, row:i32, col:i32) {
   .decl-struct-row = row;
   .decl-struct-col = col;
   .build-at = .decl-at;
   decl-at-add(name, #struct-enum);
   .decl-at-v[.decl-at-c++] = .decl-at;
   .decl-at = .build-at;
   .decl-struct-at = .build-at;
   .decl-fvar-c = 0;
   .decl-struct-real-name = #nil;
   .decl-struct-flags = #0;
   // C.out.printf("began struct at:\n");
   // +at-i = .build-at;
   // loop {
   //    +at = at-i.ptr();
   //    C.out.printf("- %s\n", at.name.id.str());
   //    at-i = at.parent;
   //    if at-i == #root { break }
   // }
}
decl-struct-end(row:i32, col:i32) {
   +s-idx = .struct-c++;
   if .struct-cap <= .struct-c {
      +old-cap = .struct-cap;
      .struct-cap = grow(.struct-c:base);
      realloc(.struct-v, .struct-cap:base, old-cap:base);
   }
   var s:StructData;
   quick-alloc-plus(s, FvarData[usz] * .decl-fvar-c);
   .struct-v[s-idx] = s;
   s.begin-row = .decl-struct-row;
   s.begin-col = .decl-struct-col;
   s.end-row = row;
   s.end-col = col;
   s.include = .decl-include;
   s.at = .decl-struct-at;
   s.flags = .decl-struct-flags;
   // s.name = .decl-struct-name;
   s.fvar-c = .decl-fvar-c;
   // C.out.printf("There are %u fvars\n", s.fvar-c);
   loop i = 0; .decl-fvar-c; i++ {
      +a = s.fvar-v[i];
      a.decl.copy-from(.decl-fvar-v[i]);
      // C.out.printf("- %s\n", a.name.str());
   }
   s.real-name = .decl-struct-real-name;
}
struct-attr-real-name(name:Id) {
   if (.decl-struct-flags & #real-name) != #0 {
      C.out.printf("%u:%u: error @real-name specified more than once\n", .last-row, .last-col);
      C.exit(#failure);
   }
   .decl-struct-flags |= #real-name;
   .decl-struct-real-name = name;
}
struct-attr-no-decl() {
   if (.decl-struct-flags & #no-decl) != #0 {
      C.out.printf("%u:%u: error @no-decl specified more than once\n", .last-row, .last-col);
      C.exit(#failure);
   }
   .decl-struct-flags |= #no-decl;
}
struct-attr-union() {
   if (.decl-struct-flags & #union) != #0 {
      C.out.printf("%u:%u: error @union specified more than once\n", .last-row, .last-col);
      C.exit(#failure);
   }
   .decl-struct-flags |= #union;
}
 

}
