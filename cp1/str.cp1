using 'cp1 = :cp1;
using 'c = :stdc;
{at(:cp1)
:str[#nil = -1, #0]:i32;
{gvar str-c:i32}
{gvar str-cap:i32}
{gvar str-ptr:ref[]}
{gvar str-len:i32[]}
{gvar string-buf:char[] @extern}
{gvar string-len:i32 @extern}
expr-str(prev:expr-i):expr-i {
   +len = .string-len;
   quick-alloc-plus(+(n:expr-str-node), len + 1);
   n.len = len;
   'c.memcpy(n.buf, .string-buf, len);
   n.buf[len] = ''\0;
   n.next = null;
   if (prev == #nil) {
      quick-alloc-one(+(e:expr-str));
      +e-idx = expr-push(e.base, #str);
      e.node-c = 1;
      e.first = n;
      e.last = n;
      return e-idx;
   } else {
      var e:expr-str = prev.ptr();
      e.node-c++;
      e.last.next = n;
      e.last = n;
      return prev;
   }
}
write-str-node(len:i32, ptr:ref);
{at(:expr-i)
   wr-str(expr:expr, w:wtr, header:bool) @case.wr() @inline {
      var e:expr-str = expr;
      w.n(e.node-c);
      +n = e.first;
      {do()
         w.n(n.len);
         w.copy(n.buf, n.len);
         n = n.next;
         if (n == null) { break}
      }
   }
   rd-str(e-idx:expr-i, r:rdr) @case.rd() @inline {
      +node-c = r.n();
      quick-alloc-one(+(e:expr-str));
      e-idx.set(e.base, #str);
      +first = true;
      {do(node-c)
         +len = r.n();
         quick-alloc-plus(+(n:expr-str-node), len + 1);
         n.len = len;
         r.copy(n.buf, len);
         n.buf[len] = 0;
         n.next = null;
         if (first) {
            first = false;
            e.first = n;
            e.last = n;
         } else {
            e.last.next = n;
            e.last = n;
         }
      }
   }
   write-str(expr:expr) @case.write() @inline {
      var e:expr-str = expr;
      +n = e.first;
      {do()
         write-str-node(n.len, n.buf);
         n = n.next;
         if (n == null) { break}
         .out.putc(''\n);
      }
   }
   value-str(s:this, ref:i32, paren:bool, v:value, ok:bool&) @case.value() @inline {
      v.type = basic-type(#char);
      v.info.init();
      v.info.array-c = 1;
      v.info.ref-v[0] = ''\0;
      v.info.ref-v[1] = ''\0;
      v.info.star-c = 1;
      v.ref = 1;
      ok = true;
   }
   process-str(expr:expr, ok:bool&) @case.process() @inline {
      ok = true;
   }
}
 

}
