using Cp1 = Cp1;
using C = LibC;
using Cp1 {
enum GvarFlags[#0, #no-decl = 1]:u8;
enum Gvar[#nil = -1, #0]:i32 {
   process(g:this):bool {
      +num = g:u32;
      +n3 = num >> 3;
      +n17 = 1 << (num & 7);
      if (.gvar-is-outputted[n3] & n17) != 0 { return true }
      .gvar-is-outputted[n3] |= n17;

      +gvar = g.ptr();
      +at-i = gvar.decl.type;
      +at = at-i.ptr();
      if !gvar.decl.process(gvar.file, gvar.row, gvar.col, gvar.at) { return false }

      if (gvar.flags & #no-decl) == #0 {
         .gvar-outputted-v[.gvar-outputted-c++] = g;
      }
      
      return true;
   }
   write(g:this) {
      +gvar = g.ptr();
      gvar.decl.write(#gvar);
   }
   // write(g:this) {
   //    +gvar = g.ptr();
   //    if (gvar.decl.flags & #real-name) != #0 {
   //       .out.printf("%s", gvar.decl.real-name.str());
   //       return;
   //    }
   //    gvar.at.write-space();
   //    .out.printf("_G%s", gvar.decl.name.c-name());
   // }
   ptr(g:this):DeclGvar @inline {
      return .gvar-v[g];
   }
}
expr-gvar(at:At, name:Id):ExprI {
   quick-alloc-one(+(e:ExprGvar));
   +e-idx = expr-push(e.base, #gvar);
   e.at = at;
   e.name = name;
   return e-idx;
}
using ExprI {
   value-gvar(g:this, reff:i32, paren:bool, v:Value, ok:bool&) @case.value() @inline {
      var e:ExprGvar = g.ptr();
      +gvar = e.gvar.ptr();
      v.set(reff, paren, gvar.decl.type, gvar.decl.type-info);
      if v.reff == 1 {
         v.paren = false;
      }
      ok = true;
   }
   type-gvar(expr:Expr, at:At&) @case.type() @inline {
      var e:ExprGvar = expr;
      +gvar = e.gvar.ptr();
      at = gvar.decl.type;
   }
   wr-gvar(expr:Expr, w:Wtr, header:bool) @case.wr() @inline {
      var e:ExprGvar = expr;
      e.at.wr(w, header);
      e.name.wr(w, header);
   }
   rd-gvar(e-idx:ExprI, r:Rdr) @case.rd() @inline {
      At.rd(+at-idx, r);
      Id.rd(+name, r);
      e-idx.set-gvar(at-idx, name);
   }
   set-gvar(e-idx:this, at-idx:At, name:Id) {
      quick-alloc-one(+(e:ExprGvar));
      e-idx.set(e.base, #gvar);
      +try-parent = false;
      if at-idx == #nil {
         at-idx = .ctx-func.at;
         try-parent = true;
      }
      loop {
         +at = at-idx.ptr();
         loop i = 0; at.gvar-c; i++ {
            +gvar = at.gvar-v[i];
            if gvar.ptr().decl.name == name {
               e.gvar = gvar;
               return;
            }
         }
         if !try-parent { break }
         if at-idx == #root { break }
         at-idx = at.parent;
      }
      C<stdout .ctx-func.file; '':; .ctx-begin-row; '':; .ctx-begin-col; " - "; .ctx-end-row; '':; .ctx-end-col; ": Cannot find gvar '."; name; "'\n">;
      C.exit(#failure);
   }
   write-gvar(expr:Expr) @case.write() @inline {
      var e:ExprGvar = expr;
      e.gvar.write();
   }
   process-gvar(expr:Expr, ok:bool&) @case.process() @inline {
      var e:ExprGvar = expr;
      if !e.gvar.process() { return }
      ok = true;
   }
}
 

}
