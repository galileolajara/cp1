using Cp1 = Cp1;
using (Cp1) {
Unary[#neg, #inc, #dec, #not]:u8 {
   rd(u:this&, r:Rdr) @inline {
      u = r.n1():Unary;
   }
   wr(u:this, w:Wtr) @inline {
      w.n1(u);
   }
}
expr-unary(expr:ExprI, type:Unary):ExprI {
   quick-alloc-one(+(e:ExprUnary));
   +e-idx = expr-push(e.base, #unary);
   e.expr = expr;
   e.type = type;
   return e-idx;
}
using (ExprI) {
   wr-unary(expr:Expr, w:Wtr, header:bool) @case.wr() @inline {
      var e:ExprUnary = expr;
      e.expr.wr(w, header);
      e.type.wr(w);
   }
   rd-unary(e-idx:ExprI, r:Rdr) @case.rd() @inline {
      quick-alloc-one(+(e:ExprUnary));
      e-idx.set(e.base, #unary);
      e.expr.rd(r);
      e.type.rd(r);
   }
   write-unary(expr:Expr) @case.write() @inline {
      var e:ExprUnary = expr;
      switch (e.type) {
         case (#neg) {
            .out.printf("-");
            e.expr.write-value(e.val);
         }
         case (#inc) {
            e.expr.write-value(e.val);
            .out.printf("++");
         }
         case (#dec) {
            e.expr.write-value(e.val);
            .out.printf("--");
         }
         case (#not) {
            .out.printf("!");
            e.expr.write-value(e.val);
         }
      }
   }
   value-unary(e:this, reff:i8, paren:bool, v:Value, ok:bool&) @case.value() @inline {
      var expr:ExprUnary = e.ptr();
		v.type = expr.expr.type();
		v.info.init();
		v.info.array-c = 0;
		v.info.ref-v[0] = 0;
		v.info.star-c = 0;
		v.reff = 1;
      ok = true;
	}
   type-unary(expr:Expr, at:At&) @case.type() @inline {
      var e:ExprUnary = expr;
      at = e.expr.type();
   }
   process-unary(expr:Expr, ok:bool&) @case.process() @inline {
      var e:ExprUnary = expr;
		if !(e.expr.value(1, true, e.val)) {
			return;
      }
      ok = true;
   }
}
 

}
