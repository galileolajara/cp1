using C = StdC;
using Sys = Sys;
var atexit-rm-v:char[][];
var atexit-rm-cap:u32;
var atexit-rm-c:u32;
var include-dir:char[512];
var include-dir-len:u16;
// +include-dir = "/opt/cp1/include";
// +include-dir-len = C.strlen(include-dir);
print-commands(bin:char[]) {
   C.printf("Usage: %s [command] [options]\n", bin);
   C.printf("Commands:\n");
   C.printf("  c     Build a C file.\n");
   C.printf("  run      Compile and run the cp1 codes.\n");
}
print-c-usage(bin:char[]) {
   C.printf("Usage: %s c [output.c] [cp1 file/s...]\n", bin);
}
print-run-usage(bin:char[]) {
   C.printf("Usage: %s run [cp1 file/s...]\n", bin);
}
get-compiler(bin:char[], ninja-f:C.File) {
   +path = C.strdup(C.getenv("PATH"));
   // C.printf("PATH = %s\n", PATH);
   +found = C.strtok(path, ":");
   while (found != null) {
      // C.printf("- %s\n", found);
      var fd, compiler:char[512];
      C.sprintf(compiler, "%s/tcc", found);
      fd = C.open(compiler, #read);
      if (fd != #nil) {
         ninja-f.printf("rule c\n");
         ninja-f.printf(" command = tcc $in -o $out\n");
         fd.close();
         C.free(path);
         return;
      }
      C.sprintf(compiler, "%s/clang", found);
      fd = C.open(compiler, #read);
      if (fd != #nil) {
         ninja-f.printf("rule c\n");
         ninja-f.printf(" command = clang $in -o $out\n");
         fd.close();
         C.free(path);
         return;
      }
      C.sprintf(compiler, "%s/gcc", found);
      fd = C.open(compiler, #read);
      if (fd != #nil) {
         ninja-f.printf("rule c\n");
         ninja-f.printf(" command = gcc $in -o $out\n");
         fd.close();
         C.free(path);
         return;
      }
      found = C.strtok(null, ":");
   }
   C.printf("Cannot execute '%s run' because the required compiler was not found: tcc clang or gcc\n", bin);
   C.exit(#failure);
}
Cmd[#c, #run]:u8;
print-usage(bin:char[], cmd:Cmd) {
   switch (cmd) {
      case (#c) {
         print-c-usage(bin);
      }
      case (#run) {
         print-run-usage(bin);
      }
   }
}
var included-v:char[][];
var included-len-v:u32[];
var included-cap:i32;
var included-c:i32;
var cp1-path-v:char[][];
var cp1-path-len-v:u32[];
var cp1-path-real-v:char[][];
var cp1-path-real-len-v:u32[];
var cp1-path-cap:i32;
var cp1-path-c:i32;
cp1-path-add(cp1-path-real:char[], cp1-path-real-len:i32, cp1-path:char[], cp1-path-len:i32) {
   // C.printf("adding %s as %s\n", cp1-path-real, cp1-path);
   +i = .cp1-path-c++;
   if (.cp1-path-cap < .cp1-path-c) {
      .cp1-path-cap = (.cp1-path-cap << 1) + 8;
      .cp1-path-v = C.realloc(.cp1-path-v, .cp1-path-cap * usz[usz]);
      .cp1-path-len-v = C.realloc(.cp1-path-len-v, .cp1-path-cap * u32[usz]);
      .cp1-path-real-v = C.realloc(.cp1-path-real-v, .cp1-path-cap * usz[usz]);
      .cp1-path-real-len-v = C.realloc(.cp1-path-real-len-v, .cp1-path-cap * u32[usz]);
   }
   .cp1-path-v[i] = cp1-path;
   .cp1-path-len-v[i] = cp1-path-len;
   .cp1-path-real-v[i] = cp1-path-real;
   .cp1-path-real-len-v[i] = cp1-path-real-len;
}
var cmd-preprocess:char[512];
cp1-path-input(cp1-path:char[], cp1-path-len:i32, bin:char[], cmd:Cmd):bool {
	loop var i = 0; {(.cp1-path-c) i++} {
		if (C.memcmp(.cp1-path-v[i], cp1-path, cp1-path-len) == 0) {
			return true;
		}
	}
   if !(C.Fd.open(++fd, cp1-path, #read)) {
      C.printf("Error, [cp1 file] (which is '%s') cannot be opened for reading\n", cp1-path);
		return false;
   }
   +len = fd.seek(0, #end);
   fd.seek(0, #set);
   var data:char[] = C.malloc(len);
   fd.read(data, len);
   fd.close();
   if !(&&, len > 0, data[len - 1] == ''\n) {
      C.printf("Error, [cp1 file] (which is '%s') must end a new line\n", cp1-path);
		return false;
   }
   if (data[len - 2] == ''\r) {
      C.printf("Error, [cp1 file] (which is '%s') must have Unix line endings '\\n' instead of Windows line endings '\\r\\n'\n", cp1-path);
		return false;
   }
   // Detect if we need to preprocess the file
   +pos = 0;
   +line = 0;
   +preprocess = false;
   while (pos < len) {
      line++;
      +start = pos;
      loop {
         if (data[pos] == ''\n) {
            break;
         }
         pos++;
      }
      +first-char = start;
      loop {
         if (||, data[first-char] == '' , data[first-char] == ''\t) {
            first-char++;
            continue;
         } else {
            break;
         }
      }
      // C.printf("[%.*s]\n", pos - first-char, & data[first-char]);
      if (&&, data[first-char] == ''#, data[first-char + 1] == ''i, data[first-char + 2] == ''f, (||, data[first-char + 3] == ''(, (&&, data[first-char + 3] == ''!, data[first-char + 4] == ''())) {
         preprocess = true;
         break;
      }
      pos++;
   }
   // Process consecutive lines that begins with '#'
   if (preprocess) {
      C.free(data);

      var tmp-path:char[17];
      C.memcpy(tmp-path, "cp1-tmp-XXXXXXXX", 17);
      +tmp-fd = C.mkstemp(tmp-path);
      if (tmp-fd == #nil) {
         C.printf("Error, cannot create a temporary file at the current folder\n");
         return false;
      }
      tmp-fd.close();

      C.sprintf(.cmd-preprocess, "%s-preprocess %.*s %s\n", bin, cp1-path-len, cp1-path, tmp-path);
      // C.printf("Running preprocessor: %s\n", .cmd-preprocess);
      C.out.flush();
      if (C.system(.cmd-preprocess) != 0) {
         return false;
      }
      +tmp-path-dup = C.malloc(17);
      C.memcpy(tmp-path-dup, tmp-path, 17);
      atexit-rm(tmp-path-dup);
      cp1-path-add(tmp-path-dup, 16, cp1-path, cp1-path-len);
      if !(C.Fd.open(fd, tmp-path-dup, #read)) {
         C.printf("Error, cannot open file for reading: %s\n", tmp-path);
         return false;
      }

      // Re-read the data
      len = fd.seek(0, #end);
      fd.seek(0, #set);
      data = C.malloc(len);
      fd.read(data, len);
      fd.close();
   } else {
      cp1-path-add(cp1-path, cp1-path-len, cp1-path, cp1-path-len);
   }
   pos = 0;
   line = 0;
   while (pos < len) {
      line++;
      +start = pos;
      loop {
         if (data[pos] == ''\n) {
            break;
         }
         pos++;
      }
      +first-char = start;
      loop {
         if (||, data[first-char] == '' , data[first-char] == ''\t) {
            first-char++;
            continue;
         } else {
            break;
         }
      }
      // C.printf("[%.*s]\n", pos - first-char, & data[first-char]);
      if (&&,
         data[first-char] == ''#,
         data[first-char + 1] == ''i,
         data[first-char + 2] == ''m,
         data[first-char + 3] == ''p,
         data[first-char + 4] == ''o,
         data[first-char + 5] == ''r,
         data[first-char + 6] == ''t,
         (||, data[first-char + 7] == '' , data[first-char + 7] == ''\t),
         ) {
         start += 8;
         +begin = -1;
         loop var j = start; {(pos - start) j++} {
            if (data[j] == ''") {
               begin = j;
               break;
            } elif (data[j] == '' ) {
               // Ok
            } elif (data[j] == ''\t) {
               // Ok
            } else {
               C.out.printf("%s:%u: Invalid character '%c' found in #include <...>\n", cp1-path, line, data[j]);
               return false;
            }
         }
         if (begin != -1) {
            start = begin + 1;
            +end = -1;
            loop var j = start; {(pos - start) j++} {
               if (data[j] == ''") {
                  end = j;
                  break;
               }
            }
            if (end == -1) {
               C.printf("%s:%u: #import \"...\" must end with '\"'\n", cp1-path, line);
               return false;
            }
            var import:char[] = & data[start];
            +import-path-len = end - start;
            if (&&, import-path-len >= 4, import[import-path-len - 4] == ''., import[import-path-len - 3] == ''c, import[import-path-len - 2] == ''p, import[import-path-len - 1] == ''1) {
               C.printf("%s:%u: #import \"%.*s\" doesn:T need a '.cp1' suffix\n", cp1-path, line, import-path-len, import);
               return false;
            }
            if (import[0] == ''/) {
               C.printf("%s:%u: #import \"%.*s\" must be a relative path, '/' was detected at the beginning of file path\n", cp1-path, line, import-path-len, import);
               return false;
            }
            loop var j = 0; {(import-path-len) j++} {
               if (import[j] == ''\\) {
                  C.printf("%s:%u: #import \"%.*s\" must not contain backslashes '\\', please use forward slashes '/' instead\n", cp1-path, line, import-path-len, import);
                  return false;
               }
            }
            loop var j = 0; {(import-path-len - 1) j++} {
               if (&&, import[j] == ''., import[j + 1] == ''/) {
                  C.printf("%s:%u: #import \"%.*s\" must not contain './'\n", cp1-path, line, import-path-len, import);
                  return false;
               }
            }
            var import-path:char[] = C.malloc(import-path-len + 5);
            C.memcpy(import-path, import, import-path-len);
            import-path[import-path-len++] = ''.;
            import-path[import-path-len++] = ''c;
            import-path[import-path-len++] = ''p;
            import-path[import-path-len++] = ''1;
            import-path[import-path-len] = ''\0;
            // C.printf("importing %s\n", import-path);
            if !(cp1-path-input(import-path, import-path-len, bin, cmd)) {
               C.printf("Error from #import \"%.*s\" at file '%s' line %u\n", import-path-len - 4, import, cp1-path, line);
               return false;
            }
         }
      } elif (&&,
         data[first-char] == ''#,
         data[first-char + 1] == ''i,
         data[first-char + 2] == ''n,
         data[first-char + 3] == ''c,
         data[first-char + 4] == ''l,
         data[first-char + 5] == ''u,
         data[first-char + 6] == ''d,
         data[first-char + 7] == ''e,
         (||, data[first-char + 8] == '' , data[first-char + 8] == ''\t),
         ) {
         start += 9;
         +begin = -1;
         loop var j = start; {(pos - start) j++} {
            if (data[j] == ''<) {
               begin = j;
               break;
            } elif (data[j] == '' ) {
               // Ok
            } elif (data[j] == ''\t) {
               // Ok
            } else {
               C.out.printf("%s:%u: Invalid character '%c' found in #include <...>\n", cp1-path, line, data[j]);
               return false;
            }
         }
         if (begin != -1) {
            start = begin + 1;
            +end = -1;
            loop var j = start; {(pos - start) j++} {
               if (data[j] == ''>) {
                  end = j;
                  break;
               }
            }
            if (end == -1) {
               C.printf("%s:%u: #include <...> must end with '>'\n", cp1-path, line);
               return false;
            }
            var include-path:char[] = & data[start];
            +include-path-len = end - start;
            +found = false;
            loop var j = 0; {(.included-c) j++} {
               if (&&, include-path-len == .included-len-v[j], C.memcmp(.included-v[j], include-path, include-path-len) == 0) {
                  found = true;
                  break;
               }
            }
            if !(found) {
               +i = .included-c++;
               if (.included-cap < .included-c) {
                  .included-cap = (.included-c << 1) + 8;
                  .included-v = C.realloc(.included-v, .included-cap * usz[usz]);
                  .included-len-v = C.realloc(.included-len-v, .included-cap * u32[usz]);
               }
               var path:char[] = C.malloc(include-path-len + 1);
               C.memcpy(path, include-path, include-path-len);
               path[include-path-len] = ''\0;
               .included-v[i] = path;
               .included-len-v[i] = include-path-len;
               // C.printf("including %.*s\n", include-path-len, include-path);
               var spec-path:char[128];
               C.sprintf(spec-path, "%s/%s", .include-dir, path);
               loop var i = .include-dir-len + 1; {(C.strlen(spec-path) - (.include-dir-len + 1)) i++} {
                  if (spec-path[i] == ''/) {
                     spec-path[i] = ''-;
                  }
               }
               if !(C.Fd.open(++spec-fd, spec-path, #read)) {
                  C.printf("%s:%u: #include <%s> failed because '%s' does not exists\n", cp1-path, line, path, spec-path);
                  return false;
               }
               +spec-len = spec-fd.seek(0, #end);
               spec-fd.seek(0, #set);
               var spec-data:char[] = C.malloc(spec-len + 1);
               spec-fd.read(spec-data, spec-len);
               // C.printf("reading %s\n", spec-path);
               +spec-pos = 0;
               +spec-line = 0;
               while (spec-pos < spec-len) {
                  spec-line++;
                  +start = spec-pos;
                  loop {
                     if (spec-data[spec-pos] == ''\n) {
                        if (spec-data[start] == ''<) {
                           start++;
                           +rangle = -1;
                           loop var j = start; {(spec-pos - start) j++} {
                              if (spec-data[j] == ''>) {
                                 rangle = j;
                                 break;
                              }
                           }
                           if (rangle != -1) {
                              var file-path:char[] = & spec-data[start];
                              +file-path-len = rangle - start;
                              var file-path-dup:char[] = C.malloc(file-path-len + 1);
                              C.memcpy(file-path-dup, file-path, file-path-len);
                              file-path-dup[file-path-len] = ''\0;
                              var real-path:char[] = C.malloc(.include-dir-len + 1 + file-path-len + 1);
                              C.sprintf(real-path, "%s/%.*s", .include-dir, file-path-len, file-path);
                              // C.printf("[%.*s] -> %s\n", file-path-len, file-path, real-path);
                              +real-path-len = C.strlen(real-path);
                              cp1-path-add(real-path, real-path-len, file-path-dup, file-path-len);
                           }
                        }
                        spec-pos++;
                        break;
                     }
                     spec-pos++;
                  }
               }
               C.free(spec-data);
            }
         }
      }
      +i = first-char;
      loop {
         if (data[i] == ''\n) {
            break;
         }
         if (&&, data[i] == ''/, data[i + 1] == ''/) {
            // C.printf("comment detected\n");
            break;
         }
         if (data[i] == ''{) {
            // C.printf("curly brace detected\n");
            "goto stop;";
         }
         i++;
      }
      pos++;
   }
   "stop:";
   C.free(data);
	return true;
}
validate-cp1-paths(start:i32, arg-c:i32, arg-v:char[][], bin:char[], cmd:Cmd):bool {
   loop var i = start; {(arg-c - start) i++} {
      +cp1-path = arg-v[i];
      if (cp1-path[0] == ''/) {
         print-usage(bin, cmd);
         C.printf("Error, [cp1 file] (which is '%s') must be a relative filepath (e.g. file.cp1), not an absolute path (/home/user/file.cp1)\n", cp1-path);
         C.exit(#failure);
      }
      +cp1-path-len = C.strlen(cp1-path);
		if (&&, cp1-path[0] == ''., cp1-path[1] == ''/) {
			cp1-path = & cp1-path[2];
			cp1-path-len -= 2;
		}
      loop var j = 0; {(cp1-path-len) j++} {
         if (cp1-path[j] == ''\\) {
            print-usage(bin, cmd);
            C.printf("Error, [cp1 file] (which is '%s') must not contain backslashes '\\', please use forward slashes '/' instead\n", cp1-path);
            C.exit(#failure);
         }
      }
      loop var j = 0; {(cp1-path-len - 1) j++} {
         if (&&, cp1-path[j] == ''., cp1-path[j + 1] == ''/) {
            print-usage(bin, cmd);
            C.printf("Error, [cp1 file] (which is '%s') must not contain './'\n", cp1-path);
            C.exit(#failure);
         }
      }
      // loop var j = 0; {(cp1-path-len - 1) j++} {
      //    if (&&, cp1-path[j] == ''., cp1-path[j + 1] == ''/) {
      //       print-usage(bin, cmd);
      //       C.printf("Error, [cp1 file] (which is '%s') must not contain './'\n", cp1-path);
      //       C.exit(#failure);
      //    }
      // }
      if !(&&, cp1-path-len > 4, cp1-path[cp1-path-len - 4] == ''., cp1-path[cp1-path-len - 3] == ''c, cp1-path[cp1-path-len - 2] == ''p, cp1-path[cp1-path-len - 1] == ''1) {
         print-usage(bin, cmd);
         C.printf("Error, [cp1 file] (which is '%s') must be a filename that ends with '.cp1', for example: main.cp1\n", cp1-path);
         C.exit(#failure);
      }
      if !(cp1-path-input(cp1-path, cp1-path-len, bin, cmd)) {
         print-usage(bin, cmd);
			return false;
		}
   }
	return true;
}
print-command(arg-c:i32, arg-v:char[][]) {
	C.printf("Command was:");
	loop var i = 0; {(arg-c) i++} {
		C.printf(" %s", arg-v[i]);
	}
	C.printf("\n");
}
atexit-rm(path:char[]) {
   +i = .atexit-rm-c++;
   if (.atexit-rm-cap < .atexit-rm-c) {
      .atexit-rm-cap = (.atexit-rm-c << 1) + 8;
      .atexit-rm-v = C.realloc(.atexit-rm-v, .atexit-rm-cap * usz[usz]);
   }
   .atexit-rm-v[i] = path;
}
on-exit() {
   loop var i = 0; {(.atexit-rm-c) i++} {
      // C.printf("Removing %s\n", .atexit-rm-v[i]);
      C.unlink(.atexit-rm-v[i]);
   }
}
main(arg-c:intc, arg-v:char[][]):intc {
   if (false) {
      on-exit();
   }
   "atexit(_Pon_exit_0);";
   +bin = arg-v[0];
   var abs-path:char[512];
   var abs-path-len:u16 = 0;
   if (bin[0] == ''/) {
      abs-path-len = C.strlen(bin);
      C.memcpy(abs-path, bin, abs-path-len);
      abs-path[abs-path-len] = ''\0;
   } else {
      +has-slash = false;
      loop var i = 0; {() i++} {
         if (bin[i] == ''\0) { break}
         if (bin[i] == ''/) {
            has-slash = true;
            break;
         }
      }
      if (has-slash) {
         C.realpath(bin, abs-path);
      } else {
         +path = C.strdup(C.getenv("PATH"));
         +found = C.strtok(path, ":");
         +fd = C.Fd#nil;
         while (found != null) {
            C.sprintf(abs-path, "%s/%s", found, bin);
            fd = C.open(abs-path, #read);
            if (fd != #nil) {
               break;
            }
            found = C.strtok(null, ":");
         }
         if (fd == #nil) {
            C.printf("Cannot run %s because we can:T detect its absolute path\n", bin);
            C.exit(#failure);
         }
         C.free(path);
      }
   }
   +slash = C.strrchr(abs-path, ''/);
   slash[0] = ''\0;
   slash = C.strrchr(abs-path, ''/);
   slash[0] = ''\0;
   // C.printf("absolute path of the %s binary is %s\n", bin, abs-path);
   C.sprintf(.include-dir, "%s/include", abs-path);
   .include-dir-len = C.strlen(.include-dir);
   if (arg-c < 2) {
      print-commands(bin);
      C.exit(#failure);
   }
   +cmd = arg-v[1];
   if (C.strcmp(cmd, "c") == 0) {
      if (arg-c < 4) {
         print-c-usage(bin);
         C.exit(#failure);
      }
      +c-path = arg-v[2];
      +c-path-len = C.strlen(c-path);
      if !(&&, c-path-len > 2, c-path[c-path-len - 2] == ''., c-path[c-path-len - 1] == ''c) {
         print-c-usage(bin);
         C.printf("Error, [output.c] (which is '%s') must be a filename that ends with '.c', for example: main.c\n", c-path);
         C.exit(#failure);
      }
      if !(validate-cp1-paths(3, arg-c, arg-v, bin, #c)) {
			print-command(arg-c, arg-v);
         C.exit(#failure);
		}
      Sys.mkdir("cp1-tmp", 0o755);
      var ninja-path:char[24];
      C.strcpy(ninja-path, "cp1-tmp/ninja-XXXXXXXXX");
      +ninja-fd = C.mkstemp(ninja-path);
      atexit-rm(C.strdup(ninja-path));
      if (ninja-fd == #nil) {
         print-c-usage(bin);
         C.printf("Error, cannot open file for reading: %s\n", ninja-path);
         C.exit(#failure);
      }
      +ninja-f = ninja-fd.fopen("w");
      ninja-f.printf("rule parser\n");
      ninja-f.printf(" command = %s-parser $in $out\n", bin);
      ninja-f.printf("rule compiler\n");
      ninja-f.printf(" command = %s-compiler $in $out\n", bin);
      loop var i = 0; {(.cp1-path-c) i++} {
         ninja-f.printf("build cp1-tmp/%s-b: parser %s\n", .cp1-path-v[i], .cp1-path-real-v[i]);
      }
      ninja-f.printf("build %s: compiler", c-path);
      loop var i = 0; {(.cp1-path-c) i++} {
         ninja-f.printf(" cp1-tmp/%s-b", .cp1-path-v[i]);
      }
      ninja-f.printf("\n");
      ninja-f.close();
      var command:char[24 + 9];
      C.sprintf(command, "ninja -f %s", ninja-path);
      +ret = C.system(command);
      if (ret != 0) {
         C.exit(#failure);
      }
   } elif (C.strcmp(cmd, "run") == 0) {
      if (arg-c < 3) {
         print-run-usage(bin);
         C.exit(#failure);
      }
      if !(validate-cp1-paths(2, arg-c, arg-v, bin, #run)) {
			print-command(arg-c, arg-v);
         C.exit(#failure);
		}
      Sys.mkdir("cp1-tmp", 0o755);
      var c-path:char[22];
      C.strcpy(c-path, "cp1-tmp/c-XXXXXXXXX");
      +c-fd = C.mkstemp(c-path);
      if (c-fd == #nil) {
         print-run-usage(bin);
         C.printf("Error, cannot open file for reading: %s\n", c-path);
         C.exit(#failure);
      }
      c-fd.close();
      C.unlink(c-path);
      var exe-path:char[24];
      C.strcpy(exe-path, "cp1-tmp/exe-XXXXXXXXX");
      +exe-fd = C.mkstemp(exe-path);
      if (exe-fd == #nil) {
         print-run-usage(bin);
         C.printf("Error, cannot open file for reading: %s\n", exe-path);
         C.exit(#failure);
      }
      exe-fd.close();
      C.unlink(exe-path);
      c-path[19] = ''.;
      c-path[20] = ''c;
      c-path[21] = ''\0;
      atexit-rm(C.strdup(c-path));
      var ninja-path:char[24];
      C.strcpy(ninja-path, "cp1-tmp/ninja-XXXXXXXXX");
      +ninja-fd = C.mkstemp(ninja-path);
      atexit-rm(C.strdup(ninja-path));
      if (ninja-fd == #nil) {
         print-run-usage(bin);
         C.printf("Error, cannot open file for reading: %s\n", ninja-path);
         C.exit(#failure);
      }
      +ninja-f = ninja-fd.fopen("w");
      ninja-f.printf("rule parser\n");
      ninja-f.printf(" command = %s-parser $in $out\n", bin);
      ninja-f.printf("rule compiler\n");
      ninja-f.printf(" command = %s-compiler $in $out\n", bin);
      get-compiler(bin, ninja-f);
      loop var i = 0; {(.cp1-path-c) i++} {
         ninja-f.printf("build cp1-tmp/%s-b: parser %s\n", .cp1-path-v[i], .cp1-path-real-v[i]);
      }
      ninja-f.printf("build %s: compiler", c-path);
      loop var i = 0; {(.cp1-path-c) i++} {
         ninja-f.printf(" cp1-tmp/%s-b", .cp1-path-v[i]);
      }
      ninja-f.printf("\n");
      ninja-f.printf("build %s: c %s\n", exe-path, c-path);
      ninja-f.close();
      var command:char[24 + 9];
      C.sprintf(command, "ninja -f %s", ninja-path);
      +ninja-ret = C.system(command);
      if (ninja-ret != 0) {
         C.exit(#failure);
      }
      +exe-ret = C.system(exe-path);
      C.unlink(exe-path);
      if (exe-ret != 0) {
         C.exit(#failure);
      }
   } else {
      print-commands(bin);
      C.exit(#failure);
   }
   return 0;
}
