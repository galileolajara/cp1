using Cp1 = Cp1;
using C = LibC;
using C1 = LibCp1;
using Cp1 {
expr-index(left:ExprI, right-v:ExprI[], right-c:i32):ExprI {
   loop i = right-c; right-c; {
      quick-alloc-one(+(e:ExprIndex));
      ++e-idx = expr-push(e.base, #index);
      e.left = left;
      e.right = right-v[i -= 1];
   }
   return e-idx;
}
using ExprI {
   wr-index(expr:Expr, w:Wtr, header:bool) @case.wr() @inline {
      var e:ExprIndex = expr;
      e.left.wr(w, header);
      e.right.wr(w, header);
   }
   write-index(expr:Expr) @case.write() @inline {
      var e:ExprIndex = expr;
      e.left.write-value(e.left-val);
      <output ''[>;
      e.right.write-value(e.right-val);
      <output '']>;
   }
   rd-index(e-idx:ExprI, r:Rdr) @case.rd() @inline {
      ExprI.rd(+left, r);
      ExprI.rd(+right, r);
      e-idx.set-index(left, right);
   }
   set-index(e-idx:this, left:ExprI, right:ExprI) {
      quick-alloc-one(+(e:ExprIndex));
      e-idx.set(e.base, #index);
      e.left = left;
      e.right = right;
   }
   type-index(expr:Expr, at:At&) @case.type() @inline {
      var e:ExprIndex = expr;
      at = e.left.type();
   }
   value-index(e:this, reff:i8, paren:bool, v:Value, ok:bool&) @case.value() @inline {
      var expr:ExprIndex = e.ptr();
      v.type = expr.left-val.type;
      v.info.init();
      v.info.copy-from(expr.left-val.info);
      v.info.array-c -= 1;
      +c = v.info.ref-v[v.info.array-c];
      v.reff = (c + 2) - reff;
      v.info.ref-v[v.info.array-c] = reff - 1;
      v.info.count();
      if v.reff == 1 {
         v.paren = false;
      } else {
         v.paren = paren;
      }
      ok = true;
   }
   process-index(expr:Expr, ok:bool&) @case.process() @inline {
      var e:ExprIndex = expr;
      if !e.left.value(1, true, e.left-val) {
         return;
      }
      if !e.right.value(1, true, e.right-val) {
         return;
      }
      ok = true;
   }
}
 

}
