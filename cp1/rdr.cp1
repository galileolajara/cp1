using Cp1 = Cp1;
using C = LibC;
using Cp1 {
union Rdr[
   reff:ref,
   pos:usz,
   p1:u8[],
   charr:char[],
   p4:u32[],
   ] {
   n1(r:this):u8 @inline {
      +val = r.p1[0];
      r.pos++;
      return val;
   }
   n2(r:this):u32 @inline {
      +val = r.p1[0]:u32;
      val |= r.p1[1] << 8;
      r.pos += 2;
      return val;
   }
   n4(r:this):u32 @inline {
      +val = r.p1[0]:u32;
      val |= r.p1[1] << 8;
      val |= r.p1[2] << 16;
      val |= r.p1[3] << 24;
      r.pos += 4;
      return val;
   }
   id(r:this):Id @inline {
      return r.n();
   }
   include "num.c" {
      n(r:this):u32 @real-name(Fgetnum) @no-decl;
      i(r:this):i32 @real-name(Fgetint) @no-decl;
   }
   tok(r:this):Token @inline {
      return r.n1();
   }
   copy(r:this, data:ref, size:i32) @inline {
      C.memcpy(data, r.reff, size);
      r.pos += size;
   }
   b(r:this):bool @inline {
      return r.n1() != 0;
   }
   set(r:this, reff:ref) @inline {
      r.reff = reff;
   }
}
 

}
