using 'cp1 = :cp1;
using 'c = :stdc;
{at(:cp1)
{at(:stmt-space)
   wr-expr(stmt:stmt, w:wtr, header:bool) @case.wr() @inline {
      var s:stmt-expr = stmt;
      s.expr.wr(w, header);
   }
   rd-expr(space:stmt-space, r:rdr) @case.rd() @inline {
      quick-alloc-one(+(s:stmt-expr));
      s.expr.rd(r);
      space.stmt-push(s.base, .ctx-begin-row, .ctx-begin-col, .ctx-end-row, .ctx-end-col, #expr);
   }
}
{at(:stmt)
   write-expr(stmt:stmt) @case.write() @inline {
      var s:stmt-expr = stmt;
		+expr = s.expr.ptr();
		if (expr.type == #str) {
			var e:expr-str = expr;
			+n = e.first;
			loop {
				.out.printf("%.*s\n", n.len, n.buf);
				n = n.next;
				if (n == null) { break}
			}
			return;
		}
      s.expr.write();
      .out.printf(";\n");
   }
   process-expr(stmt:stmt, ok:bool&) @case.process() @inline {
      var s:stmt-expr = stmt;
      if !(s.expr.process()) {
         return;
      }
      ok = true;
   }
}
:expr-type[
   #nil, #call-method, #lvar, #gvar, #math, #assign, #bools,
   #func, #method, #fvar, #i32, #cvar, #str, #index, #unary,
   #compare, #bool, #null, #cast-fast, #ref, #char, #size-of-type,
   ]:u8 {
   wr(e:this, w:wtr) @inline {
      w.n1(e);
   }
   rd(e:this&, r:rdr) @inline {
      e = r.n1():expr-type;
   }
   cp1-name(e:this):char[] @cp1-name;
}
#debug-rd-wr:bool = true;
:expr-i[#nil = -1, #0, #1]:i32 {
   set(e:this, expr:expr, type:expr-type) @inline {
      .expr-v[e] = expr;
      expr.type = type;
   }
   ptr(e:this):expr @inline {
      return .expr-v[e];
   }
   write-value(e:this, v:value):bool {
      +expr = e.ptr();
      +ref = v.ref;
      // 'c.out.printf("write-value v.ref = %d\n", ref);
      if (v.paren) {
         if (ref <= 0) {
            .out.write("(&", 2);
         } else {
            .out.write("(*******************************", ref);
         }
      } else {
         if (ref <= 0) {
            .out.write("&", 1);
         } elif (ref > 1) {
            .out.write("*******************************", ref - 1);
         }
      }

      if (expr.type == #cast-fast) {
         var e:expr-cast-fast = expr;
         e.write-value(v);
      } else {
         e.write();
      }

      if (v.paren) {
         .out.write(")", 1);
      }
      return true;
   }
	value(e:this, ref:i32, paren:bool, v:value):bool {
      if !(e.process()) { return false}
      +expr = e.ptr();
      +ok = false;
      switch (expr.type).value(e, ref, paren, v, ok) {
         default {
            'c.out.printf("%u:%u - %u:%u: value() not implemented for #%s\n",
               .ctx-begin-row, .ctx-begin-col, .ctx-end-row, .ctx-end-col, expr.type.cp1-name());
         }
      }
      return ok;
   }
   type(e:this):at {
      if !(e.process()) { return #nil}
      +expr = e.ptr();
      +at = :at#nil;
      switch (expr.type).type(expr, at) {
         default {
            'c.out.printf("%u:%u - %u:%u: type() not implemented for #%s\n",
               .ctx-begin-row, .ctx-begin-col, .ctx-end-row, .ctx-end-col, expr.type.cp1-name());
         }
      }
      return at;
   }
   try-deduce(e-idx:this, at:at) {
      +expr = e-idx.ptr();
      switch (expr.type).try-deduce(expr, at) {
      }
   }
   wr(e:this, w:wtr, header:bool) {
      if (#debug-rd-wr) {
         w.n1(255);
      }
      if (e == #nil) {
         :expr-type#nil.wr(w);
      } else {
         +expr = e.ptr();
         expr.type.wr(w);
         switch (expr.type).wr(expr, w, header) {
            default {
               'c.out.printf("wr() was not implemented in expression #%s\n", expr.type.cp1-name());
               'c.exit(#failure);
            }
         }
      }
      if (#debug-rd-wr) {
         w.n1(255);
      }
   }
   rd(e:this&, r:rdr) {
      if (#debug-rd-wr) {
         if (r.n1() != 255) {
            'c.out.printf("Error reading expr\n");
            'c.out.flush();
            'c.exit(#failure);
         }
      }
      :expr-type.rd(+type, r);
      if (type == #nil) {
         e = #nil;
      } else {
         +e-idx = (.expr-c++):expr-i;
         if (.expr-cap <= .expr-c) {
            +old-cap = .expr-cap;
            grow(.expr-cap, .expr-c);
            realloc(.expr-v, .expr-cap, old-cap);
            realloc(.expr-is-processed, (.expr-cap + 7) >> 3, (old-cap + 7) >> 3);
         }
         e = e-idx;
         switch (type).rd(e-idx, r) {
            default {
               'c.out.printf("rd() was not implemented in expression #%s\n", type.cp1-name());
               'c.exit(#failure);
            }
         }
      }
      if (#debug-rd-wr) {
         if (r.n1() != 255) {
            'c.out.printf("Error reading expr\n");
            'c.out.flush();
            'c.exit(#failure);
         }
      }
   }
   process(e:this):bool {
      if (e == #nil) {
         'c.out.printf("%s:%u:%u - %u:%u: Processed a nil expression\n",
            .ctx-func.file.path(), .ctx-begin-row, .ctx-begin-col, .ctx-end-row, .ctx-end-col);
         return false;
      }
      +num = e:u32;
      +n3 = num >> 3;
      +n17 = 1 << (num & 7);
      if ((.expr-is-processed[n3] & n17) != #0) { return true}
      .expr-is-processed[n3] |= n17;
      +expr = e.ptr();
      // if (expr.flags & #processed) { return true}
      // expr.flags |= #processed;
      +ok = false;
      switch (expr.type).process(expr, ok) {
         default {
            'c.out.printf("%s:%u:%u - %u:%u: process() not implemented for expression #%s\n",
               .ctx-func.file.path(), .ctx-begin-row, .ctx-begin-col, .ctx-end-row, .ctx-end-col, expr.type.cp1-name());
            return false;
         }
      }
      if !(ok) {
         'c.out.printf("%s:%u:%u - %u:%u: Processing of expression #%s failed\n", .ctx-func.file.path(), .ctx-begin-row, .ctx-begin-col, .ctx-end-row, .ctx-end-col, expr.type.cp1-name());
      }
      return ok;
   }
   write(e:this) {
      +expr = e.ptr();
      switch (expr.type).write(expr) {
         default {
            'c.out.printf("%s:%u:%u - %u:%u: write() not implemented in expression #%s\n", .ctx-func.file.path(), .ctx-begin-row, .ctx-begin-col, .ctx-end-row, .ctx-end-col, expr.type.cp1-name());
         }
      }
   }
}
:expr-flags[#0, #processed = 1]:u8;
:expr(
   type:expr-type,
   flags:expr-flags,
   ) {
   write(e:this, out'c:file) {
      switch (e.type) {
         case (#call) {
            var e2:expr-call = e;
            e2.write(out);
         }
      }
   }
}
:basic-type-id[
	#root, #relative,
	#ref, #bool, #char, #intc,
	#i8, #u8,
	#i16, #u16,
	#i32, #u32,
	#i64, #u64,
	#isz, #usz,
	#f32, #f64,
	#COUNT]:u8 {
   wr(e:this, w:wtr) @inline {
      w.n1(e);
   }
   rd(e:this&, r:rdr) @inline {
      e = r.n1():basic-type-id;
   }
// write(e:this, out'c:file) {
//    switch (e) {
//       case (#ref) {
//          out.printf("void*");
//       }
//       case (#i32) {
//          out.printf("int");
//       }
//       case (#u32) {
//          out.printf("unsigned int");
//       }
//       case (#float) {
//          out.printf("float");
//       }
//       case (#bool) {
//          out.printf("bool");
//       }
//    }
// }
   cp1-name(e:this):char[] @cp1-name;
}
:expr-lvar(
   base:expr+,
   lvar:lvar,
);
:expr-char(
   base:expr+,
   value:char,
);
:expr-bool(
   base:expr+,
   value:bool,
);
:expr-null(
   base:expr+,
);
:expr-str-node(
   next:expr-str-node,
   len:i32,
   buf:char[0],
);
:expr-str(
   base:expr+,
   node-c:i32,
   first:expr-str-node,
   last:expr-str-node,
);
var expr-c:i32;
var expr-cap:i32;
var expr-v:expr[];
expr-push(e:expr, type:expr-type):expr-i {
   e.type = type;
   +e-idx = .expr-c++;
   if (.expr-cap <= .expr-c) {
      +old-cap = .expr-cap;
      grow(.expr-cap, .expr-c);
      realloc(.expr-v, .expr-cap, old-cap);
   }
   .expr-v[e-idx] = e;
   return e-idx;
}
:expr-int-data(
   base:expr+,
   value:i32,
   type:expr-int,
);
:expr-size-of-type(
   base:expr+,
   type:at,
);
 

}
