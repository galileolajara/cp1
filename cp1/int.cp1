using Cp1 = Cp1;
using (Cp1) {
ExprInt[#int, #uint, #oct, #hex]:u8;
expr-int(value:i32, type:ExprInt):ExprI {
   quick-alloc-one(+(e:ExprIntData));
   +e-idx = expr-push(e.base, #int);
   e.value = value;
   e.type = type;
   return e-idx;
}
using (ExprI) {
   wr-int(expr:Expr, w:Wtr, header:bool) @case.wr() @inline {
      var e:ExprIntData = expr;
      w.n1(e.type);
      w.n(e.value);
   }
   rd-int(e-idx:ExprI, r:Rdr) @case.rd() @inline {
      quick-alloc-one(+(e:ExprIntData));
      e-idx.set(e.base, #int);
      e.type = r.n1():ExprInt;
      e.value = r.n();
   }
   write-int(expr:Expr) @case.write() @inline {
      var e:ExprIntData = expr;
      switch e.type {
         case #int {
            .out.printf("%d", e.value);
         }
         case #uint {
            .out.printf("%uu", e.value);
         }
         case #oct {
            .out.printf("0%o", e.value);
         }
         case #hex {
            .out.printf("0x%x", e.value);
         }
      }
   }
   process-int(expr:Expr, ok:bool&) @case.process() @inline {
      ok = true;
   }
   type-int(expr:Expr, at:At&) @case.type() @inline {
      var e:ExprIntData = expr;
      if e.type == #int {
         at = basic-type(#i32);
      } else {
         at = basic-type(#u32);
      }
   }
   value-int(le:this, reff:i32, paren:bool, v:Value, ok:bool&) @case.value() @inline {
      var e:ExprIntData = le.ptr();
      if e.type == #int {
         v.type = basic-type(#i32);
      } else {
         v.type = basic-type(#u32);
      }
      v.info.init();
      v.info.array-c = 0;
      v.info.ref-v[0] = ''\0;
      v.info.star-c = 0;
      v.reff = 1;
      v.paren = false;
      ok = true;
   }
}
 

}
