using Cp1 = Cp1;
using C = LibC;
using Cp1 {
enum ExprInt[#i32, #u32, #f32, #oct, #hex, #u64]:u8;
expr-int(value:i32, type:ExprInt):ExprI {
   quick-alloc-one(+(e:ExprIntData));
   +e-idx = expr-push(e.base, #int);
   e.value.ii32 = value;
   e.type = type;
   return e-idx;
}
expr-int64(value:i64, type:ExprInt):ExprI {
   quick-alloc-one(+(e:ExprIntData));
   +e-idx = expr-push(e.base, #int);
   e.value.uu64 = value;
   e.type = type;
   return e-idx;
}
expr-f32(value:f32):ExprI {
   quick-alloc-one(+(e:ExprIntData));
   +e-idx = expr-push(e.base, #int);
   e.value.ff32 = value;
   e.type = #f32;
   return e-idx;
}
using ExprI {
   wr-int(expr:Expr, w:Wtr, header:bool) @case.wr() @inline {
      var e:ExprIntData = expr;
      w.n1(e.type:base);
      switch e.type {
         case #i32 {
            w.i(e.value.ii32);
         }
         case #f32 {
            var n:u32[] = &e.value.ff32;
            w.n4(n[0]);
         }
         case #u64 {
            w.N(e.value.uu64);
         }
         default {
            w.n(e.value.uu32);
         }
      }
   }
   rd-int(e-idx:ExprI, r:Rdr) @case.rd() @inline {
      quick-alloc-one(+(e:ExprIntData));
      e-idx.set(e.base, #int);
      e.type = r.n1():ExprInt;
      switch e.type {
         case #i32 {
            e.value.ii32 = r.i();
         }
         case #f32 {
            +n = r.n4();
            var nv:f32[] = &n;
            e.value.ff32 = nv[0];
         }
         case #u64 {
            .include-stdint = true;
            e.value.uu64 = r.N();
         }
         default {
            e.value.uu32 = r.n();
         }
      }
   }
   write-int(expr:Expr) @case.write() @inline {
      var e:ExprIntData = expr;
      switch e.type {
         case #i32 {
            <output e.value.ii32>;
         }
         case #u32 {
            <output e.value.uu32 ''u>;
         }
         case #f32 {
            <output e.value.ff32 ''f>;
         }
         case #oct {
            <output ''0 e.value.uu32, #oct>;
         }
         case #hex {
            <output "0x" e.value.uu32, #hex>;
         }
         case #u64 {
            "#ifdef _LP64";
            <output "UINT64_C(" e.value.uu64 "u)">;
            "#else";
            <output "UINT64_C(" e.value.uu64 "lu)">;
            "#endif";
         }
      }
   }
   process-int(expr:Expr, ok:bool&) @case.process() @inline {
      ok = true;
   }
   type-int(expr:Expr, at:At&) @case.type() @inline {
      var e:ExprIntData = expr;
      switch e.type {
         case #i32 {
            at = basic-type(#i32);
         }
         case #f32 {
            at = basic-type(#f32);
         }
         case #u64 {
            at = basic-type(#u64);
         }
         default {
            at = basic-type(#u32);
         }
      }
   }
   value-int(le:this, reff:i32, paren:bool, v:Value, ok:bool&) @case.value() @inline {
      var e:ExprIntData = le.ptr();
      switch e.type {
         case #i32 {
            v.type = basic-type(#i32);
         }
         case #f32 {
            v.type = basic-type(#f32);
         }
         case #u64 {
            v.type = basic-type(#u64);
         }
         default {
            v.type = basic-type(#u32);
         }
      }
      v.info.init();
      v.info.array-c = 0;
      v.info.ref-v[0] = ''\0;
      v.info.star-c = 0;
      v.reff = 1;
      v.paren = false;
      ok = true;
   }
}
 

}
