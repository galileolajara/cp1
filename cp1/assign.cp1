using Cp1 = Cp1;
using Cp1 {
enum Assign[#eq, #plus-eq, #minus-eq, #mul-eq, #div-eq,
             #lshift-eq, #rshift-eq, #and-eq, #or-eq, #xor-eq,
             ]:u8 {
   wr(s:this, w:Wtr) @inline {
      w.n1(s);
   }
   rd(s:this&, r:Rdr) @inline {
      s = r.n1():Assign;
   }
}
expr-assign(left:ExprI, right:ExprI, type:Assign):ExprI {
   quick-alloc-one(+(e:ExprAssign));
   +e-idx = expr-push(e.base, #assign);
   e.left = left;
   e.right = right;
   e.type = type;
   return e-idx;
}
using ExprI {
   wr-assign(expr:Expr, w:Wtr, header:bool) @case.wr() @inline {
      var e:ExprAssign = expr;
      e.left.wr(w, header);
      e.right.wr(w, header);
      e.type.wr(w);
   }
   write-assign(expr:Expr) @case.write() @inline {
      var e:ExprAssign = expr;
      e.left.write-value(e.left-val);
      switch e.type {
         case #eq {
            .out.printf(" = ");
         }
         case #plus-eq {
            .out.printf(" += ");
         }
         case #minus-eq {
            .out.printf(" -= ");
         }
         case #mul-eq {
            .out.printf(" *= ");
         }
         case #div-eq {
            .out.printf(" /= ");
         }
         case #lshift-eq {
            .out.printf(" <<= ");
         }
         case #rshift-eq {
            .out.printf(" >>= ");
         }
         case #and-eq {
            .out.printf(" &= ");
         }
         case #or-eq {
            .out.printf(" |= ");
         }
         case #xor-eq {
            .out.printf(" ^= ");
         }
      }
      e.right.write-value(e.right-val);
   }
   rd-assign(e-idx:ExprI, r:Rdr) @case.rd() @inline {
      quick-alloc-one(+(e:ExprAssign));
      e-idx.set(e.base, #assign);
      e.left.rd(r);
      e.right.rd(r);
      e.type.rd(r);
   }
   type-assign(expr:Expr, at:At&) @case.type() @inline {
      var e:ExprAssign = expr;
      at = e.left.type();
   }
   value-assign(e:this, reff:i8, paren:bool, v:Value, ok:bool&) @case.value() @inline {
      var expr:ExprAssign = e.ptr();
      if expr.left.value(1, paren, v) == false {
         return;
      }
      v.paren = paren;
      v.reff = reff;
      ok = true;
   }
   process-assign(expr:Expr, ok:bool&) @case.process() @inline {
      var e:ExprAssign = expr;
      +left-e = e.left.ptr();
      if left-e.type == #lvar {
         var left:ExprLvar = left-e;
         +lvar = left.lvar.ptr();
         if lvar.decl.type == #nil {
            if !e.right.value(1, true, e.right-val) {
               return;
            }
            lvar.decl.type = e.right-val.type;
            +at = lvar.decl.type.ptr();
            lvar.decl.type-info.init();
            lvar.decl.type-info.copy-from(e.right-val.info);
            e.left.value(1, true, e.left-val);
            ok = true;
            return;
         }
      }
      if !e.left.value(1, true, e.left-val) {
         return;
      }
      e.right.try-deduce(e.left.type());
      if !e.right.value(1, true, e.right-val) {
         return;
      }
      ok = true;
   }
}
 

}
