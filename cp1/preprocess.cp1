using C = LibC;
using C1 = LibCp1;
using X = Posix;
using Cp1 = Cp1;
using Cp1 {
var input-path:char[];
main(arg-c:intc, arg-v:char[][]):intc @main {
   if arg-c < 3 {
      "usage:";
      C1.stdout<
      "Usage: " arg-v[0] " [options] [.cp1 input file] [.cp1 output file]\n" $
      "Options:\n" $
      " -Ddefinename     Define a name that will yield true on #if(...) preprocessor\n">;
      C.exit(#failure);
   }
   +i = 1;
   loop arg-c - 1 {
      if arg-v[i][0] == ''- {
         if arg-v[i][1] == ''D {
            var name:char[] = &arg-v[i][2];
            +len = 0;
            loop {
               if name[len] == ''\0 {
                  break;
               }
               if (&&, name[len] >= ''a, name[len] <= ''z) {
                  // Ok
               } elif (&&, name[len] >= ''A, name[len] <= ''Z) {
                  // Ok
               } elif (&&, name[len] >= ''0, name[len] <= ''9) {
                  // Ok
                  if len == 0 {
                     C1.stdout<"Error, in option -Ddefinename, definename cannot begin with a number\n">;
                     "goto usage;";
                  }
               } elif name[len] == ''_ {
                  // Ok
               } elif name[len] == ''- {
                  // Ok
                  if len == 0 {
                     C1.stdout<"Error, in option -Ddefinename (which is " arg-v[i] "), definename' cannot begin with a dash\n">;
                     "goto usage;";
                  } elif name[len - 1] == ''- {
                     C1.stdout<"Error, in option -Ddefinename (which is " arg-v[i] "), definename' cannot contain consecutive a dashes\n">;
                     "goto usage;";
                  }
               } else {
                  C1.stdout<"Error, in option -Ddefinename (which is " arg-v[i] "), invalid character '" name[len] "' was detected in definename'\n">;
                  "goto usage;";
               }
               len++;
            }
            if len == 0 {
               C1.stdout<"Error, in option -Ddefinename (which is " arg-v[i] "), Definename' cannot be blank\n">;
               "goto usage;";
            }
            if name[len - 1] == ''- {
               C1.stdout<"Error, in option -Ddefinename (which is " arg-v[i] "), Definename' cannot end with a dash\n">;
               "goto usage;";
            }
            preprocess-def(name, len);
         } else {
            C1.stdout<"Error, invalid option '" arg-v[i][1] "'\n">;
            "goto usage;";
         }
      } else {
         break;
      }
      i++;
   }
   if (arg-c - i) != 2 {
      "goto usage;";
   }
   .input-path = arg-v[i];
   var in-data:char[];
   in-data = read-file(arg-v[i], 0, +in-size);
   if in-data == null {
      C1.stdout<"Cannot open file for reading: " arg-v[i + 1] ''\n>;
      C.exit(#failure);
   }
   preprocess-init();
   preprocess(in-data, in-size);
   if !write-file(arg-v[i + 1], in-data, in-size) {
      C1.stdout<"Cannot open file for writing: " arg-v[i + 1] ''\n>;
      C.exit(#failure);
   }
   return 0;
}
var preprocess-def-str-v:char[][];
var preprocess-def-len-v:u8[];
var preprocess-def-cap:u32;
var preprocess-def-c:u32;
preprocess-def-get(name:char[], len:u8):bool {
   loop i = 0; .preprocess-def-c; i++ {
      if (&&, .preprocess-def-len-v[i] == len, C.memcmp(.preprocess-def-str-v[i], name, len) == 0) {
         return true;
      }
   }
   return false;
}
preprocess-def(name:char[], len:u8) {
   +i = .preprocess-def-c++;
   if .preprocess-def-cap < .preprocess-def-c {
      .preprocess-def-cap = (.preprocess-def-c << 1) + 8;
      .preprocess-def-str-v = C.realloc(.preprocess-def-str-v, .preprocess-def-cap * usz[usz]);
      .preprocess-def-len-v = C.realloc(.preprocess-def-len-v, .preprocess-def-cap * usz[usz]);
   }
   .preprocess-def-str-v[i] = name;
   .preprocess-def-len-v[i] = len;
}
preprocess-init() {
"#ifdef _WIN32";
   preprocess-def("windows", 7);
"#endif";
"#ifdef __APPLE__";
   preprocess-def("apple", 5);
"#endif";
"#ifdef __linux__";
   preprocess-def("linux", 5);
"#endif";
"#ifdef __unix__";
   preprocess-def("unix", 4);
"#endif";
"#if defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__NetBSD__) || defined(__DragonFly__)";
   preprocess-def("bsd", 3);
"#endif";
"#ifdef __FreeBSD__";
   preprocess-def("freebsd", 7);
"#endif";
"#ifdef __OpenBSD__";
   preprocess-def("openbsd", 7);
"#endif";
"#ifdef __NetBSD__";
   preprocess-def("netbsd", 6);
"#endif";
"#ifdef __DragonFly__";
   preprocess-def("dragonfly", 9);
"#endif";
"#if defined(_LP64) || defined(__LP64__)";
   preprocess-def("cpu64", 5);
"#endif";
}
preprocess(in-out-data:ref&, in-out-size:usz&) {
   +preprocess = false;
   var in-data:char[] = in-out-data;
   +in-size = in-out-size;
   var r-end:Rdr+;
   r-end.reff = in-data;
   r-end.pos += in-size;
   var r:Rdr+;
   r.reff = in-data;
   var new-data = C.malloc(in-size + 1);
   var w:Wtr+;
   w.reff = new-data;

   +line = 0:u32;
   loop r.pos < r-end.pos {
      line++;
      +line-len = 0;
      loop {
         if r.p1[line-len] == ''\n {
            break;
         }
         line-len++;
      }
      if (&&, r.p1[0] == ''#, r.p1[1] == ''i, r.p1[2] == ''f, (||, r.p1[3] == ''(, (&&, r.p1[3] == ''!, r.p1[4] == ''())) {
         +if-line = line;
         w.p1[0] = ''\n;
         w.pos++;

         +start = 4;
         +invert = false;
         if r.p1[3] == ''! {
            start = 5;
            invert = true;
         }
         +rparen = -1;
         loop i = start; line-len - start; i++ {
            if r.p1[i] == '') {
               rparen = i;
               break;
            }
         }
         if rparen == -1 {
            C1.stdout<.input-path '': line ": Error in preprocessing the code, #if(...) must have a closing parenthesis ')'\n">;
            C.exit(#failure);
         }
         var def-str:char[] = &r.charr[start];
         +def-len = rparen - start;
         +ok = preprocess-def-get(def-str, def-len);
         if invert {
            ok = !ok;
         }
         r.pos += line-len + 1;
         // Get the indention of the next line
         var indention:char[] = null;
         +indention-len = -1;
         if r.pos < r-end.pos {
            +line-len = 0;
            loop {
               if r.p1[line-len] == ''\n {
                  break;
               }
               line-len++;
            }
            +first-char = 0;
            loop {
               if (||, r.p1[first-char] == '' , r.p1[first-char] == ''\t) {
                  // Skip
               } else {
                  break;
               }
               first-char++;
            }
            if ok {
               C.memcpy(w.p1, &r.p1[first-char], (line-len + 1) - first-char);
               w.pos += (line-len + 1) - first-char;
               if (&&, r.p1[first-char] == ''#, r.p1[first-char + 1] == ''i, r.p1[first-char + 2] == ''f, (||, r.p1[first-char + 3] == ''(, (&&, r.p1[first-char + 3] == ''!, r.p1[first-char + 4] == ''())) {
                  preprocess = true;
               }
            } else {
               w.p1[0] = ''\n;
               w.pos++;
            }
            indention = r.charr;
            indention-len = first-char;
            line-len++;
            r.pos += line-len;
         }
         if indention-len <= 0 {
            C1.stdout<.input-path '': line ": Error in preprocessing the code, #if(...). Its next line (line " line + 1 ") must be indented more than line " line ''\n>;
            C.exit(#failure);
         }
         line++;
         loop r.pos < r-end.pos {
            line++;
            +line-len = 0;
            loop {
               if r.p1[line-len] == ''\n {
                  break;
               }
               line-len++;
            }
            +first-char = 0;
            loop {
               if (||, r.p1[first-char] == '' , r.p1[first-char] == ''\t) {
                  // Skip
               } else {
                  break;
               }
               first-char++;
            }
            if (&&, line-len >= indention-len, C.memcmp(r.p1, indention, indention-len) == 0) {
               if ok {
                  C.memcpy(w.p1, &r.p1[indention-len], (line-len + 1) - indention-len);
                  w.pos += (line-len + 1) - indention-len;
                  if (&&, r.p1[indention-len] == ''#, r.p1[indention-len + 1] == ''i, r.p1[indention-len + 2] == ''f, (||, r.p1[indention-len + 3] == ''(, (&&, r.p1[indention-len + 3] == ''!, r.p1[indention-len + 4] == ''())) {
                     preprocess = true;
                  }
               } else {
                  w.p1[0] = ''\n;
                  w.pos++;
               }
            } else {
               if (&&, r.p1[0] == ''#, r.p1[1] == ''e, r.p1[2] == ''n, r.p1[3] == ''d, r.p1[4] == ''i, r.p1[5] == ''f, (||, r.p1[6] == '' , r.p1[6] == ''\t, r.p1[6] == ''\n)) {
                  // Ok
                  w.p1[0] = ''\n;
                  w.pos++;
                  r.pos += line-len + 1;
               } else {
                  C1.stdout<.input-path '': line ": Error, expecting '#endif' with the same indention as '#if' on line " if-line ", because line " line "'s indention is different from indention at line " if-line + 1 ''\n>;
                  C.exit(#failure);
               }
               break;
            }
            line-len++;
            r.pos += line-len;
         }
         continue;
      } else {
         line-len++;
         C.memcpy(w.p1, r.p1, line-len);
         w.pos += line-len;
      }
      r.pos += line-len;
   }

   w.p1[0] = ''\0;
   C.free(in-data);
   in-out-data = new-data;
   var w-begin:Wtr+;
   w-begin.reff = new-data;
   in-out-size = w.pos - w-begin.pos;

   if preprocess {
      preprocess(in-out-data, in-out-size);
   }
}
}
