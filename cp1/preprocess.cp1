using C = StdC;
using Cp1 = Cp1;
using (Cp1) {
var input-path:char[];
main(arg-c:intc, arg-v:char[][]):intc @main {
   if (arg-c < 3) {
      "usage:";
      C.printf("Usage: %s [options] [.cp1 input file] [.cp1 output file]\n", arg-v[0]);
      C.printf("Options:\n");
      C.printf(" -Ddefinename     Define a name that will yield true on #if(...) preprocessor\n");
      C.exit(#failure);
   }
   +i = 1;
   loop (arg-c) {
      if (arg-v[i][0] == ''-) {
         if (arg-v[i][1] == ''D) {
            var name:char[] = & arg-v[i][2];
            +len = 0;
            loop {
               if (name[len] == ''\0) {
                  break;
               }
               if (&&, name[len] >= ''a, name[len] <= ''z) {
                  // Ok
               } elif (&&, name[len] >= ''A, name[len] <= ''Z) {
                  // Ok
               } elif (&&, name[len] >= ''0, name[len] <= ''9) {
                  // Ok
                  if (len == 0) {
                     C.printf("Error, in option -Ddefinename, Definename' cannot begin with a number\n");
                     "goto usage;";
                  }
               } elif (name[len] == ''_) {
                  // Ok
               } elif (name[len] == ''-) {
                  // Ok
                  if (len == 0) {
                     C.printf("Error, in option -Ddefinename (which is %s), Definename' cannot begin with a dash\n", arg-v[i]);
                     "goto usage;";
                  } elif (name[len - 1] == ''-) {
                     C.printf("Error, in option -Ddefinename (which is %s), Definename' cannot contain consecutive a dashes\n", arg-v[i]);
                     "goto usage;";
                  }
               } else {
                  C.printf("Error, in option -Ddefinename (which is %s), invalid character '%c' was detected in Definename'\n", arg-v[i], name[len]);
                  "goto usage;";
               }
               len++;
            }
            if (len == 0) {
               C.printf("Error, in option -Ddefinename (which is %s), Definename' cannot be blank\n", arg-v[i]);
               "goto usage;";
            }
            if (name[len - 1] == ''-) {
               C.printf("Error, in option -Ddefinename (which is %s), Definename' cannot end with a dash\n", arg-v[i]);
               "goto usage;";
            }
            preprocess-def(name, len);
         } else {
            C.printf("Error, invalid option '-%c'\n", arg-v[i][1]);
            "goto usage;";
         }
      } else {
         break;
      }
      i++;
   }
   if ((arg-c - i) != 2) {
      "goto usage;";
   }
   .input-path = arg-v[i];
   if !(C.Fd.open(++in-fd, arg-v[i], #read)) {
      C.printf("Cannot open file for reading: %s\n", arg-v[i]);
      C.exit(#failure);
   }
   +in-size = in-fd.seek(0, #end);
   in-fd.seek(0, #set);
   var in-data:char[] = C.malloc(in-size);
   in-fd.read(in-data, in-size);
   in-fd.close();
   preprocess-init();
   preprocess(in-data, in-size);
   if !(C.Fd.open(++out-fd, arg-v[i + 1], #create | #truncate | #write, 0o644)) {
      C.printf("Cannot open file for writing: %s\n", arg-v[i + 1]);
      C.exit(#failure);
   }
   out-fd.write(in-data, in-size);
   out-fd.close();
   return 0;
}
var preprocess-def-str-v:char[][];
var preprocess-def-len-v:u8[];
var preprocess-def-cap:u32;
var preprocess-def-c:u32;
preprocess-def-get(name:char[], len:u8):bool {
   loop var i = 0; {(.preprocess-def-c) i++} {
      if (&&, .preprocess-def-len-v[i] == len, C.memcmp(.preprocess-def-str-v[i], name, len) == 0) {
         return true;
      }
   }
   return false;
}
preprocess-def(name:char[], len:u8) {
   // C.printf("defining preprocessor %s\n", name);
   +i = .preprocess-def-c++;
   if (.preprocess-def-cap < .preprocess-def-c) {
      .preprocess-def-cap = (.preprocess-def-c << 1) + 8;
      .preprocess-def-str-v = C.realloc(.preprocess-def-str-v, .preprocess-def-cap * usz[usz]);
      .preprocess-def-len-v = C.realloc(.preprocess-def-len-v, .preprocess-def-cap * usz[usz]);
   }
   .preprocess-def-str-v[i] = name;
   .preprocess-def-len-v[i] = len;
}
preprocess-init() {
"#ifdef _WIN32";
   preprocess-def("windows", 7);
"#endif";
"#ifdef __APPLE__";
   preprocess-def("apple", 5);
"#endif";
"#ifdef __linux__";
   preprocess-def("linux", 5);
"#endif";
"#ifdef __unix__";
   preprocess-def("unix", 4);
"#endif";
"#if defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__NetBSD__) || defined(__DragonFly__)";
   preprocess-def("bsd", 3);
"#endif";
"#ifdef __FreeBSD__";
   preprocess-def("freebsd", 7);
"#endif";
"#ifdef __OpenBSD__";
   preprocess-def("openbsd", 7);
"#endif";
"#ifdef __NetBSD__";
   preprocess-def("netbsd", 6);
"#endif";
"#ifdef __DragonFly__";
   preprocess-def("dragonfly", 9);
"#endif";
"#if defined(_LP64) || defined(__LP64__)";
   preprocess-def("cpu64", 5);
"#endif";
}
preprocess(in-out-data:ref&, in-out-size:usz&) {
   // C.printf("#if detected, preprocessing...\n");
   +preprocess = false;
   var in-data:char[] = in-out-data;
   +in-size = in-out-size;
   var r-end:Rdr+;
   r-end.reff = in-data;
   r-end.pos += in-size;
   var r:Rdr+;
   r.reff = in-data;
   var new-data = C.malloc(in-size + 1);
   var w:Wtr+;
   w.reff = new-data;

   +line = 0;
   while (r.pos < r-end.pos) {
      line++;
      +line-len = 0;
      loop {
         if (r.p1[line-len] == ''\n) {
            break;
         }
         line-len++;
      }
      // C.printf("[%.*s]\n", line-len, r.p1);
      if (&&, r.p1[0] == ''#, r.p1[1] == ''i, r.p1[2] == ''f, (||, r.p1[3] == ''(, (&&, r.p1[3] == ''!, r.p1[4] == ''())) {
         +if-line = line;
         w.p1[0] = ''\n;
         w.pos++;

         +start = 4;
         +invert = false;
         if (r.p1[3] == ''!) {
            start = 5;
            invert = true;
         }
         +rparen = -1;
         loop var i = start; {(line-len - start) i++} {
            if (r.p1[i] == '')) {
               rparen = i;
               break;
            }
         }
         if (rparen == -1) {
            C.printf("%s:%u: Error in preprocessing the code, #if(...) must have a closing parenthesis ')'\n", .input-path, line);
            C.exit(#failure);
         }
         var def-str:char[] = & r.charr[start];
         +def-len = rparen - start;
         +ok = preprocess-def-get(def-str, def-len);
         if (invert) {
            ok = !ok;
         }
         // C.printf("evaluated %.*s as %u\n", def-len, def-str, ok);
         r.pos += line-len + 1;
         // Get the indention of the next line
         var indention:char[] = null;
         +indention-len = -1;
         if (r.pos < r-end.pos) {
            +line-len = 0;
            loop {
               if (r.p1[line-len] == ''\n) {
                  break;
               }
               line-len++;
            }
            +first-char = 0;
            loop {
               if (||, r.p1[first-char] == '' , r.p1[first-char] == ''\t) {
                  // Skip
               } else {
                  break;
               }
               first-char++;
            }
            // C.printf("1. indention is [%.*s]\n", first-char, r.p1);
            if (ok) {
               C.memcpy(w.p1, & r.p1[first-char], (line-len + 1) - first-char);
               w.pos += (line-len + 1) - first-char;
               if (&&, r.p1[first-char] == ''#, r.p1[first-char + 1] == ''i, r.p1[first-char + 2] == ''f, (||, r.p1[first-char + 3] == ''(, (&&, r.p1[first-char + 3] == ''!, r.p1[first-char + 4] == ''())) {
                  preprocess = true;
               }
            } else {
               w.p1[0] = ''\n;
               w.pos++;
            }
            indention = r.charr;
            indention-len = first-char;
            line-len++;
            r.pos += line-len;
         }
         if (indention-len <= 0) {
            C.printf("%s:%u: Error in preprocessing the code, #if(...). Its next line (line %u) must be indented more than line %u\n", .input-path, line, line + 1, line);
            C.exit(#failure);
         }
         line++;
         while (r.pos < r-end.pos) {
            line++;
            +line-len = 0;
            loop {
               if (r.p1[line-len] == ''\n) {
                  break;
               }
               line-len++;
            }
            +first-char = 0;
            loop {
               if (||, r.p1[first-char] == '' , r.p1[first-char] == ''\t) {
                  // Skip
               } else {
                  break;
               }
               first-char++;
            }
            // C.printf("2. indention is [%.*s]\n", first-char, r.p1);
            if (&&, line-len >= indention-len, C.memcmp(r.p1, indention, indention-len) == 0) {
               if (ok) {
                  C.memcpy(w.p1, & r.p1[indention-len], (line-len + 1) - indention-len);
                  w.pos += (line-len + 1) - indention-len;
                  if (&&, r.p1[indention-len] == ''#, r.p1[indention-len + 1] == ''i, r.p1[indention-len + 2] == ''f, (||, r.p1[indention-len + 3] == ''(, (&&, r.p1[indention-len + 3] == ''!, r.p1[indention-len + 4] == ''())) {
                     preprocess = true;
                  }
               } else {
                  w.p1[0] = ''\n;
                  w.pos++;
               }
            } else {
               if (&&, r.p1[0] == ''#, r.p1[1] == ''e, r.p1[2] == ''n, r.p1[3] == ''d, r.p1[4] == ''i, r.p1[5] == ''f, (||, r.p1[6] == '' , r.p1[6] == ''\t, r.p1[6] == ''\n)) {
                  // Ok
                  w.p1[0] = ''\n;
                  w.pos++;
                  r.pos += line-len + 1;
               } else {
                  C.printf("%s:%u: Error, expecting '#endif' with the same indention as '#if' on line %u, because line %u:S indention is different from indention at line %u\n", .input-path, line, if-line, line, if-line + 1);
                  C.exit(#failure);
               }
               break;
            }
            line-len++;
            r.pos += line-len;
         }
         continue;
      } else {
         line-len++;
         C.memcpy(w.p1, r.p1, line-len);
         w.pos += line-len;
      }
      r.pos += line-len;
   }

   w.p1[0] = ''\0;
   C.free(in-data);
   in-out-data = new-data;
   var w-begin:Wtr+;
   w-begin.reff = new-data;
   in-out-size = w.pos - w-begin.pos;

   if (preprocess) {
      preprocess(in-out-data, in-out-size);
   } else {
      // var path:char[256];
      // C.sprintf(path, "%s-p", .input-path);
      // C.printf("writing the preprocessed file to %s\n", path);
      // C.Fd.open(+fd, path, #write | #truncate | #create, 0o644);
      // fd.write(new-data, w.pos - w-begin.pos);
      // fd.close();
   }
}
}
