using Cp1 = Cp1;
using C = LibC;
using Cp1 {
farg-process(e:ExprI, ca-ref:i8, ca-value:Value, fd-arg:DeclVarData, base-at:At):bool {
   +ce = e.ptr();
   var r:i32;
   if ca-ref != 0 {
      r = 1 + ca-ref;
   } else {
      r = 1;
      r += fd-arg.type-info.ref-v[fd-arg.type-info.array-c]:i32;
   }
   // C.out.printf("r %d, %d %d %d\n", r, j, fd-arg.type-info.array-c, fd-arg.type-info.ref-v[fd-arg.type-info.array-c]);
   if ce.type == #lvar {
      var ve:ExprLvar = ce;
      +lvar = ve.lvar.ptr();
      +vd = lvar.decl;
      if vd.type == #nil {
         if (lvar.flags & #set-expr) == #0 {
            // if vd.type-info.array-c != fd-arg.type-info.array-c {
            //    C.err.printf("%s:%u:%u: Type deduction failed for lvar '%s', array dimension mismatch\n", .ctx-func.file.path(), lvar.row, lvar.col, vd.name.str());
            //    return false;
            // }
            vd.type = fd-arg.type;
            vd.type-info.init();
            vd.type-info.copy-from(fd-arg.type-info);
            if fd-arg.type-info.built-in {
               vd.type-info.built-in = true;
               vd.type-info.ref-v[0] = ''\0;
            } elif vd.type-info.ref-v[0] + vd.type.pointer() {
               vd.type-info.ref-v[vd.type-info.array-c] -= 1:char;
               vd.type-info.star-c -= 1;
            }
         }
      }
   }
   // fd-arg.validate(base-at);
   e.try-deduce(fd-arg.type);
   if !e.value(r, false, ca-value) { return false }
   return true;
}
using ExprI {
   value-func(e:this, reff:i32, paren:bool, v:Value, ok:bool&) @case.value() @inline {
      var expr:ExprFunc = e.ptr();
      +f = expr.func-idx.ptr();
      v.set(reff, paren, f.decl.type, f.decl.type-info);
      if v.reff == 1 {
         v.paren = false;
      }
      ok = true;
   }
   type-func(expr:Expr, at:At&) @case.type() @inline {
      var e:ExprFunc = expr;
      at = e.func-idx.ptr().decl.type;
   }
   value-method(e:this, reff:i32, paren:bool, v:Value, ok:bool&) @case.value() @inline {
      var expr:ExprMethod = e.ptr();
      +f = expr.func-idx.ptr();
      v.set(reff, paren, f.decl.type, f.decl.type-info);
      if v.reff == 1 {
         v.paren = false;
      }
      ok = true;
   }
   type-method(expr:Expr, at:At&) @case.type() @inline {
      var e:ExprMethod = expr;
      at = e.func-idx.ptr().decl.type;
   }
   write-method(expr:Expr) @case.write() @inline {
      var e:ExprMethod = expr;
      +f = e.func-idx.ptr();
      f.write();
      .out.printf("(");
      +first = true;
      +i = 0;
      loop ; f.this-idx; i++ {
         if first {
            first = false;
         } else {
            .out.printf(", ");
         }
         +ca = e.carg-v[i];
         ca.expr.write-value(ca.value);
      }
      if first {
         first = false;
      } else {
         .out.printf(", ");
      }
      e.thiss.write-value(e.this-value);
      loop ; e.carg-c - f.this-idx; i++ {
         .out.printf(", ");
         +ca = e.carg-v[i];
         ca.expr.write-value(ca.value);
      }
      .out.printf(")");
   }
   wr-method(expr:Expr, w:Wtr, header:bool) @case.wr() @inline {
      var e:ExprMethod = expr;
      e.thiss.wr(w, header);
      e.func-name.wr(w, header);
      w.n1(e.group-c);
      loop i = 0; e.group-c; i++ {
         w.n1(e.group-v[i]);
      }
      w.n1(e.carg-c);
      loop i = 0; e.carg-c; i++ {
         e.carg-v[i].expr.wr(w, header);
      }
   }
   rd-method(e-idx:ExprI, r:Rdr) @case.rd() @inline {
      ExprI.rd(+this-expr, r);
      Id.rd(+func-name, r);
      +group-c = r.n1();
      var group-v:i8[#expr-carg-group-limit];
      loop i = 0; group-c; i++ {
         group-v[i] = r.n1();
      }
      +carg-c = r.n1();
      quick-alloc-plus(+(e:ExprMethod), Carg[usz] * carg-c);
      e-idx.set(e.base, #method);
      e.thiss = this-expr;
      e.func-name = func-name;
      e.group-c = group-c;
      loop i = 0; group-c; i++ {
         e.group-v[i] = group-v[i];
      }
      e.carg-c = carg-c;
      loop i = 0; carg-c; i++ {
         e.carg-v[i].expr.rd(r);
      }
   }
   process-method(expr:Expr, ok:bool&) @case.process() @inline {
      var e:ExprMethod = expr;
      +func-name = e.func-name;
      +group-c = e.group-c;
      +group-v = e.group-v;
      +carg-c = e.carg-c;
      +carg-c1 = carg-c + 1;
      +at-idx = e.thiss.type();
      if at-idx == #nil {
         C.out.printf("%s:%u:%u - %u:%u: Cannot call method %s on a value without a type\n", .ctx-func.file.path(), .ctx-begin-row, .ctx-begin-col, .ctx-end-row, .ctx-end-col, func-name.str());
         return;
      }
      +at = at-idx.ptr();
      var method-c, method-v;
      if at.type == #basic {
         +t = .basic-type[at.name.basic];
         method-c = t.method-c;
         method-v = t.method-v;
      } else {
         if (&&, at.decl.structt == #nil, at.type != #basic, at.type != #module) {
            C.out.printf("%s:%u:%u - %u:%u: Cannot call method %s because the type :%s is not defined\n", .ctx-func.file.path(), .ctx-begin-row, .ctx-begin-col, .ctx-end-row, .ctx-end-col, func-name.str(), at.name.id.str());
            return;
         }
         if at.def == #struct {
            +t = at.decl.structt.ptr();
            method-c = t.method-c;
            method-v = t.method-v;
         } elif at.def == #enum {
            +t = at.decl.enumm.ptr();
            method-c = t.method-c;
            method-v = t.method-v;
         }
      }
      +found = -1;
      +similar-c = 0;
      loop i = 0; method-c; i++ {
         +f-idx = method-v[i];
         +f = f-idx.ptr();
         if f.decl.name != func-name { continue }
         found = i;
         similar-c++;
         if f.group-c != group-c { continue }
         +match = true;
         if (f.flags & #var-args) != #0 {
            if f.farg-c > carg-c1 { continue }
            loop j = 0; group-c - 1; j++ {
               if f.this-group == j {
                  if f.group-v[j] != (group-v[j] + 1) {
                     match = false;
                     break;
                  }
               } else {
                  if f.group-v[j] != group-v[j] {
                     match = false;
                     break;
                  }
               }
            }
            if match {
               +j = group-c - 1;
               if f.this-group == j {
                  if f.group-v[j] > (group-v[j] + 1) {
                     match = false;
                  }
               } else {
                  if f.group-v[j] > group-v[j] {
                     match = false;
                  }
               }
            }
         } else {
            if f.farg-c != carg-c1 { continue }
            loop j = 0; group-c; j++ {
               if f.this-group == j {
                  if f.group-v[j] != (group-v[j] + 1) {
                     match = false;
                     break;
                  }
               } else {
                  if f.group-v[j] != group-v[j] {
                     match = false;
                     break;
                  }
               }
            }
         }
         if !match { continue }
         f-idx.process-later();
         +f-at = f.at;
         +j = 0;
         +k = 0;
         loop ; f.this-idx; j++; k++ {
            +ca = e.carg-v[k];
            if !farg-process(ca.expr, ca.reff, ca.value, f.farg-v[j].decl, f-at) { return }
         }
         if !farg-process(e.thiss, 0, e.this-value, f.farg-v[j++].decl, f-at) { return }
         loop ; (f.farg-c - 1) - f.this-idx; j++; k++ {
            +ca = e.carg-v[k];
            if !farg-process(ca.expr, ca.reff, ca.value, f.farg-v[j].decl, f-at) { return }
         }
         e.func-idx = f-idx;
         if (f.flags & #var-args) != #0 {
            loop ; e.carg-c - k; k++ {
               +ca = e.carg-v[k];
               var r:i32;
               if ca.reff {
                  r = 1 + ca.reff;
               } else {
                  r = 1;
               }
               if !ca.expr.value(r, false, ca.value) { return }
            }
         }
         ok = true;
         return;
      }
      C.out.printf("%s:%u:%u - %u:%u: Cannot find method %s with %u argument/s\n", .ctx-func.file.path(), .ctx-begin-row, .ctx-begin-col, .ctx-end-row, .ctx-end-col, func-name.str(), carg-c);
      if found != -1 {
         C.out.printf("But found %u functions with different no. of argument/s:\n", similar-c);
         loop i = 0; at.func-c; i++ {
            +f-idx = at.func-v[i];
            +f = .func-v[f-idx];
            if f.decl.name == func-name {
               C.out.printf("- :%s with %u args\n", func-name.str(), f.farg-c);
            }
         }
      }
   }
   write-func(expr:Expr) @case.write() @inline {
      var e:ExprFunc = expr;
      +f = e.func-idx.ptr();
      f.write();
      .out.printf("(");
      loop i = 0; e.carg-c; i++ {
         if i != 0 {
            .out.printf(", ");
         }
         e.carg-v[i].expr.write-value(e.carg-v[i].value);
      }
      .out.printf(")");
   }
   wr-func(expr:Expr, w:Wtr, header:bool) @case.wr() @inline {
      var e:ExprFunc = expr;
      e.at.wr(w, header);
      e.func-name.wr(w, header);
      w.n1(e.group-c);
      loop i = 0; e.group-c; i++ {
         w.n1(e.group-v[i]);
      }
      w.n1(e.carg-c);
      loop i = 0; e.carg-c; i++ {
         e.carg-v[i].expr.wr(w, header);
      }
   }
   rd-func(e-idx:ExprI, r:Rdr) @case.rd() @inline {
      At.rd(+at-idx, r);
      Id.rd(+func-name, r);
      +group-c = r.n1();
      var group-v:i8[#expr-carg-group-limit];
      loop i = 0; group-c; i++ {
         group-v[i] = r.n1();
      }
      +carg-c = r.n1();

      quick-alloc-plus(+(e:ExprFunc), Carg[usz] * carg-c);
      e-idx.set(e.base, #func);
      e.at = at-idx;
      e.func-name = func-name;
      e.group-c = group-c;
      loop i = 0; group-c; i++ {
         e.group-v[i] = group-v[i];
      }
      e.carg-c = carg-c;
      loop i = 0; carg-c; i++ {
         e.carg-v[i].expr.rd(r);
      }
   }
   process-func(expr:Expr, ok:bool&) @case.process() @inline {
      var e:ExprFunc = expr;
      +func-name = e.func-name;
      +carg-c = e.carg-c;
      +group-c = e.group-c;
      +group-v = e.group-v;
      +at-idx = e.at;
      +try-parent = false;
      if at-idx == #nil {
         at-idx = .ctx-func.at;
         try-parent = true;
      } else {
         at-idx = at-validate(at-idx, .ctx-func.at, .ctx-func.file, .ctx-begin-row, .ctx-begin-col);
         e.at = at-idx;
      }
      loop {
         +at = at-idx.ptr();
         // if (&&, at.decl.struct == #nil, at.type != #basic, at.type != #module) {
         //    C.out.printf("%s:%u:%u - %u:%u: Cannot call function %s because the type :%s is not defined\n", .ctx-func.file.path(), .ctx-begin-row, .ctx-begin-col, .ctx-end-row, .ctx-end-col, func-name.str(), at.name.id.str());
         //    return;
         // }
         // +found = -1;
         // +similar-c = 0;
         // C.out.printf("searching from %u functions\n", at.func-c);
         loop i = 0; at.func-c; i++ {
            +f-idx = at.func-v[i];
            +f = f-idx.ptr();
            if f.decl.name != func-name { continue }
            // found = i;
            // similar-c++;
            if f.group-c != group-c { continue }
            +match = true;
            if (f.flags & #var-args) != #0 {
               if f.farg-c > carg-c { continue }
               loop j = 0; group-c - 1; j++ {
                  if f.group-v[j] != group-v[j] {
                     match = false;
                     break;
                  }
               }
               if match {
                  +j = group-c - 1;
                  if f.group-v[j] > group-v[j] {
                     match = false;
                  }
               }
            } else {
               if f.farg-c != carg-c { continue }
               loop j = 0; group-c; j++ {
                  if f.group-v[j] != group-v[j] {
                     match = false;
                     break;
                  }
               }
            }
            if !match { continue }
            f-idx.process-later();
            +f-at = f.at;
            +j = 0;
            loop ; f.farg-c; j++ {
               +ca = e.carg-v[j];
               if !farg-process(ca.expr, ca.reff, ca.value, f.farg-v[j].decl, f-at) { return }
            }
            e.func-idx = f-idx;
            if (f.flags & #var-args) != #0 {
               loop ; e.carg-c - j; j++ {
                  +ca = e.carg-v[j];
                  var r:i32;
                  if ca.reff {
                     r = 1 + ca.reff;
                  } else {
                     r = 1;
                  }
                  if !ca.expr.value(r, false, ca.value) { return }
               }
            }
            e.func-idx = f-idx;
            ok = true;
            return;
         }
         if !try-parent { break }
         if at-idx == #root { break }
         at-idx = at.parent;
      }
      C.out.printf("%s:%u:%u - %u:%u: Cannot find function %s with %u argument/s\n", .ctx-func.file.path(), .ctx-begin-row, .ctx-begin-col, .ctx-end-row, .ctx-end-col, func-name.str(), carg-c);
      // if found != -1 {
      //    C.out.printf("But found %u functions with different no. of argument/s:\n", similar-c);
      //    loop i = 0; at.func-c; i++ {
      //       +f-idx = at.func-v[i];
      //       +f = .func-v[f-idx];
      //       if f.decl.name == func-name {
      //          C.out.printf("- :%s with %u args\n", func-name.str(), f.farg-c);
      //       }
      //    }
      // }
   }
   process-case-func(expr:Expr, f-idx:Func):bool @inline {
      var e:ExprFunc = expr;
      +func-name = e.func-name;
      +carg-c = e.carg-c;
      +group-c = e.group-c;
      +group-v = e.group-v;
      +at = .ctx-func.at.ptr();
      f-idx.process-later();
      +f = f-idx.ptr();
      +f-at = f.at;
      +j = 0;
      loop ; f.farg-c; j++ {
         +ca = e.carg-v[j];
         if !farg-process(ca.expr, ca.reff, ca.value, f.farg-v[j].decl, f-at) { return false }
      }
      e.func-idx = f-idx;
      if (f.flags & #var-args) != #0 {
         loop ; e.carg-c - j; j++ {
            +ca = e.carg-v[j];
            var r:i32;
            if ca.reff {
               r = 1 + ca.reff;
            } else {
               r = 1;
            }
            if !ca.expr.value(r, false, ca.value) { return false }
         }
      }
      e.func-idx = f-idx;
      return true;
   }
}
 

}
