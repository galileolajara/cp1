using Cp1 = Cp1;
using C = StdC;
using (Cp1) {
var include-stdint:bool;
var include-stdbool:bool;
var include-stddef:bool;
var expr-is-processed:u8[];
var func-head-outputted-c:i32;
var func-head-outputted-v:Func[];
var func-body-outputted-c:i32;
var func-body-outputted-v:Func[];
BasicType(
   method-c:i32,
   method-cap:i32,
   method-v:Func[],
);
var basic-type:BasicType+[BasicTypeId#COUNT];
basic-type(t:BasicTypeId):At @inline {
   return t;
}
var ctx-begin-row:i32;
var ctx-begin-col:i32;
var ctx-end-row:i32;
var ctx-end-col:i32;
var ctx-func:DeclFunc;
var ctx-func-id:Func;
var file-c:File;
var file-cap:File;
var file-v:FileData+[];
File[#nil = -1, #0]:i32 {
   ptr(f:this):FileData @inline {
      return .file-v[f];
   }
   path(f:this):char[] @inline {
      return f.ptr().path;
   }
}
FileData(
   path:char[],
   data:ref,
   id-table:Id[],
   at-table:At[],
   cvar-table:Cvar[],
);
var id-table:Id[];
var include-table-cap:i32;
var include-table:Include[];
var at-table:At[];
var cvar-table:Cvar[];
id-add(id-len:u8, id-str:char[]):Id {
   +found = .id-map.get-or-insert(id-str, id-len, .id-c);
   if (found != -1) { return found}
   // loop j = 0; (.id-c) j++ {
   //    if (&&, .id-len-v[j] == id-len, C.memcmp(.id-str-v[j], id-str, id-len) == 0) {
   //       return j;
   //    }
   // }
   +id-idx = .id-c++;
   if (.id-cap <= .id-c) {
      +old-cap = .id-cap;
      grow(.id-cap, .id-c);
      realloc(.id-len-v, .id-cap, old-cap);
      realloc(.id-str-v, .id-cap, old-cap);
   }
   .id-len-v[id-idx] = id-len;
   .id-str-v[id-idx] = id-str;
   return id-idx;
}
read(in-path:char[]) {
   // C.out.printf("reading %s -------------------\n", in-path);
   if !(C.Fd.open(++in-fd, in-path, #read)) {
      C.out.printf("Cannot open file for reading: %s\n", in-path);
      C.exit(#failure);
   }
   +in-size = in-fd.seek(0, #end);
	if (in-size == 0) {
		// Retry after 1 second
		C.sleep(1);
		in-size = in-fd.seek(0, #end);
		if (in-size == 0) {
			C.out.printf("Error, file is blank (zero bytes): %s\n", in-path);
			C.exit(#failure);
		}
	}
   var r-begin:Rdr+;
   // if (true) {
   //    r-begin.ref = in-fd.map(null, in-size, #read, #shared, 0);
   // } else {
      r-begin.reff = C.malloc(in-size);
      in-fd.seek(0, #set);
      in-fd.read(r-begin.reff, in-size);
   // }
   in-fd.close();

   +file-idx = .file-c++;
   if (.file-cap <= .file-c) {
      +old-cap = .file-cap;
      grow(.file-cap, .file-c);
      realloc(.file-v, .file-cap, old-cap);
   }
   +file = .file-v[file-idx];
   file.path = in-path;
   file.data = r-begin.reff;

   var r:Rdr+;
   r.reff = r-begin.reff;
   if (true) {
      +id-c = r.n();
      // C.out.printf("There are %u ids\n", id-c);
      quick-alloc-arr(.id-table, id-c);
      file.id-table = .id-table;
      loop i = 0; (id-c) i++ {
         +id-len = r.n1();
         +id-str = r.charr;
         r.pos += id-len + 1;
         .id-table[i] = id-add(id-len, id-str);
      }
   }
   if (true) {
      +include-c = r.n();
      // C.out.printf("There are %u includes\n", include-c);
      if (.include-table-cap <= include-c) {
         +old-cap = .include-table-cap;
         grow(.include-table-cap, include-c);
         realloc(.include-table, .include-table-cap, old-cap);
      }
      loop i = 0; (include-c) i++ {
         +include-len = r.n1();
         +include-str = r.reff;
         r.pos += include-len + 1;
         +found = .include-map.get-or-insert(include-str, include-len, .include-c);
         // +found = -1;
         // loop j = 0; (.include-c) j++ {
         //    if (&&, .include-len-v[j] == include-len, C.memcmp(.include-str-v[j], include-str, include-len) == 0) {
         //       found = j;
         //       break;
         //    }
         // }
         if (found == -1) {
            +include-idx = .include-c++;
            if (.include-cap <= .include-c) {
               +old-cap = .include-cap;
               grow(.include-cap, .include-c);
               realloc(.include-len-v, .include-cap, old-cap);
               realloc(.include-str-v, .include-cap, old-cap);
            }
            .include-len-v[include-idx] = include-len;
            .include-str-v[include-idx] = include-str;
            .include-table[i] = include-idx:Include;
         } else {
            .include-table[i] = found:Include;
         }
      }
   }
   if (true) {
      +at-c = r.n();
      // C.out.printf("There are %u at\n", at-c);
      quick-alloc-arr(.at-table, at-c);
      file.at-table = .at-table;
      var at-type:NameType;
      loop i = 0; (at-c) i++ {
         at-type.rd(r);
         if (at-type == #basic) {
            BasicTypeId.rd(+basic, r);
            .at-table[i] = basic-type(basic);
         } else {
            At.rd(+at-parent, r);
            Id.rd(+at-name, r);
            // C.out.printf("read at type %u %s %s\n", at-type, at-type.cp1-name(), at-name.str());
            // C.out.printf("- parent %u\n", at-parent);
            // C.out.printf("- name %s\n", at-name.str());
            +found = .at-map.get-or-insert(at-parent, at-type, at-name, .at-c);
            // loop j = 0; (.at-c) j++ {
            //    +at = .at-v[j];
            //    if (&&, at.parent == at-parent, at.type == at-type, at.name.id == at-name) {
            //       found = j;
            //       break;
            //    }
            // }
            // C.out.printf("found %d\n", found);
            // C.out.printf("at %u, name-c %u, found %d\n", i, at-name-c, found);
            if (found == -1) {
               +at-idx = .at-c++;
               if (.at-cap <= .at-c) {
                  +old-cap = .at-cap;
                  grow(.at-cap, .at-c);
                  realloc(.at-v, .at-cap, old-cap);
               }
               +at = .at-v[at-idx];
               at.init(at-type, at-parent, at-name);
               .at-table[i] = at-idx:At;
            } else {
               .at-table[i] = found:At;
            }
         }
      }
   }
   if (true) {
      +cvar-c = r.n():Cvar;
      quick-alloc-arr(.cvar-table, cvar-c);
      file.cvar-table = .cvar-table;
      // C.out.printf("There are %u cvars\n", cvar-c);
      C.out.flush();
      +cvar-begin = .cvar-c;
      .cvar-c += cvar-c;
      if (.cvar-cap <= .cvar-c) {
         +old-cap = .cvar-cap;
         grow(.cvar-cap, .cvar-c);
         realloc(.cvar-v, .cvar-cap, old-cap);
      }
      // malloc(.cvar-table, .cvar-c);
      // file.cvar-table = .cvar-table;
      loop cvar-idx = cvar-begin, i = 0; (cvar-c) cvar-idx++; i++ {
         +cvar = .cvar-v[cvar-idx];
         cvar.file = file-idx;
         cvar.include.rd(r);
         cvar.at.rd(r);
         cvar.decl.rd(r);
         cvar.flags.rd(r);
         // .cvar-table[i] = cvar-idx;

         +at = cvar.at.ptr();
         +at-cvar-idx = at.cvar-c++;
         if (at.cvar-cap <= at.cvar-c) {
            +old-cap = at.cvar-cap;
            grow(at.cvar-cap, at.cvar-c);
            realloc(at.cvar-v, at.cvar-cap, old-cap);
         }
         at.cvar-v[at-cvar-idx] = cvar-idx;
         if ((cvar.flags & #set-expr) != #0) {
            cvar.expr-set.rd(r);
         } else {
            cvar.last-cvar.rd(r);
         }
         .cvar-table[i] = cvar-idx;
      }
   }
   if (true) {
      +gvar-c = r.n():Gvar;
      // C.out.printf("There are %u gvars\n", gvar-c);
      C.out.flush();
      +gvar-begin = .gvar-c;
      .gvar-c += gvar-c;
      if (.gvar-cap <= .gvar-c) {
         +old-cap = .gvar-cap;
         grow(.gvar-cap, .gvar-c);
         realloc(.gvar-v, .gvar-cap, old-cap);
      }
      // malloc(.gvar-table, .gvar-c);
      // file.gvar-table = .gvar-table;
      loop gvar-idx = gvar-begin, i = 0; (gvar-c) gvar-idx++; i++ {
         +gvar = .gvar-v[gvar-idx];
         gvar.include.rd(r);
         gvar.at.rd(r);
         gvar.decl.rd(r);
         // .gvar-table[i] = gvar-idx;

         +at = gvar.at.ptr();
         +at-gvar-idx = at.gvar-c++;
         if (at.gvar-cap <= at.gvar-c) {
            +old-cap = at.gvar-cap;
            grow(at.gvar-cap, at.gvar-c);
            realloc(at.gvar-v, at.gvar-cap, old-cap);
         }
         at.gvar-v[at-gvar-idx] = gvar-idx;
      }
   }
   +enum-c = r.n():Enum;
   // C.out.printf("There are %u enums\n", enum-c);
      C.out.flush();
   +e-idx-begin = .enum-c;
   .enum-c += enum-c;
   if (.enum-cap <= .enum-c) {
      +old-cap = .enum-cap;
      grow(.enum-cap, .enum-c);
      realloc(.enum-v, .enum-cap, old-cap);
   }
   loop e-idx = e-idx-begin; (enum-c) e-idx++ {
      var e:EnumData;
      quick-alloc-one(e);
      .enum-v[e-idx] = e;
      e.file = file-idx;
      e.begin-row = r.n();
      e.begin-col = r.n();
      e.end-row = r.n();
      e.end-col = r.n();
      e.include.rd(r);
      e.at.rd(r);
      e.base-type.rd(r);
      e.flags.rd(r);
      +at-i = e.at;
      +at = at-i.ptr();
      if (at.def != #undefined) {
         C.out.printf("Cannot define struct :%s because it was already defined as ", at.name.id.str());
         if (at.def == #struct) {
            C.out.printf("struct\n");
         }
      }
      at.decl.enum = e-idx;
      at.def = #enum;
      if ((e.flags & #real-name) != #0) {
         e.real-name.rd(r);
      } else {
         e.real-name = #nil;
      }
      // C.out.printf("printing at of enum:\n");
      // loop {
      //    if (at.type == #basic) {
      //       C.out.printf("- #basic #%s\n", at.name.basic.cp1-name());
      //    } else {
      //       C.out.printf("- #%s %s\n", at.type.cp1-name(), at.name.id.str());
      //    }
      //    if (at.parent == #root) { break}
      //    at = at.parent.ptr();
      // }
   }
   +struct-c = r.n():Struct;
   // C.out.printf("There are %u structs\n", struct-c);
   +s-idx-begin = .struct-c;
   .struct-c += struct-c;
   if (.struct-cap <= .struct-c) {
      +old-cap = .struct-cap;
      grow(.struct-cap, .struct-c);
      realloc(.struct-v, .struct-cap, old-cap);
   }
   loop s-idx = s-idx-begin; (struct-c) s-idx++ {
      +fvar-c = r.n1();
      var s:StructData;
      quick-alloc-plus(s, FvarData[usz] * fvar-c);
      .struct-v[s-idx] = s;
      s.file = file-idx;
      s.fvar-c = fvar-c;
      s.begin-row = r.n();
      s.begin-col = r.n();
      s.end-row = r.n();
      s.end-col = r.n();
      s.include.rd(r);
      s.at.rd(r);
      s.flags.rd(r);
      +at-i = s.at;
      +at = at-i.ptr();
      if (at.def != #undefined) {
         C.out.printf("Cannot define struct :%s because it was already defined as ", at.name.id.str());
         if (at.def == #enum) {
            C.out.printf("enum\n");
         }
      }
      // C.out.printf("at(%d) is a struct: %s, parent is %d\n", at-i, at.name.id.str(), at.parent);
      at.decl.struct = s-idx;
      at.def = #struct;
      // s.name.rd(r);
      // C.out.printf("%u:%u - %u:%u: /%s(", s.begin-row, s.begin-col, s.end-row, s.end-col, s.name.str());
      loop j = 0; (fvar-c) j++ {
         +fvar = s.fvar-v[j];
         fvar.decl.rd(r);
         // if (j != 0) {
         //    C.out.printf(", ");
         // }
         // fvar.decl.type.write(C.out);
         // C.out.printf(" %s", fvar.decl.name.str());
      }
      // C.out.printf(")\n");
      if ((s.flags & #real-name) != #0) {
         s.real-name.rd(r);
      } else {
         s.real-name = #nil;
      }
   }
   +func-c = r.n():Func;
   // C.out.printf("There are %u functions\n", func-c);
      C.out.flush();
   +f-idx-begin = .func-c;
   .func-c += func-c;
   if (.func-cap <= .func-c) {
      +old-cap = .func-cap;
      grow(.func-cap, .func-c);
      realloc(.func-v, .func-cap, old-cap);
   }
   loop f-idx = f-idx-begin; (func-c) f-idx++ {
      +farg-c = r.n1();
      var f:DeclFunc;
      quick-alloc-plus(f, Farg[usz] * farg-c);
      .func-v[f-idx] = f;
      f.farg-c = farg-c;
      f.file = file-idx;
      f.begin-row = r.n();
      f.begin-col = r.n();
      f.end-row = r.n();
      f.end-col = r.n();
      f.include.rd(r);
      f.at.rd(r);
      +at-i = f.at;
      f.decl.rd(r);
      var r0:Rdr+;
      r0.reff = f;
      // C.out.printf("func :%s was declared on an at:\n", f.decl.name.str());
      // if (true) {
      //    +at-i = f.at;
      //    loop {
      //       +at = at-i.ptr();
      //       C.out.printf("- %s\n", at.name.id.str());
      //       at-i = at.parent;
      //       if (at-i == #root) { break}
      //    }
      // }
      // C.out.printf("%u:%u - %u:%u: :%s(", f.begin-row, f.begin-col, f.end-row, f.end-col, f.decl.name.str());
      f.lvar-c = #0;
      .ctx-func = f;
      .ctx-func-id = f-idx;
      // grow(f.lvar-cap, farg-c);
      // malloc(f.lvar-v, f.lvar-cap);
      loop j = 0; (farg-c) j++ {
         +farg = f.farg-v[j];
         farg.rd(r);
         // if (j != 0) {
         //    C.out.printf(", ");
         // }
         // farg.decl.type.write(C.out);
         // C.out.printf(" %s", farg.decl.name.str());
      }
      +this-idx = r.n1():i8;
      f.this-idx = this-idx;
      if (this-idx != -1) {
         f.this-group = r.n1();
      }
      +group-c = r.n1();
      f.group-c = group-c;
      loop i = 0; (group-c) i++ {
         f.group-v[i] = r.n1();
      }
      // C.out.printf(")\n");
      f.flags.rd(r);
      if ((f.flags & #real-name) != #0) {
         f.real-name.rd(r);
      }
      if ((f.flags & #case) != #0) {
         f.cas.rd(r);
      }
      if ((f.flags & #decl) != #0) {
         +len = r.n();
         f.decl-len = len;
         f.decl-str = quick-alloc(len + 1);
         C.memcpy(f.decl-str, r.reff, len);
         f.decl-str[len] = 0;
         r.pos += len;
      }
      +at = at-i.ptr();
      +at-func-idx = at.func-c++;
      if (at.func-cap <= at.func-c) {
         +old-cap = at.func-cap;
         grow(at.func-cap, at.func-c);
         realloc(at.func-v, at.func-cap, old-cap);
      }
      at.func-v[at-func-idx] = f-idx;
   }
   Func.rd(+func-main, r);
   if (func-main != #nil) {
      if (.func-main != #nil) {
         +first = .func-main.ptr();
         +second = func-main.ptr();
         C.out.printf("There are more than one function with @main attribute, first is %u:%u and second is %u:%u\n", first.begin-row, first.begin-col, second.begin-row, second.begin-col);
         C.exit(#failure);
      }
      .func-main = func-main;
   }
   loop f-idx = f-idx-begin; (func-c) f-idx++ {
      +f = .func-v[f-idx];
      if ((f.flags & #has-body) == #0) { continue}
      +size = r.n4();
      f.body-file-pos = r.pos - r-begin.pos;
      r.pos += size;
   }
}
var out:C.File;
var process-first:Func;
var process-last:Func;
var func-in-process:u8[];
var include-is-outputted:u8[];
var include-outputted-c:i32;
var include-outputted-v:Include[];
var cvar-is-outputted:u8[];
var cvar-outputted-c:i32;
var cvar-outputted-v:Cvar[];
var gvar-is-outputted:u8[];
var gvar-outputted-c:i32;
var gvar-outputted-v:Gvar[];
var enum-is-outputted:u8[];
var enum-outputted-c:i32;
var enum-outputted-v:Enum[];
var struct-is-outputted:u8[];
var struct-outputted-c:i32;
var struct-outputted-v:Struct[];
main(arg-c:intc, arg-v:char[][]):intc @main {
   +watermark = false;
   +arg-i = 1;
   loop (arg-c - 1) {
      if (arg-v[arg-i][0] == ''-) {
         if (&&, arg-v[arg-i][1] == ''w, arg-v[arg-i][2] == 0) {
            watermark = true;
         } else {
            C.printf("Error, invalid option '%s'\n", arg-v[arg-i]);
            "goto usage;";
         }
      } else {
         break;
      }
      arg-i++;
   }
   if ((arg-c - arg-i) < 2) {
      "usage:";
      C.out.printf("Usage: %s [options] [file.cp1-b] [file.c]\n", arg-v[0]);
      C.out.printf("Options:\n");
      C.out.printf(" -w    Add disclaimer (watermark) at the top of the output C file that it is generated by Cp1\n");
      return 0;
   }

   if (false) {
      quick-alloc-undo(0);
   }

   .id-map.init();
   .include-map.init();
   .at-map.init();
   quick-alloc-init();
   .func-main = #nil;

   loop type = 0:BasicTypeId; (BasicTypeId#COUNT) type++ {
      +at-idx = .at-c++;
      if (.at-cap <= .at-c) {
         +old-cap = .at-cap;
         grow(.at-cap, .at-c);
         realloc(.at-v, .at-cap, old-cap);
      }
      +at = .at-v[at-idx];
      at.init(#basic, #root, type:Id);
   }

   // if (true) {
   //    +at-i = basic-type(#bool);
   // }

   loop i = arg-i; (arg-c - arg-i - 1) i++ {
      +in-path = arg-v[i];
      read(in-path);
   }

   loop f-idx = 0:Func; (.func-c) f-idx++ {
      +f = f-idx.ptr();
      if (f.this-idx != -1) {
         +at = f.at.ptr();
         // C.out.printf("at(%d).type = #%s, %d\n", f.at, at.type.cp1-name(), at.decl.struct);
         // C.out.flush();
         if (at.type == #struct-enum) {
            if (at.decl.enum == #nil) {
               C.out.printf("%s:%u:%u: function using ':this' was declared on :%s which is not defined\n", f.file.path(), f.begin-row, f.begin-col, at.name.id.str());
               C.exit(#failure);
            }
            if (at.def == #struct) {
               +t = at.decl.struct.ptr();
               +t-method-idx = t.method-c++;
               if (t.method-cap <= t.method-c) {
                  +old-cap = t.method-cap;
                  grow(t.method-cap, t.method-c);
                  realloc(t.method-v, t.method-cap, old-cap);
               }
               t.method-v[t-method-idx] = f-idx;
            } elif (at.def == #enum) {
               +t = at.decl.enum.ptr();
               +t-method-idx = t.method-c++;
               if (t.method-cap <= t.method-c) {
                  +old-cap = t.method-cap;
                  grow(t.method-cap, t.method-c);
                  realloc(t.method-v, t.method-cap, old-cap);
               }
               t.method-v[t-method-idx] = f-idx;
            } else {
               C.out.printf("%s:%u:%u: function using ':this' was declared on :%s which is not a struct or enum\n", f.file.path(), f.begin-row, f.begin-col, at.name.id.str());
               C.exit(#failure);
            }
         } elif (at.type == #basic) {
            +t = .basic-type[at.name.basic];
            +t-method-idx = t.method-c++;
            if (t.method-cap <= t.method-c) {
               +old-cap = t.method-cap;
               grow(t.method-cap, t.method-c);
               realloc(t.method-v, t.method-cap, old-cap);
            }
            t.method-v[t-method-idx] = f-idx;
         } else {
            C.out.printf("%s:%u:%u: function using ':this' was declared on a type that:S not a struct or enum\n", f.file.path(), f.begin-row, f.begin-col);
            C.exit(#failure);
         }
      }
   }

   if (.func-main != #nil) {
      +f = .func-main.ptr();
      f.real-name = id-add(4, "main");
      f.flags |= #real-name;
   }

   quick-alloc-arr(.id-c-name-v, .id-c); 
   if (true) {
      +func-c8 = (.func-c + 7) >> 3;
      quick-alloc-arr(.func-in-process, func-c8);
      quick-alloc-arr(.func-head-outputted-v, .func-c);
      quick-alloc-arr(.func-body-outputted-v, .func-c);
   }
   if (true) {
      +include-c8 = (.include-c + 7) >> 3;
      quick-alloc-arr(.include-is-outputted, include-c8);
      quick-alloc-arr(.include-outputted-v, .include-c);
   }
   if (true) {
      +cvar-c8 = (.cvar-c + 7) >> 3;
      quick-alloc-arr(.cvar-is-outputted, cvar-c8);
      quick-alloc-arr(.cvar-outputted-v, .cvar-c);
   }
   if (true) {
      +gvar-c8 = (.gvar-c + 7) >> 3;
      quick-alloc-arr(.gvar-is-outputted, gvar-c8);
      quick-alloc-arr(.gvar-outputted-v, .gvar-c);
   }
   if (true) {
      +enum-c8 = (.enum-c + 7) >> 3;
      quick-alloc-arr(.enum-is-outputted, enum-c8);
      quick-alloc-arr(.enum-outputted-v, .enum-c);
   }
   if (true) {
      +struct-c8 = (.struct-c + 7) >> 3;
      quick-alloc-arr(.struct-is-outputted, struct-c8);
      quick-alloc-arr(.struct-outputted-v, .struct-c);
   }

   // process the main function
   .process-first = #nil;
   .process-last = #nil;
   if (.func-main != #nil) {
      .func-main.process-later();
   }

   loop (.process-first != #nil) {
      +f-i = .process-first;
      .process-first = #nil;
      .process-last = #nil;
      loop {
         if !(f-i.process-now()) { return -1}
         +f = f-i.ptr();
         f-i = f.process-next; 
         if (f-i == #nil) { break}
      }
   }

   loop i = 0; (.func-head-outputted-c) i++ {
      +f-idx = .func-head-outputted-v[i];
      +f = f-idx.ptr();
      if ((f.flags & #no-decl) != #0) { continue}
      if ((f.flags & #decl) != #0) {
         continue;
      }
      .ctx-func = f;
      loop l = 0:Lvar; (f.lvar-c) l++ {
         if !(l.process()) {
            C.exit(#failure);
         }
      }
   }

   // C.out.printf("finished processing, writing...\n");
   .out = C.fopen(arg-v[arg-c - 1], "w");
   if (watermark) {
      .out.printf("// Generated by Cp1\n");
   }
   loop i = 0; (.func-head-outputted-c) i++ {
      +f-idx = .func-head-outputted-v[i];
      +f = f-idx.ptr();
      +row = f.begin-row;
      +col = f.begin-col;
      if (f.decl.type != #nil) {
         f.decl.type.output(f.file, row, col);
      }
      loop i = 0; (f.farg-c) i++ {
         f.farg-v[i].decl.type.output(f.file, row, col);
      }
      if (f.include != #nil) {
         f.include.output();
      }
      if ((f.flags & #cp1-name) != #0) {
         +at = f.at.ptr();
         loop i = 0, v = at.cvar-v; (at.cvar-c) i++ {
            +cvar = v[i];
            if ((cvar.ptr().flags & #as-enum) != #0) {
               cvar.process();
            }
         }
      }
   }
   if (.include-stdint) {
      .out.printf("#include <stdint.h>\n");
   }
   if (.include-stdbool) {
      .out.printf("#include <stdbool.h>\n");
   }
   if (.include-stddef) {
      .out.printf("#include <stddef.h>\n");
   }
   loop i = 0; (.include-outputted-c) i++ {
      +inc = .include-outputted-v[i];
      .out.printf("#include %s\n", inc.str());
   }
   loop i = 0; (.cvar-outputted-c) i++ {
      +c-i = .cvar-outputted-v[i];
      +c = c-i.ptr();
      if ((c.decl.flags & #no-decl) != #0) {
         continue;
      }
      .out.printf("#define ");
      c-i.write();
      .out.printf(" ");
      if ((c.flags & #set-expr) != #0) {
         .out.printf("(");
         c.expr-set.write();
         .out.printf(")");
      } elif (c.last-cvar != #nil) {
         .out.printf("(");
         c.last-cvar.write();
         .out.printf(" + 1)");
      } else {
         .out.printf("0");
      }
      .out.printf("\n");
   }
   loop i = 0; (.enum-outputted-c) i++ {
      +e-i = .enum-outputted-v[i];
      +e = e-i.ptr();
      .out.printf("typedef ");
      e.base-type.write();
      .out.printf(" ");
      e.at.write();
      .out.printf(";\n");
   }
   loop i = 0; (.struct-outputted-c) i++ {
      +s-i = .struct-outputted-v[i];
      +s = s-i.ptr();
      if ((s.flags & #union) != #0) {
         .out.printf("union ");
      } else {
         .out.printf("struct ");
      }
      s.at.write-space();
      if ((s.flags & #union) != #0) {
         .out.printf(";\nunion ");
      } else {
         .out.printf(";\nstruct ");
      }
      s.at.write-space();
      .out.printf(" {\n");
      loop j = 0; (s.fvar-c) j++ {
         +fvar = s.fvar-v[j];
         fvar.decl.write-type(#fvar);
         .out.printf(";\n");
      }
      .out.printf("};\n");
   }
   loop i = 0; (.gvar-outputted-c) i++ {
      +g-i = .gvar-outputted-v[i];
      +g = g-i.ptr();
      if ((g.decl.flags & #no-decl) != #0) { continue}
      if ((g.decl.flags & #extern) != #0) {
         .out.printf("extern ");
      }
      g.decl.write-type(#gvar);
      .out.printf(";\n");
   }
   loop i = 0; (.func-head-outputted-c) i++ {
      +f-idx = .func-head-outputted-v[i];
      +f = f-idx.ptr();
      if ((f.flags & #no-decl) != #0) { continue}
      if ((f.flags & #decl) != #0) {
         if (&&, f.decl-str[0] == ''#, f.decl-str[1] == '' ) {
            .out.printf("#define ");
            f.write();
            .out.printf("(");
            loop j = 0; (f.farg-c) j++ {
               if (j != 0) {
                  .out.printf(", ");
               }
               .out.printf("%s", f.farg-v[j].decl.name.str());
            }
            .out.printf(") ");
            .out.printf("%.*s\n", f.decl-len - 2, & f.decl-str[2]);
         } else {
            .out.printf("%.*s\n", f.decl-len, f.decl-str);
         }
         continue;
      }
      .ctx-func = f;
      if (f.decl.type == #nil) {
         .out.printf("void");
      } else {
         f.decl.type.write-type-info(f.decl.type-info, 0);
      }
      .out.printf(" ");
      f.write();
      .out.printf("(");
      // if (.func-main == f-idx) {
      //    .out.printf(" main(");
      // } else {
      //    .out.printf(" %s(", f.decl.name.c-name());
      // }
      loop j = 0; (f.farg-c) j++ {
         if (j != 0) {
            .out.printf(", ");
         }
         f.farg-v[j].decl.write-lvar-type(j:Lvar);
      }
      if ((f.flags & #cp1-name) != #0) {
         .out.printf(") {\nswitch(_Le_0) {\n");
         +at = f.at.ptr();
         loop i = 0, v = at.cvar-v; (at.cvar-c) i++ {
            +cvar-i = v[i];
            +cvar = cvar-i.ptr();
            if ((cvar.flags & #as-enum) == #0) { continue}
            .out.printf("case ");
            cvar-i.write();
            .out.printf(": return \"%s\";\n", cvar.decl.name.str());
         }
         .out.printf("}\nreturn \"(ERROR)\";\n}\n");
      } else {
         .out.printf(");\n");
      }
   }
   loop i = 0; (.func-body-outputted-c) i++ {
      +f-idx = .func-body-outputted-v[i];
      +f = f-idx.ptr();
      .ctx-func = f;
      .nest-id = 0;
      if (f.flags & #inline) {
         .out.printf("inline ");
      }
      if (f.decl.type == #nil) {
         .out.printf("void");
      } else {
         f.decl.type.write-type-info(f.decl.type-info, 0);
      }
      .out.printf(" ");
      f.write();
      .out.printf("(");
      // if (.func-main == f-idx) {
      //    .out.printf(" main(");
      // } else {
      //    .out.printf(" %s(", f.decl.name.c-name());
      // }
      loop j = 0; (f.farg-c) j++ {
         if (j != 0) {
            .out.printf(", ");
         }
         f.farg-v[j].decl.write-lvar-type(j:Lvar);
      }
      .out.printf(") {\n");
      f.stmt-space.write();
      .out.printf("}\n");
   }
   return 0;
}
using (Func) {
   process-later(f-idx:this) {
      +num = f-idx:u32;
      +n3 = num >> 3;
      +n17 = 1 << (num & 7);
      if ((.func-in-process[n3] & n17) != 0) { return}
      .func-in-process[n3] |= n17;
      +f = f-idx.ptr();
      +f-at = f.at;
      +f-file = f.file;
      +f-row = f.begin-row;
      +f-col = f.begin-col;
      loop j = 0; (f.farg-c) j++ {
         f.farg-v[j].decl.type = at-validate(f.farg-v[j].decl.type, f-at, f-file, f.farg-v[j].row, f.farg-v[j].col);
      }
      if (f.decl.type != #nil) {
         f.decl.type = at-validate(f.decl.type, f-at, f-file, f-row, f-col);
         f.decl.type.finalize(f.decl.type-info, f-row, f-col);
      }
      .func-head-outputted-v[.func-head-outputted-c++] = f-idx;
      if ((f.flags & #has-body) != #0) {
         f.process-next = #nil;
         if (.process-first == #nil) {
            .process-first = f-idx;
            .process-last = f-idx;
         } else {
            +f-last = .process-last.ptr();
            f-last.process-next = f-idx;
            .process-last = f-idx;
         }
      }
   }
   process-now(f-idx:this):bool {
      +f = f-idx.ptr();
      .ctx-func = f;
      // C.out.printf("func :%s\n", f.decl.name.str());

      // f.lvar-c = #0;
      // grow(f.lvar-cap, f.farg-c);
      // malloc(f.lvar-v, f.farg-c);
      // loop i = 0; (f.farg-c) i ++ {
      //    +farg = f.farg-v[i];
      //    f.lvar-v[i].row = f.begin-row;
      //    f.lvar-v[i].col = f.begin-col;
      //    f.lvar-v[i].decl.copy-from(farg.decl);
      //    f.lvar-v[i].flags = #0;
      //    // C.out.printf("%u:%u: lvar '%s' has a type of %d\n", f.begin-row, f.begin-col, f.lvar-v[i].decl.name.str(), f.lvar-v[i].decl.type);
      // }
      // f.lvar-c = f.farg-c:Lvar;
      var r:Rdr+;
      +file = f.file.ptr();
      r.reff = file.data;
      .id-table = file.id-table;
      .at-table = file.at-table;
      .cvar-table = file.cvar-table;
      r.pos += f.body-file-pos;
      // +stmt-c = r.n();
      // C.out.printf("  function has %u statements\n", stmt-c);
      // f.stmt-c = 0;
      // f.stmt-cap = 0;
      // f.stmt-v = null;
      // if (true) {
      //    // add a stmt lvars
      //    quick-alloc-one(+(s:StmtSpace));
      //    s.lvar-c = 0;
      //    grow(s.lvar-cap, s.lvar-c);
      //    malloc(s.lvar-v, s.lvar-cap);
      //    f.stmt-push(s.base, f.begin-row, f.begin-col, f.begin-row, f.begin-col, #space);
      // }
      f.lvars-rd(r);
      f.stmt-space.rd(r, null);
      +s = f.stmt-space.stmt-first;
      loop (s != null) {
         .ctx-begin-row = s.begin-row;
         .ctx-begin-col = s.begin-col;
         .ctx-end-row = s.end-row;
         .ctx-end-col = s.end-col;
         // C.out.printf("%s %u:%u - %u:%u\n", f.decl.name.str(), s.begin-row, s.begin-col, s.end-row, s.end-col);
         if !(s.process()) {
            return false;
         }
         s = s.stmt-next;
      }
      // loop i = 0; (f.stmt-c) i ++ {
      //    +s = f.stmt-v[i];
      //    .ctx-begin-row = s.begin-row;
      //    .ctx-begin-col = s.begin-col;
      //    .ctx-end-row = s.end-row;
      //    .ctx-end-col = s.end-col;
      //    if !(s.process(f-idx)) {
      //       return false;
      //    }
      // }

      if ((f.flags & #no-body) == #0) {
         .func-body-outputted-v[.func-body-outputted-c++] = f-idx;
      }
      return true;
   }
   is-set(f-idx:this, v:u8[]):bool @inline {
      return (v[f-idx >> 3] & (1 << (f-idx & 7))) != 0;
   }
   set(f-idx:this, v:u8[]) @inline {
      v[f-idx >> 3] |= 1 << (f-idx & 7);
   }
}
 

}
