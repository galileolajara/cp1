{using 'cp1 = :cp1}
{at(:cp1)
{:math[#add, #sub, #mul, #div, #lshift, #rshift, #and, #or, #xor]:u8
   {wr(e:this, w:wtr) @inline
      w.n1(e);
   }
   {rd(e:this&, r:rdr) @inline
      e = r.n1():math;
   }
}
{expr-math(left:expr-i, right:expr-i, type:math):expr-i
   quick-alloc-one(+(e:expr-math));
   +e-idx = expr-push(e.base, #math);
   e.left = left;
   e.right = right;
   e.type = type;
   return e-idx;
}
{expr-math-add(expr:expr-i, right:expr-i):expr-i
   {+e:expr-math = expr.ptr()}
   +i = e.item-c++;
   {if(e.item-cap <= e.item-c)
      +old-cap = e.item-cap;
      grow(e.item-cap, e.item-c);
      realloc(e.item-v, e.item-cap, old-cap);
   }
   +item = e.item-v[i];
   item.expr = right;
   return expr;
}
{at(:expr-i)
   {try-deduce-math(expr:expr, at:at) @case.try-deduce() @inline
      {+e:expr-math = expr}
      e.left.try-deduce(at);
      e.right.try-deduce(at);
      {do{+i = 0}{(e.item-c) i++}
         e.item-v[i].expr.try-deduce(at);
      }
   }
   {wr-math(expr:expr, w:wtr, header:bool) @case.wr() @inline
      {+e:expr-math = expr}
      e.left.wr(w, header);
      e.right.wr(w, header);
      e.type.wr(w);
      w.n1(e.item-c);
      {do{+i = 0}{(e.item-c) i++}
         e.item-v[i].expr.wr(w, header);
      }
   }
   {rd-math(e-idx:expr-i, r:rdr) @case.rd() @inline
      quick-alloc-one(+(e:expr-math));
      e-idx.set(e.base, #math);
      e.left.rd(r);
      e.right.rd(r);
      e.type.rd(r);
      +item-c = r.n1();
      {if(item-c > 0)
         e.item-c = item-c;
         quick-alloc-arr(e.item-v, item-c);
         {do{+i = 0}{(e.item-c) i++}
            e.item-v[i].expr.rd(r);
         }
      }
   }
   {write-math(expr:expr) @case.write() @inline
      {+e:expr-math = expr}
      {switch(e.type)
         {case(#add)
            e.left.write-value(e.left-val);
            .out.printf(" + ");
            e.right.write-value(e.right-val);
            {do{+i = 0}{(e.item-c) i++}
               .out.printf(" + ");
               e.item-v[i].expr.write-value(e.item-v[i].val);
            }
         }
         {case(#sub)
            e.left.write-value(e.left-val);
            .out.printf(" - ");
            e.right.write-value(e.right-val);
            {do{+i = 0}{(e.item-c) i++}
               .out.printf(" - ");
               e.item-v[i].expr.write-value(e.item-v[i].val);
            }
         }
         {case(#mul)
            e.left.write-value(e.left-val);
            .out.printf(" * ");
            e.right.write-value(e.right-val);
            {do{+i = 0}{(e.item-c) i++}
               .out.printf(" * ");
               e.item-v[i].expr.write-value(e.item-v[i].val);
            }
         }
         {case(#div)
            e.left.write-value(e.left-val);
            .out.printf(" / ");
            e.right.write-value(e.right-val);
            {do{+i = 0}{(e.item-c) i++}
               .out.printf(" / ");
               e.item-v[i].expr.write-value(e.item-v[i].val);
            }
         }
         {case(#lshift)
            e.left.write-value(e.left-val);
            .out.printf(" << ");
            e.right.write-value(e.right-val);
         }
         {case(#rshift)
            e.left.write-value(e.left-val);
            .out.printf(" >> ");
            e.right.write-value(e.right-val);
         }
         {case(#and)
            e.left.write-value(e.left-val);
            .out.printf(" & ");
            e.right.write-value(e.right-val);
            {do{+i = 0}{(e.item-c) i++}
               .out.printf(" & ");
               e.item-v[i].expr.write-value(e.item-v[i].val);
            }
         }
         {case(#or)
            e.left.write-value(e.left-val);
            .out.printf(" | ");
            e.right.write-value(e.right-val);
            {do{+i = 0}{(e.item-c) i++}
               .out.printf(" | ");
               e.item-v[i].expr.write-value(e.item-v[i].val);
            }
         }
         {case(#xor)
            e.left.write-value(e.left-val);
            .out.printf(" ^ ");
            e.right.write-value(e.right-val);
            {do{+i = 0}{(e.item-c) i++}
               .out.printf(" ^ ");
               e.item-v[i].expr.write-value(e.item-v[i].val);
            }
         }
      }
   }
   {value-math(e:this, ref:i8, paren:bool, v:value, ok:bool&) @case.value() @inline
      {+expr:expr-math = e.ptr()}
		// {if(expr.left.value(1, paren, v) == false)
      //    return;
      // }
		{if!(expr.left.value(1, paren, v)) return}
		// +left = e.left.type();
		// +right = e.right.type();
      // +left-size = left.real.basicType.to()Size;
      // {if(left-size > 0)
      // 	{if(left-size > right.real.basicType.to()Size) 
      // 		v.decl = left;
      // 	}
      // }
		v.paren = paren;
		v.ref = ref;
      ok = true;
	}
   {type-math(expr:expr, at:at&) @case.type() @inline
      {+e:expr-math = expr}
      at = e.left.type();
   }
   {process-math(expr:expr, ok:bool&) @case.process() @inline
      {+e:expr-math = expr}
		{if!(e.left.value(1, true, e.left-val))
			return;
      }
		e.right.try-deduce(e.left-val.type);
		{if!(e.right.value(1, true, e.right-val))
			return;
      }
      {do{+i = 0}{(e.item-c) i++}
         +item = e.item-v[i];
         {if!(item.expr.value(1, true, item.val)) return}
      }
      ok = true;
   }
}
 

}
