using Cp1 = Cp1;
using (Cp1) {
Nest(do:StmtDo, whil:StmtWhile, reff:ref) @union;
var nest-stack-ptr-v:Nest+[64];
var nest-stack-id-v:i32[64];
var nest-stack-c:u8;
var nest-id:i32;
using (StmtSpace) {
   wr-do(stmt:Stmt, w:Wtr, header:bool) @case.wr() @inline {
      var s:StmtDo = stmt;
      s.expr.wr(w, header);
      if (s.continu != null) {
         w.b(true);
         s.continu.wr(w, header);
      } else {
         w.b(false);
      }
   }
   rd-do(space:StmtSpace, r:Rdr) @case.rd() @inline {
      quick-alloc-one(+(s:StmtDo));
      s.expr.rd(r);
      space.stmt-push(s.base, .ctx-begin-row, .ctx-begin-col, .ctx-end-row, .ctx-end-col, #do);
      if (r.b()) {
         quick-alloc-one(+(space2:StmtSpace));
         s.continu = space2;
         space2.rd(r, space);
      }
      .nest-stack-id-v[.nest-stack-c] = .nest-id++;
      .nest-stack-ptr-v[.nest-stack-c].do = s;
      .nest-stack-c++;
   }
   wr-do-end(stmt:Stmt, w:Wtr, header:bool) @case.wr() @inline {
   }
   rd-do-end(space:StmtSpace, r:Rdr) @case.rd() @inline {
      +do = .nest-stack-ptr-v[.nest-stack-c -= 1].do;
      quick-alloc-one(+(s:StmtDoEnd));
      s.do = do;
      do.end = s;
      space.stmt-push(s.base, 0, 0, 0, 0, #do-end);
   }
}
using (Stmt) {
   write-do(stmt:Stmt) @case.write() @inline {
      var s:StmtDo = stmt;
      .nest-stack-id-v[.nest-stack-c] = .nest-id++;
      .nest-stack-ptr-v[.nest-stack-c].do = s;
      .nest-stack-c++;
      if (s.expr == #nil) {
         .out.printf("while(1) {\n");
      } else {
         .out.printf("for(int i = ");
         s.expr.write();
         .out.printf("; i > 0; ) {\ni --;\n");
      }
   }
   process-do(stmt:Stmt, ok:bool&) @case.process() @inline {
      var s:StmtDo = stmt;
      if (s.expr != #nil) {
         if !(s.expr.process()) {
            return;
         }
      }
      ok = true;
   }
   write-do-end(stmt:Stmt) @case.write() @inline {
      +id = .nest-stack-id-v[.nest-stack-c -= 1];
      var s:StmtDoEnd = stmt;
      .out.printf("continue_%u:;\n", id);
      +continu = s.do.continu;
      if (continu != null) {
         continu.write();
      }
      .out.printf("}\nbreak_%u:;\n", id);
   }
   process-do-end(stmt:Stmt, ok:bool&) @case.process() @inline {
      var s:StmtDoEnd = stmt;
      +continu = s.do.continu;
      if (continu != null) {
         continu.process();
      }
      ok = true;
   }
}
stmt-do-begin() {
   stmt-space-begin();
   .decl-func-ctx-space.flags |= #skip-lvar-decl;
}
StmtDo(
   base:Stmt+,
   expr:ExprI,
   continu:StmtSpace,
   end:StmtDoEnd,
);
StmtDoEnd(
   base:Stmt+,
   do:StmtDo,
);
stmt-do-set(expr:ExprI, begin-row:i32, begin-col:i32, end-row:i32, end-col:i32, continu:StmtSpace) {
   quick-alloc-one(+(s:StmtDo));
   .nest-stack-id-v[.nest-stack-c] = .nest-id++;
   .nest-stack-ptr-v[.nest-stack-c].do = s;
   .nest-stack-c++;
   s.expr = expr;
   s.continu = continu;
   stmt-push(s.base, begin-row, begin-col, end-row, end-col, #do);
   stmt-space-begin();
}
stmt-do-end() {
   .nest-stack-c -= 1;
   stmt-space-end();
   quick-alloc-one(+(s:StmtDoEnd));
   stmt-push(s.base, 0, 0, 0, 0, #do-end);
   stmt-space-end();
}
 

}
