using 'cp1 = :cp1;
{at(:cp1)
:nest(do:stmt-do, whil:stmt-while, ref:ref) @union;
{gvar nest-stack-ptr-v:nest+[64]}
{gvar nest-stack-id-v:i32[64]}
{gvar nest-stack-c:u8}
{gvar nest-id:i32}
{at(:stmt-space)
   wr-do(stmt:stmt, w:wtr, header:bool) @case.wr() @inline {
      {+s:stmt-do = stmt}
      s.expr.wr(w, header);
      if (s.continu != null) {
         w.b(true);
         s.continu.wr(w, header);
      } else {
         w.b(false);
      }
   }
   rd-do(space:stmt-space, r:rdr) @case.rd() @inline {
      quick-alloc-one(+(s:stmt-do));
      s.expr.rd(r);
      space.stmt-push(s.base, .ctx-begin-row, .ctx-begin-col, .ctx-end-row, .ctx-end-col, #do);
      if (r.b()) {
         quick-alloc-one(+(space2:stmt-space));
         s.continu = space2;
         space2.rd(r, space);
      }
      .nest-stack-id-v[.nest-stack-c] = .nest-id++;
      .nest-stack-ptr-v[.nest-stack-c].do = s;
      .nest-stack-c++;
   }
   wr-do-end(stmt:stmt, w:wtr, header:bool) @case.wr() @inline {
   }
   rd-do-end(space:stmt-space, r:rdr) @case.rd() @inline {
      +do = .nest-stack-ptr-v[.nest-stack-c -= 1].do;
      quick-alloc-one(+(s:stmt-do-end));
      s.do = do;
      do.end = s;
      space.stmt-push(s.base, 0, 0, 0, 0, #do-end);
   }
}
{at(:stmt)
   write-do(stmt:stmt) @case.write() @inline {
      {+s:stmt-do = stmt}
      .nest-stack-id-v[.nest-stack-c] = .nest-id++;
      .nest-stack-ptr-v[.nest-stack-c].do = s;
      .nest-stack-c++;
      if (s.expr == #nil) {
         .out.printf("while(1) {\n");
      } else {
         .out.printf("for(int i = ");
         s.expr.write();
         .out.printf("; i > 0; ) {\ni --;\n");
      }
   }
   process-do(stmt:stmt, ok:bool&) @case.process() @inline {
      {+s:stmt-do = stmt}
      if (s.expr != #nil) {
         if !(s.expr.process()) {
            return;
         }
      }
      ok = true;
   }
   write-do-end(stmt:stmt) @case.write() @inline {
      +id = .nest-stack-id-v[.nest-stack-c -= 1];
      {+s:stmt-do-end = stmt}
      .out.printf("continue_%u:;\n", id);
      +continu = s.do.continu;
      if (continu != null) {
         continu.write();
      }
      .out.printf("}\nbreak_%u:;\n", id);
   }
   process-do-end(stmt:stmt, ok:bool&) @case.process() @inline {
      {+s:stmt-do-end = stmt}
      +continu = s.do.continu;
      if (continu != null) {
         continu.process();
      }
      ok = true;
   }
}
stmt-do-begin() {
   stmt-space-begin();
   .decl-func-ctx-space.flags |= #skip-lvar-decl;
}
:stmt-do(
   base:stmt+,
   expr:expr-i,
   continu:stmt-space,
   end:stmt-do-end,
);
:stmt-do-end(
   base:stmt+,
   do:stmt-do,
);
stmt-do-set(expr:expr-i, begin-row:i32, begin-col:i32, end-row:i32, end-col:i32, continu:stmt-space) {
   quick-alloc-one(+(s:stmt-do));
   .nest-stack-id-v[.nest-stack-c] = .nest-id++;
   .nest-stack-ptr-v[.nest-stack-c].do = s;
   .nest-stack-c++;
   s.expr = expr;
   s.continu = continu;
   stmt-push(s.base, begin-row, begin-col, end-row, end-col, #do);
   stmt-space-begin();
}
stmt-do-end() {
   .nest-stack-c -= 1;
   stmt-space-end();
   quick-alloc-one(+(s:stmt-do-end));
   stmt-push(s.base, 0, 0, 0, 0, #do-end);
   stmt-space-end();
}
 

}
