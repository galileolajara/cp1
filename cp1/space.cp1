using Cp1 = Cp1;
using C = StdC;
using (Cp1) {
StmtSpaceFlags[
   #0,
   #skip-lvar-decl = 1,
   ]:u8 {
}
StmtSpace(
   base:Stmt+,
   parent:StmtSpace,
   flags:StmtSpaceFlags,
   stmt-first:Stmt,
   stmt-last:Stmt,
   lvar-c:i32,
   lvar-cap:i32,
   lvar-v:Lvar[],
   ) {
   rd-space(space:StmtSpace, r:Rdr) @case.rd() @inline {
      quick-alloc-one(+(s:StmtSpace));
      s.rd(r, space);
      space.stmt-push(s.base, .ctx-begin-row, .ctx-begin-col, .ctx-end-row, .ctx-end-col, #space);
   }
   write(space:this) {
      // .out.printf("{ // space begin \n");
      var i, lvar-c;
      if (space.parent == null) {
         // dont write arguments
         i = .ctx-func.farg-c;
         lvar-c = space.lvar-c - .ctx-func.farg-c;
      } else {
         i = 0;
         lvar-c = space.lvar-c;
      }
      loop (lvar-c) i++ {
         +lvar-i = space.lvar-v[i];
         +lvar = lvar-i.ptr();
         // C.out.printf("%s %s\n", lvar.decl.type.ptr().type.cp1-name(), lvar.decl.type.ptr().name.basic.cp1-name());
         lvar.decl.write-lvar-type(lvar-i);
         if ((lvar.flags & #set-expr) != #0) {
            .out.printf(" = ");
            lvar.set-expr.write();
         }
         .out.printf(";\n");
      }
      +s = space.stmt-first;
      loop (s != null) {
         s.write();
         s = s.stmt-next;
      }
      // .out.printf("} // space end\n");
   }
   lvar-new(space:this, name:Id, row:i32, col:i32):Lvar {
      +v = space.lvar-v;
      loop i = 0; space.lvar-c; i++ {
         +lvar = v[i].ptr();
         if (lvar.decl.name == name) {
            C.out.printf("%u:%u: lvar '%s' was already declared at %u:%u\n", row, col, name.str(), lvar.row, lvar.col);
            C.exit(#failure);
         }
      }
      +i = space.lvar-c++;
      if (space.lvar-cap <= space.lvar-c) {
         +old-cap = space.lvar-cap;
         grow(space.lvar-cap, space.lvar-c);
         realloc(space.lvar-v, space.lvar-cap, old-cap);
      }
      +f = .ctx-func;
      +lvar = f.lvar-c++;
      space.lvar-v[i] = lvar;
      if (f.lvar-cap <= f.lvar-c) {
         +old-cap = f.lvar-cap;
         grow(f.lvar-cap, f.lvar-c);
         realloc(f.lvar-v, f.lvar-cap, old-cap);
      }
      quick-alloc-one(+(item:LvarData));
      f.lvar-v[lvar] = item;
      item.row = row;
      item.col = col;
      item.decl.name = name;
      return lvar;
   }
   wr-space(stmt:Stmt, w:Wtr, header:bool) @case.wr() @inline {
      var s:StmtSpace = stmt;
      s.wr(w, header);
   }
   wr(space:this, w:Wtr, header:bool) {
      w.n(space.lvar-c);
      loop i = 0; space.lvar-c; i++ {
         space.lvar-v[i].wr(w);
      }
      +stmt = space.stmt-first;
      loop (stmt != null) {
         stmt.type.wr(w);
         if (#debug-rd-wr) {
            w.n1(255);
         }
         w.n(stmt.begin-row);
         w.n(stmt.begin-col);
         w.n(stmt.end-row);
         w.n(stmt.end-col);
         switch (stmt.type).wr(stmt, w, header) {
            default {
               C.out.printf("wr() not yet implemented in stmt #%s\n", stmt.type.cp1-name());
               C.exit(#failure);
            }
         }
         if (#debug-rd-wr) {
            w.n1(255);
         }
         stmt = stmt.stmt-next;
      }
      StmtType#nil.wr(w);
   }
   stmt-push(s:this, s2:Stmt, begin-row:i32, begin-col:i32, end-row:i32, end-col:i32, type:StmtType) @inline {
      s2.begin-row = begin-row;
      s2.begin-col = begin-col;
      s2.end-row = end-row;
      s2.end-col = end-col;
      s2.type = type;
      s2.stmt-next = null;
      if (s.stmt-last == null) {
         s.stmt-first = s2;
         s.stmt-last = s2;
      } else {
         s.stmt-last.stmt-next = s2;
         s.stmt-last = s2;
      }
   }
   rd(space:this, r:Rdr, parent:StmtSpace) {
      space.parent = parent;
      space.stmt-first = null;
      space.stmt-last = null;

      +lvar-c = r.n();
      space.lvar-c = lvar-c;
      quick-alloc-arr(space.lvar-v, lvar-c);
      loop i = 0; lvar-c; i++ {
         space.lvar-v[i].rd(r);
      }

      loop {
         StmtType.rd(+type, r);
         if (type == #nil) { break }
         if (#debug-rd-wr) {
            if (r.n1() != 255) {
               C.out.printf("Error reading stmt\n");
               C.out.flush();
               C.exit(#failure);
            }
         }
         +begin-row = r.n();
         +begin-col = r.n();
         +end-row = r.n();
         +end-col = r.n();
         .ctx-begin-row = begin-row;
         .ctx-begin-col = begin-col;
         .ctx-end-row = end-row;
         .ctx-end-col = end-col;
         switch (type).rd(space, r) {
            default {
               C.out.printf("rd() not yet implemented in stmt #%s\n", type.cp1-name());
               C.exit(#failure);
            }
         }
         if (#debug-rd-wr) {
            if (r.n1() != 255) {
               C.out.printf("Error reading stmt\n");
               C.out.flush();
               C.exit(#failure);
            }
         }
      }
   }
   process(space:this):bool {
      +s = space.stmt-first;
      loop (s != null) {
         if !(s.process()) { return false }
         s = s.stmt-next;
      }
      var i, lvar-c;
      if (space.parent == null) {
         // don:T process arguments
         i = .ctx-func.farg-c;
         lvar-c = space.lvar-c - .ctx-func.farg-c;
      } else {
         i = 0;
         lvar-c = space.lvar-c;
      }
      loop (lvar-c) i++ {
         space.lvar-v[i].process();
      }
      return true;
   }
}
using (Stmt) {
   process-space(stmt:Stmt, ok:bool&) @case.process() @inline {
      var space:StmtSpace = stmt;
      if !(space.process()) { return }
      ok = true;
   }
   write-space(stmt:Stmt) @case.write() @inline {
      var space:StmtSpace = stmt;
      space.write();
   }
}
stmt-space-begin():StmtSpace {
   return stmt-space-begin(true);
}
stmt-space-begin(attach:bool):StmtSpace {
   +parent = .decl-func-ctx-space;
   quick-alloc-one(.decl-func-ctx-space);
   +space = .decl-func-ctx-space;
   space.parent = parent;
   if (attach) {
      if (parent.stmt-last == null) {
         parent.stmt-first = space.base;
         parent.stmt-last = space.base;
      } else {
         parent.stmt-last.stmt-next = space.base;
         parent.stmt-last = space.base;
      }
   }
   return space;
}
stmt-space-begin-detach():StmtSpace {
   return stmt-space-begin(false);
}
stmt-space-end():StmtSpace {
   +ret = .decl-func-ctx-space;
   .decl-func-ctx-space = .decl-func-ctx-space.parent;
   return ret;
}
 

}
