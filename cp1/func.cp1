using 'cp1 = :cp1;
using 'c = :stdc;
using (:cp1) {
:func[#nil = -1, #0, #1]:i32 {
   wr(f:this, w:wtr) @inline {
      w.n(f + #1);
   }
   rd(f:this&, r:rdr) @inline {
      f = (r.n() - #1):func;
   }
   ptr(f:this):decl-func @inline {
      return .func-v[f];
   }
}
:func-flags[
   #0,
   #has-body = 1,
   #inline = 2,
   #process = 4,
   #var-args = 8,
   #no-decl = 16,
   #no-body = 32,
   #real-name = 64,
   #case = 128,
   #cp1-name = 256,
   #decl = 512,
   ]:u32 {
   wr(e:this, w:wtr) @inline {
      w.n(e);
   }
   rd(e:this&, r:rdr) @inline {
      e = r.n():func-flags;
   }
}
:func-flags2[
   #0,
   #main = 1,
]:u32;
using (:decl-func) {
   write(f:this) {
      if ((f.flags & #real-name) != #0) {
         .out.printf("%s", f.real-name.str());
      } else {
         f.at.write-space();
         .out.printf("_P%s", f.decl.name.c-name());
         loop var i = 0; {(f.group-c) i++} {
            .out.printf("_%u", f.group-v[i]);
         }
      }
   }
   lvars-rd(f:this, r:rdr) {
      +lvar-c = r.n():lvar;
      f.lvar-c = lvar-c;
      quick-alloc-arr(f.lvar-v, lvar-c);
      loop var i = 0; {(f.lvar-c) i++} {
         +l = f.lvar-v[i];
         l.row = r.n();
         l.col = r.n();
         l.decl.rd(r);
         l.flags.rd(r);
         if ((l.flags & #set-expr) != #0) {
            l.set-expr.rd(r);
         }
         // 'c.out.printf("lvar %s has type of %s\n", l.decl.name.str(), l.decl.type.ptr().name.basic.cp1-name());
      }
   }
   lvars-wr(f:this, w:wtr, header:bool) {
      w.n(f.lvar-c);
      loop var i = 0; {(f.lvar-c) i++} {
         +l = f.lvar-v[i];
         w.n(l.row);
         w.n(l.col);
         l.decl.wr(w, header);
         l.flags.wr(w);
         if ((l.flags & #set-expr) != #0) {
            l.set-expr.wr(w, header);
         }
      }
   }
}
:farg(
   row:i32,
   col:i32,
   decl:decl-var-data+,
   ) {
   rd(f:this, r:rdr) {
      f.decl.rd(r);
   }
   wr(f:this, w:wtr, header:bool) {
      f.decl.wr(w, header);
   }
   copy-from(f:this, src:farg) {
      f.row = src.row;
      f.col = src.col;
      f.decl.copy-from(src.decl);
   }
}
var func-c:func;
var func-cap:func;
var func-v:decl-func[];
var decl-func-name:id;
// var decl-func:decl-var-data+;
var decl-func-row:i32;
var decl-func-col:i32;
var decl-func-flags:func-flags;
var decl-func-flags2:func-flags2;
var decl-func-real-name:id;
var decl-func-decl-str:char[];
var decl-func-decl-len:i32;
var decl-func-case:id;
// #cp1-farg-limit = 1024;
var decl-farg-v:farg+[];
var decl-farg-group-c:i8;
var decl-farg-group-v:i8[#expr-carg-group-limit];
var decl-farg-c:i32;
var decl-farg-cap:i32;
var decl-func-this-idx:i8;
var decl-func-this-group:i8;
var decl-func-space:stmt-space;
var decl-func-ctx-space:stmt-space;
// var decl-stmt-c:u32;
// var decl-stmt-cap:u32;
// var decl-stmt-v:stmt[];
decl-func-begin(name:id, row:i32, col:i32) {
   .decl-func-name = name;
   .decl-func-row = row;
   .decl-func-col = col;
   .decl-func-flags = #0;
   .decl-func-flags2 = #0;
   .decl-farg-c = 0;
   // .decl-stmt-c = 0;
   .decl-farg-group-c = 1;
   .decl-farg-group-v[0] = 0;
   .decl-func-this-idx = -1;
   .decl-func-this-group = -1;
   .decl-func-real-name = #nil;
   .decl-func-case = #nil;
   .decl-func-decl-str = null;
   .decl-func-decl-len = 0;
   quick-alloc-one(.decl-func-space);
   .decl-func-ctx-space = .decl-func-space;
}
farg-next-group() {
   .decl-farg-group-v[.decl-farg-group-c] = 0;
   .decl-farg-group-c++;
}
decl-var-as-farg(row:i32, col:i32) {
   +farg-idx = .decl-farg-c++;
   if (.decl-farg-cap <= .decl-farg-c) {
      +old-cap = .decl-farg-cap;
      grow(.decl-farg-cap, .decl-farg-c);
      realloc(.decl-farg-v, .decl-farg-cap, old-cap);
   }
   +fa = .decl-farg-v[farg-idx];
   fa.row = row;
   fa.col = col;
   fa.decl.copy-from(.decl-var);
   .decl-farg-group-v[.decl-farg-group-c - 1]++;
}
decl-var-as-this() {
   .decl-func-this-idx = .decl-farg-c;
   .decl-func-this-group = .decl-farg-group-c - 1;
   +farg-idx = .decl-farg-c++;
   if (.decl-farg-cap <= .decl-farg-c) {
      +old-cap = .decl-farg-cap;
      grow(.decl-farg-cap, .decl-farg-c);
      realloc(.decl-farg-v, .decl-farg-cap, old-cap);
   }
   .decl-farg-v[farg-idx].decl.copy-from(.decl-var);
   .decl-farg-v[farg-idx].decl.type = .decl-at;
   .decl-farg-group-v[.decl-farg-group-c - 1]++;
}
// var lvar-c:lvar;
// var lvar-cap:lvar;
// var lvar-v:lvar-data[];
// var lvar-name-v:id[];
decl-func-end(row:i32, col:i32) {
   +f-idx = (.func-c++):func;
   if (.func-cap <= .func-c) {
      +old-cap = .func-cap;
      grow(.func-cap, .func-c);
      realloc(.func-v, .func-cap, old-cap);
   }
   var f:decl-func;
   quick-alloc-plus(f, :farg[:usz] * .decl-farg-c);
   .ctx-func = f;
   .nest-id = 0;
   .func-v[f-idx] = f;
   f.begin-row = .decl-func-row;
   f.begin-col = .decl-func-col;
   f.end-row = row;
   f.end-col = col;
   f.include = .decl-include;
   f.at = .decl-at;
   if ((.decl-func-flags & #real-name) != #0) {
      if (.decl-func-real-name == #nil) {
         f.real-name = .decl-func-name;
      } else {
         f.real-name = .decl-func-real-name;
      }
   }
   if ((.decl-func-flags & #case) != #0) {
      f.cas = .decl-func-case;
   }
   // f.at.ptr().func-c ++;
   .decl-var.name = .decl-func-name;
   f.decl.copy-from(.decl-var);
   f.farg-c = .decl-farg-c;
   loop var i = 0; {(.decl-farg-c) i++} {
      +fa = f.farg-v[i];
      fa.copy-from(.decl-farg-v[i]);
   }
   f.this-idx = .decl-func-this-idx;
   f.this-group = .decl-func-this-group;
   f.group-c = .decl-farg-group-c;
   loop var i = 0; {(.decl-farg-group-c) i++} {
      f.group-v[i] = .decl-farg-group-v[i];
   }
   f.flags = .decl-func-flags;
   if ((.decl-func-flags2 & #main) != #0) {
      .func-main = f-idx;
   } elif (&&, .decl-at == #root, f.decl.name.len() == 4, 'c.memcmp("main", f.decl.name.str(), 4) == 0) {
      if (.func-main != #nil) {
         +main = .func-main.ptr();
         'c.out.printf("%u:%u: There's already a function with @main attribute at %u:%u\n", f.begin-row, f.begin-col, main.begin-row, main.begin-col);
         'c.exit(#failure);
      } else {
         .func-main = f-idx;
      }
   }
   f.decl-str = .decl-func-decl-str;
   f.decl-len = .decl-func-decl-len;
   +space = .decl-func-space;
   f.stmt-space = space;
   loop var i = 0; {(.decl-farg-c) i++} {
      +fa = f.farg-v[i];
      +lvar-i = space.lvar-new(fa.decl.name, fa.row, fa.col);
      +lvar = lvar-i.ptr();
      lvar.decl.copy-from(fa.decl);
   }
}
func-attr-main() {
   if ((.decl-func-flags2 & #main) != #0) {
      'c.out.printf("%s:%u:%u: Error @main specified more than once\n", .input-path, .last-row, .last-col);
      'c.exit(#failure);
   }
   if (.func-main != #nil) {
      +first = .func-main.ptr();
      'c.out.printf("There cannot be more than one function with @main attribute, first was %s:%u:%u and then %u:%u\n", .input-path, first.begin-row, first.begin-col, .decl-func-row, .decl-func-col);
      'c.exit(#failure);
   }
   .decl-func-flags2 |= #main;
}
func-attr-process() {
   if ((.decl-func-flags & #process) != #0) {
      'c.out.printf("%s:%u:%u: Error @process specified more than once\n", .input-path, .last-row, .last-col);
      'c.exit(#failure);
   }
   .decl-func-flags |= #process;
}
func-attr-inline() {
   if ((.decl-func-flags & #inline) != #0) {
      'c.out.printf("%s:%u:%u: Error @inline specified more than once\n", .input-path, .last-row, .last-col);
      'c.exit(#failure);
   }
   .decl-func-flags |= #inline
}
func-attr-cp1-name() {
   if ((.decl-func-flags & #cp1-name) != #0) {
      'c.out.printf("%s:%u:%u: Error @cp1-name specified more than once\n", .input-path, .last-row, .last-col);
      'c.exit(#failure);
   }
   .decl-func-flags |= #cp1-name;
}
func-attr-var-args() {
   if ((.decl-func-flags & #var-args) != #0) {
      'c.out.printf("%s:%u:%u: Error @var-args specified more than once\n", .input-path, .last-row, .last-col);
      'c.exit(#failure);
   }
   .decl-func-flags |= #var-args;
}
func-attr-no-decl() {
   if ((.decl-func-flags & #no-decl) != #0) {
      'c.out.printf("%s:%u:%u: Error @no-decl specified more than once\n", .input-path, .last-row, .last-col);
      'c.exit(#failure);
   }
   .decl-func-flags |= #no-decl;
}
func-attr-no-body() {
   if ((.decl-func-flags & #no-body) != #0) {
      'c.out.printf("%s:%u:%u: Error @no-body specified more than once\n", .input-path, .last-row, .last-col);
      'c.exit(#failure);
   }
   .decl-func-flags |= #no-body;
}
func-attr-real-name(name:id) {
   if ((.decl-func-flags & #real-name) != #0) {
      'c.out.printf("%s:%u:%u: Error @real-name specified more than once\n", .input-path, .last-row, .last-col);
      'c.exit(#failure);
   }
   .decl-func-flags |= #real-name;
   .decl-func-real-name = name;
}
func-attr-decl() {
   if ((.decl-func-flags & #decl) != #0) {
      'c.out.printf("%s:%u:%u: Error @decl specified more than once\n", .input-path, .last-row, .last-col);
      'c.exit(#failure);
   }
   .decl-func-flags |= #decl;
   .decl-func-decl-str = quick-alloc(.string-len + 1);
   'c.memcpy(.decl-func-decl-str, .string-buf, .string-len);
   .decl-func-decl-str[.string-len] = 0;
   .decl-func-decl-len = .string-len;
}
func-attr-case(name:id) {
   if ((.decl-func-flags & #case) != #0) {
      'c.out.printf("%s:%u:%u: Error @case specified more than once\n", .input-path, .last-row, .last-col);
      'c.exit(#failure);
   }
   +name-str = name.str();
   +name-len = name.len();
   +func-name-str = .decl-func-name.str();
   +func-name-len = .decl-func-name.len();
   if (||, name-len > func-name-len, func-name-str[name-len] != ''-, 'c.memcmp(name-str, func-name-str, name-len) != 0) {
      'c.out.printf("%s:%u:%u: Error, function name must begin with words used in @case followed by '-' (dash) then followed by the name of the cvar of case\n", .input-path, .last-row, .last-col);
      'c.exit(#failure);
   }
   .decl-func-flags |= #case;
   .decl-func-case = name;
}
func-body-end() {
   +f = .func-v[.func-c - 1];
   f.flags |= #has-body;
   +c = 0;
   +s = f.stmt-space.stmt-first;
   while (s != null) {
      c++;
      s = s.stmt-next;
   }
}
#expr-call-nest-limit:i32 = 8;
#expr-carg-group-limit:i32 = 4;
var expr-call-c:i8;
#cp1-carg-limit:i32 = 64;
var expr-call-carg-c:u8[#expr-call-nest-limit];
var expr-call-carg-v:expr-i[#expr-call-nest-limit][#cp1-carg-limit];
var expr-call-cgrp-c:u8[#expr-call-nest-limit];
var expr-call-cgrp-v:u8[#expr-call-nest-limit][#expr-carg-group-limit];
expr-push-call(row:i32, col:i32) {
   +call-idx = .expr-call-c++;
   if (call-idx >= #expr-call-nest-limit) {
      'c.out.printf("%u:%u: Too much nested calls\n", row, col);
      'c.exit(#failure);
   }
   .expr-call-carg-c[call-idx] = 0;
   .expr-call-cgrp-c[call-idx] = 1;
   .expr-call-cgrp-v[call-idx][0] = 0;
}
carg-next-group() {
   +call-idx = .expr-call-c - 1;
   .expr-call-cgrp-v[call-idx][.expr-call-cgrp-c[call-idx]] = 0;
   .expr-call-cgrp-c[call-idx]++;
}
carg-push(expr:expr-i) {
   +call-idx = .expr-call-c - 1;
   .expr-call-carg-v[call-idx][.expr-call-carg-c[call-idx]++] = expr;
   .expr-call-cgrp-v[call-idx][.expr-call-cgrp-c[call-idx] - 1]++;
}
carg-push-str(expr:expr-i) {
   if (true) {
      // push the string
      +call-idx = .expr-call-c - 1;
      .expr-call-carg-v[call-idx][.expr-call-carg-c[call-idx]++] = expr;
      .expr-call-cgrp-v[call-idx][.expr-call-cgrp-c[call-idx] - 1]++;
   }
   if (true) {
      // calculate the string length
      var e:expr-str = expr.ptr();
      +len = 0;
      +s = e.first;
      loop {
         len += s.len;
         s = s.next;
         if (s == null) { break}
      }
      // push the string length
      +call-idx = .expr-call-c - 1;
      .expr-call-carg-v[call-idx][.expr-call-carg-c[call-idx]++] = expr-int(len, #dec);
      .expr-call-cgrp-v[call-idx][.expr-call-cgrp-c[call-idx] - 1]++;
   }
}
expr-pop-func(at:at, func-name:id):expr-i {
   +call-idx = .expr-call-c -= 1;
   +carg-c = .expr-call-carg-c[call-idx];
   var e:expr-func;
   quick-alloc-plus(e, :carg[:usz] * carg-c);
   +e-idx = expr-push(e.base, #func);
   e.at = at;
   e.func-name = func-name;
   e.carg-c = carg-c;
   loop var i = 0; {(carg-c) i++} {
      e.carg-v[i].ref = 0;
      e.carg-v[i].expr = .expr-call-carg-v[call-idx][i];
   }
   e.group-c = .expr-call-cgrp-c[call-idx];
   loop var i = 0; {(e.group-c) i++} {
      e.group-v[i] = .expr-call-cgrp-v[call-idx][i];
   }
   return e-idx;
}
expr-pop-method(this:expr-i, func-name:id):expr-i {
   +call-idx = .expr-call-c -= 1;
   +carg-c = .expr-call-carg-c[call-idx];
   var e:expr-method;
   quick-alloc-plus(e, :carg[:usz] * carg-c);
   +e-idx = expr-push(e.base, #method);
   e.this = this;
   e.func-name = func-name;
   e.carg-c = carg-c;
   loop var i = 0; {(carg-c) i++} {
      e.carg-v[i].expr = .expr-call-carg-v[call-idx][i];
   }
   e.group-c = .expr-call-cgrp-c[call-idx];
   loop var i = 0; {(e.group-c) i++} {
      e.group-v[i] = .expr-call-cgrp-v[call-idx][i];
   }
   return e-idx;
}
 

}
