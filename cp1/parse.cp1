using Cp1 = Cp1;
using C = LibC;
using X = Posix;
using (Cp1) {
var ctx-func:DeclFunc;
var id-in-header-v:u8[];
var id-in-header-idx-v:u32[];
var id-in-header-id-v:u32[];
var id-in-header-c:i32;

var at-in-header-v:u8[];
var at-in-header-idx-v:u32[];
var at-in-header-at-v:u32[];
var at-in-header-c:i32;

var decl-include:Include;
var decl-include-row:i32;
var decl-include-col:i32;
type-info-begin() {
   .decl-var.size-c = 0;
   .decl-var.type-info.init();
   .decl-var.flags = #0;
}
type-info-finalize() {
   .decl-var.type-info.finalize();
}
type-info-arr(expr-v:ExprI[], expr-c:u8) {
   var r:Rdr+;
   r.reff = expr-v;
   if expr-v == null {
      +ti = .decl-var.type-info;
      ti.array-c += 1;
      ti.ref-v[ti.array-c] = 0;
      return;
   }
   loop i = expr-c; expr-c; {
      type-info-arr(expr-v[i -= 1]);
   }
}
type-info-arr(expr:ExprI) {
   +ti = .decl-var.type-info;
   ti.array-c += 1;
   ti.ref-v[ti.array-c] = 0;
   if expr != #nil {
      +vd = .decl-var;
      if vd.size-c == 0 {
         quick-alloc-arr(vd.size-expr-v, #decl-var-size-limit);
      }
      vd.size-expr-v[vd.size-c++] = expr;
      // C.out.printf("%s, vd.size-c = %d\n", vd.name.str(), vd.size-c);
   }
}
type-info-ref(c:i8) {
   +ti = .decl-var.type-info;
   ti.ref-v[ti.array-c] += c;
}
type-info-static() {
   // C.out.printf("built-in\n");
   .decl-var.type-info.built-in = true;
}
decl-include-begin(inc:Include, row:i32, col:i32) {
   if .decl-include != #nil {
      C.out.printf("%s:%u:%u: Cannot {include inside another {include of %u:%u\n", .input-path, row, col, .decl-include-row, .decl-include-col);
      C.exit(#failure);
      return}
   .decl-include = inc;
   .decl-include-row = row;
   .decl-include-col = col;
}
decl-include-end() {
   .decl-include = #nil;
}
at-basic-type(type:BasicTypeId):At {
   loop i = 0:At; .at-c; i++ {
      +at = .at-v[i];
      if (&&, at.type == #basic, at.name.basic == type) {
         return i;
      }
   }
   +build-idx = .at-c++;
   if .at-cap <= .at-c {
      +old-cap = .at-cap;
      grow(.at-cap, .at-c);
      realloc(.at-v, .at-cap, old-cap);
   }
   +at = .at-v[build-idx];
   at.parent = #root;
   at.type = #basic;
   at.name.basic = type;
   return build-idx;
}
at-begin() {
   .build-at = .decl-at;
}
var at-begin-relative-pause:bool;
at-begin-relative-pause() {
   .at-begin-relative-pause = true;
}
at-begin-relative-resume() {
   .at-begin-relative-pause = false;
}
at-begin-relative() {
   if .at-begin-relative-pause {
      .build-at = .decl-at;
   } else {
      .build-at = #relative;
   }
}
Alias[#nil = -1, #0]:i32;
var at-alias-c:Alias;
var at-alias-cap:Alias;
var at-alias-name-v:Id[];
var at-alias-at-v:At[];
var at-alias-pos-v:RowCol+[];
RowCol {row:i32; col:i32};
at-alias(name:Id, row:i32, col:i32) {
   loop i = 0; .at-alias-c; i++ {
      if .at-alias-name-v[i] == name {
         .build-at = .at-alias-at-v[i];
         return;
      }
   }
   C.out.printf("%s:%u:%u: Cannot recognize the '%s, did you forgot to put using '%s = ...;?\n", .input-path, row, col, name.str(), name.str());
   C.exit(#failure);
}
var build-at:At;
at-push(name:Id, type:NameType, row:i32, col:i32) {
   // if .build-at == #root {
   //    'c.printf(".build-at is #root for %s\n", name.str());
   // } elif .build-at == #relative {
   //    'c.printf(".build-at is #relative for %s\n", name.str());
   // } else {
   //    'c.printf(".build-at is %u for %s\n", .build-at, name.str());
   // }
   if .build-at == #relative {
      loop i = 0; .at-alias-c; i++ {
         if .at-alias-name-v[i] == name {
            .build-at = .at-alias-at-v[i];
            return;
         }
      }
   }
   .build-at = at-create(.build-at, type, name);
}
decl-alias(name:Id, at:At, row:i32, col:i32) {
   // if at.ptr().type != #module {
   //    C.out.printf("%s:%u:%u: Alias can only work on namespaces that ends with '%%'\n", .input-path, row, col);
   //    C.exit(#failure);
   //    return;
   // }
   loop i = 0; .at-alias-c; i++ {
      if .at-alias-name-v[i] == name {
         C.out.printf("%s:%u:%u: Alias '%s was already declared at %u:%u\n", .input-path, row, col, name.str(), .at-alias-pos-v[i].row, .at-alias-pos-v[i].col);
         C.exit(#failure);
         return;
      }
   }
   +alias-idx = .at-alias-c++;
   if .at-alias-cap <= .at-alias-c {
      +old-cap = .at-alias-cap;
      grow(.at-alias-cap, .at-alias-c);
      realloc(.at-alias-name-v, .at-alias-cap, old-cap);
      realloc(.at-alias-at-v, .at-alias-cap, old-cap);
      realloc(.at-alias-pos-v, .at-alias-cap, old-cap);
   }
   .at-alias-name-v[alias-idx] = name;
   .at-alias-at-v[alias-idx] = at;
   .at-alias-pos-v[alias-idx].row = row;
   .at-alias-pos-v[alias-idx].col = col;
}
at-root() {
   .build-at = #root;
}
at-graves(graves:i8, row:i32, col:i32) {
   .build-at = .decl-at;
   loop graves > 0 {
      graves--;
      if .build-at == #root {
         C.out.printf("%s:%u:%u: Too many graves in the namespace, going beyond the root namespace\n", .input-path, row, col);
         C.exit(#failure);
      }
      +at = .build-at.ptr();
      .build-at = at.parent;
   }
}
at-done():At {
   return .build-at;
}
at-create(parent:At, type:NameType, name:Id):At {
   +found = .at-map.get-or-insert(parent, type, name, .at-c);
   if found != -1 { return found }
   // loop i = 0:At; .at-c; i++ {
   //    +at = .at-v[i];
   //    if (&&,
   //       at.parent == parent,
   //       at.type == type,
   //       at.name.id == name) {
   //       return i;
   //    }
   // }
   +build-idx = .at-c++;
   if .at-cap <= .at-c {
      +old-cap = .at-cap;
      grow(.at-cap, .at-c);
      realloc(.at-v, .at-cap, old-cap);
   }
   +at = .at-v[build-idx];
   at.parent = parent;
   at.type = type;
   at.name.id = name;
   return build-idx;
}
at-create-basic(basic:BasicTypeId):At {
   loop i = 0:At; .at-c; i++ {
      +at = .at-v[i];
      if (&&,
         at.type == #basic,
         at.name.basic == basic) {
         return i;
      }
   }
   +build-idx = .at-c++;
   if .at-cap <= .at-c {
      +old-cap = .at-cap;
      grow(.at-cap, .at-c);
      realloc(.at-v, .at-cap, old-cap);
   }
   +at = .at-v[build-idx];
   at.parent = #root;
   at.type = #basic;
   at.name.basic = basic;
   return build-idx;
}

var decl-at:At;
#decl-at-nest-limit:i32 = 8;
var decl-at-v:At[#decl-at-nest-limit];
var decl-at-c:u8;
err-msg-namespace-limit(row:i32, col:i32) {
   C.out.printf("%s:%u:%u: Max number of ids in namespace reached\n", .input-path, row, col);
   C.exit(#failure);
}
decl-at-add(name:Id, type:NameType) {
   .build-at = at-create(.build-at, type, name);
}
decl-at-basic(type:BasicTypeId) {
   .build-at = at-create-basic(type);
}
decl-at-begin(row:i32, col:i32) {
   .decl-at-v[.decl-at-c++] = .decl-at;
   .decl-at = .build-at;
}
decl-at-end() {
   .decl-at-c--;
   .decl-at = .decl-at-v[.decl-at-c];
}
TokenDataI32 {
   id:i32;
   id2:i32;
};
TokenDataF32 {
   ff32:f32;
};
TokenDataValue {
   ii32:TokenDataI32+;
   ff32:TokenDataF32+;
} @union;
TokenData {
   row:i32;
   col:i32;
   val:TokenDataValue+;
   // id:i32;
   // id2:i32;
   // val:i32[12];
};
Lexer {
   content:u8[];
   start:u8[];
   cursor:u8[];
   // limit:u8[];
   marker:u8[];
   // ctx-marker:u8[];
} {
   init(lex:this, data:u8[], size:usz) {
      lex.start = data;
      lex.cursor = data;
      lex.content = data;
      // lex.limit = & data[size];
   }
   scan(lex:this):Token @real-name(cp1_lexer_scan);
   get-oct(lex:this):u32 {
      var r-start:Rdr+;
      r-start.reff = lex.start + 2;
      var r-cursor:Rdr+;
      r-cursor.reff = lex.cursor;
      +length = r-cursor.pos - r-start.pos;
      if length > 11 {
         C.out.printf("%s:%u:%u: Integer literal was too long\n", .input-path, .row, .col);
         C.exit(#failure);
      }
      +val = 0:u64;
      loop length {
         val = (val * 8:u64) + (r-start.p1[0] - ''0);
         r-start.pos++;
      }
      if val > 4294967295u {
         C.out.printf("%s:%u:%u: Integer literal was out of bounds\n", .input-path, .row, .col);
         C.exit(#failure);
      }
      return val:u32;
   }
   get-hex(lex:this):u32 {
      var r-start:Rdr+;
      r-start.reff = lex.start + 2;
      var r-cursor:Rdr+;
      r-cursor.reff = lex.cursor;
      +length = r-cursor.pos - r-start.pos;
      if length > 8 {
         C.out.printf("%s:%u:%u: Integer literal was too long\n", .input-path, .row, .col);
         C.exit(#failure);
      }
      +val = 0:u64;
      loop length {
         +c = r-start.p1[0];
         if c >= ''a {
            val = (val * 16:u64) + ((r-start.p1[0] - ''a) + 10);
         } elif c >= ''A {
            val = (val * 16:u64) + ((r-start.p1[0] - ''A) + 10);
         } else {
            val = (val * 16:u64) + (r-start.p1[0] - ''0);
         }
         r-start.pos++;
      }
      if val > 4294967295u {
         C.out.printf("%s:%u:%u: Integer literal was out of bounds\n", .input-path, .row, .col);
         C.exit(#failure);
      }
      return val:u32;
   }
   get-f32(lex:this):f32 {
      var r-start:Rdr+;
      r-start.reff = lex.start;
      var r-cursor:Rdr+;
      r-cursor.reff = lex.cursor;
      +length = r-cursor.pos - r-start.pos - 1;
      var val:f32;
      C.sscanf(r-start.charr, "%f", &val);
      return val;
   }
   get-int(lex:this, len-minus:u8):u32 {
      var r-start:Rdr+;
      r-start.reff = lex.start;
      var r-cursor:Rdr+;
      r-cursor.reff = lex.cursor;
      +length = r-cursor.pos - r-start.pos - len-minus;
      if length > 10 {
         C.out.printf("%s:%u:%u: Integer literal was too long\n", .input-path, .row, .col);
         C.exit(#failure);
      }
      +val = 0:u64;
      loop length {
         val = (val * 10:u64) + (r-start.p1[0] - ''0);
         r-start.pos++;
      }
      var limit:u64;
      if len-minus == 0 { // no suffix, meaning its a signed integer
         limit = 2147483647;
      } else {
         limit = 4294967295u; 
      }
      if val > limit {
         C.out.printf("%s:%u:%u: Integer literal was out of bounds\n", .input-path, .row, .col);
         C.exit(#failure);
      }
      return val:u32;
   }
   get-id(lex:this, begin:u8, end:u8):i32 {
      var r-start:Rdr+;
      r-start.reff = lex.start;
      r-start.pos += begin;
      var r-cursor:Rdr+;
      r-cursor.reff = lex.cursor;
      +length = r-cursor.pos - r-start.pos - end;
      if length > 255 {
         C.out.printf("too long id was detected\n");
         C.exit(#failure);
      }
      +len = length:u8;
      +found = .id-map.get-or-insert(r-start.reff, len, .id-c);
      if found == -1 {
         // inserted
         +id = .id-c++;
         if .id-cap <= .id-c {
            +old-cap = .id-cap;
            grow(.id-cap, .id-c);
            realloc(.id-str-v, .id-cap, old-cap);
            realloc(.id-len-v, .id-cap, old-cap);
         }
         var text:char[] = quick-alloc(len + 1);
         C.memcpy(text, r-start.reff, len);
         text[len] = 0;
         .id-str-v[id] = text;
         .id-len-v[id] = len;
         return id;
      } else {
         // found
         return found;
      }
      // loop i = 0; .id-c; i++ {
      //    if .id-len-v[i] == len {
      //       if C.memcmp(.id-str-v[i], r-start.ref, len) == 0 {
      //          return i;
      //       }
      //    }
      // }
      // +id = .id-c++;
      // if .id-cap <= .id-c {
      //    +old-cap = .id-cap;
      //    grow(.id-cap, .id-c);
      //    realloc(.id-str-v, .id-cap, old-cap);
      //    realloc(.id-len-v, .id-cap, old-cap);
      // }
      // var text:char[] = quick-alloc(len + 1);
      // C.memcpy(text, r-start.ref, len);
      // text[len] = 0;
      // .id-str-v[id] = text;
      // .id-len-v[id] = len;
      // return id;
   }
   get-include(lex:this):i32 {
      var r-start:Rdr+;
      r-start.reff = lex.start;
      r-start.pos += 8;
      var r-cursor:Rdr+;
      r-cursor.reff = lex.cursor;
      +length = 0;
      loop r-start.charr[length] != '') {
         length++;
      }
      // C.printf("include [%.*s]\n", length, r-start.charr);
      if length > 255 {
         C.out.printf("too long include was detected\n");
         C.exit(#failure);
      }
      +len = length:u8;
      +found = .include-map.get-or-insert(r-start.reff, len, .include-c);
      if found == -1 {
         // inserted
         +include = .include-c++;
         if .include-cap <= .include-c {
            +old-cap = .include-cap;
            grow(.include-cap, .include-c);
            realloc(.include-str-v, .include-cap, old-cap);
            realloc(.include-len-v, .include-cap, old-cap);
         }
         var text:char[] = quick-alloc(len + 1);
         C.memcpy(text, r-start.reff, len);
         text[len] = 0;
         .include-str-v[include] = text;
         .include-len-v[include] = len;
         return include;
      } else {
         // found
         return found;
      }
      // loop i = 0; .include-c; i++ {
      //    if .include-len-v[i] == len {
      //       if C.memcmp(.include-str-v[i], r-start.ref, len) == 0 {
      //          return i;
      //       }
      //    }
      // }
      // +include = .include-c++;
      // if .include-cap <= .include-c {
      //    +old-cap = .include-cap;
      //    grow(.include-cap, .include-c);
      //    realloc(.include-str-v, .include-cap, old-cap);
      //    realloc(.include-len-v, .include-cap, old-cap);
      // }
      // var text:char[] = quick-alloc(len + 1);
      // C.memcpy(text, r-start.ref, len);
      // text[len] = 0;
      // .include-str-v[include] = text;
      // .include-len-v[include] = len;
      // return include;
   }
}
var last-token:Token;
Parser {} {
   alloc():Parser;
   free(psr:this);
   parse(psr:this, t:Token, tok:TokenData+) @real-name(cp1Parse);
}
var last-row:i32 @extern;
var last-col:i32 @extern;
var row:i32 @extern;
var col:i32 @extern;
write-func(w:Wtr, header:bool) @inline {
   w.n(.func-c);
   loop i = 0; .func-c; {
      +f = .func-v[i++];
      w.n1(f.farg-c);
      w.n(f.begin-row);
      w.n(f.begin-col);
      w.n(f.end-row);
      w.n(f.end-col);
      f.include.wr(w);
      f.at.wr(w, header);
      f.decl.wr(w, header);
      loop j = 0; f.farg-c; j++ {
         f.farg-v[j].wr(w, header);
      }
      w.n1(f.this-idx);
      if f.this-idx != -1 {
         w.n1(f.this-group);
      }
      w.n1(f.group-c);
      loop j = 0; f.group-c; j++ {
         w.n1(f.group-v[j]);
      }
      if header {
         if f.flags & #inline {
            // proceed
            f.flags.wr(w);
         } else {
            // remove #has-body flag
            (f.flags & (-1 ^ FuncFlags#has-body)):FuncFlags.wr(w);
         }
      } else {
         f.flags.wr(w);
      }
      if (f.flags & #real-name) != #0 {
         f.real-name.wr(w, header);
      }
      if (f.flags & #case) != #0 {
         f.cas.wr(w, header);
      }
      if (f.flags & #decl) != #0 {
         w.n(f.decl-len);
         w.copy(f.decl-str, f.decl-len);
      }
   }
   .func-main.wr(w);
   loop i = 0; .func-c; {
      +f = .func-v[i++];
      if (f.flags & #has-body) == #0 { continue }
      if header {
         if f.flags & #inline {
            // proceed
         } else {
            // remove #has-body flag
            continue;
         }
      }
      var pos-4:Wtr+;
      pos-4.p1 = w.p1;
      w.pos += 4;
      +pos-4-next = w.pos;
      f.lvars-wr(w, header);
      f.stmt-space.wr(w, header);
      pos-4.n4(w.pos - pos-4-next);
   }
}
write-cvar(w:Wtr, header:bool) {
   w.n(.cvar-c);
   loop i = 0; .cvar-c; i++ {
      +cvar = .cvar-v[i];
      cvar.include.wr(w);
      cvar.at.wr(w, header);
      cvar.decl.wr(w, header);
      cvar.flags.wr(w);
      if (cvar.flags & #set-expr) != #0 {
         cvar.expr-set.wr(w, header);
      } else {
         cvar.last-cvar.wr(w);
      }
   }
}
write-gvar(w:Wtr, header:bool) {
   w.n(.gvar-c);
   loop i = 0; .gvar-c; i++ {
      +gvar = .gvar-v[i];
      gvar.include.wr(w);
      gvar.at.wr(w, header);
      gvar.decl.wr(w, header);
   }
}
write-enum(w:Wtr, header:bool) {
   w.n(.enum-c);
   loop i = 0; .enum-c; {
      +e = .enum-v[i++];
      w.n(e.begin-row);
      w.n(e.begin-col);
      w.n(e.end-row);
      w.n(e.end-col);
      e.include.wr(w);
      e.at.wr(w, header);
      e.base-type.wr(w, header);
      e.flags.wr(w);
      if (e.flags & #real-name) != #0 {
         e.real-name.wr(w, header);
      }
   }
}
write-struct(w:Wtr, header:bool) {
   w.n(.struct-c);
   loop i = 0; .struct-c; {
      +s = .struct-v[i++];
      w.n1(s.fvar-c);
      w.n(s.begin-row);
      w.n(s.begin-col);
      w.n(s.end-row);
      w.n(s.end-col);
      s.include.wr(w);
      s.at.wr(w, header);
      s.flags.wr(w);
      // C.out.printf("write-struct %s\n", s.at.ptr().name.id.str());
      // s.name.wr(w, header);
      loop j = 0; s.fvar-c; j++ {
         s.fvar-v[j].wr(w, header);
      }
      if (s.flags & #real-name) != #0 {
         s.real-name.wr(w, header);
      }
   }
}
token-name(tok:Token):char[] {
   return tok.cp1-name();
}
parse-str-init(max-size:i32);
get-row-col(out-row:i32&, out-col:i32&, end:ref, begin:ref) {
   +row = 1;
   +col = 1;
   var r:Rdr+;
   r.reff = begin;
   var r-end:Rdr+;
   r-end.reff = end;
   loop r.pos < r-end.pos {
      if r.p1[0] == ''\n {
         row++;
         col = 1;
      } else {
         col++;
      }
      r.pos++;
   }
   out-row = row;
   if r.p1[0] == ''\n {
      out-col = col - 1;
   } else {
      out-col = col;
   }
}
parse-string(r:Rdr, w:Wtr, ending:char, in-data:ref) {
   w.p1[0] = ''\';
   w.p1[1] = r.p1[1];
   w.pos += 2;
   r.pos += 2;
   loop {
      +c = r.p1[0];
      if c == ''\n {
         get-row-col(+row, +col, r.reff, in-data);
         C.out.printf("%s:%u:%u: Unterminated string\n", .input-path, row, col);
         C.exit(#failure);
      }
      w.p1[0] = c;
      w.pos++;
      r.pos++;
      if c == ending {
         return;
      }
   }
}
parse-comment(r:Rdr, w:Wtr, ending:char, in-data:ref) {
   var r-begin:Rdr+;
   r-begin.pos = r.pos;
   r.pos += 2;
   loop {
      +c = r.p1[0];
      if c == ''\n {
         get-row-col(+row, +col, r.reff, in-data);
         C.out.printf("%s:%u:%u: Unterminated comment\n", .input-path, row, col);
         C.exit(#failure);
      }
      r.pos++;
      if c == ending {
         +len = r.pos - r-begin.pos;
         loop len {
            w.p1[0] = '' ;
            w.pos++;
         }
         return;
      }
   }
}
var input-path:char[] @real-name(input_path);
char-escape-value(c:char):i32;
// var lock-path:char[];
// parser-at-exit();
main(arg-c:intc, arg-v:char[][]):intc @main {
   if false {
      // preprocess-def("", 0);
      export();
   }
   .id-map.init();
   .include-map.init();
   .at-map.init();
   quick-alloc-init();
   .func-main = #nil;
   .decl-include = #nil;
   if arg-c != 3 {
      C.out.printf("Usage: %s [file.cp1] [output.cp1-b]\n", arg-v[0]);
      return 0;
   }
   .input-path = arg-v[1];
   // C.out.printf("reading %s\n", .input-path);
   if !X.Fd.open(++in-fd, .input-path, #read) {
      C.out.printf("Cannot open file for reading: %s\n", .input-path);
      C.exit(#failure);
   }
   +lock-path = arg-v[2];
   // .lock-path = lock-path;
   // if true {
   //    if !C.Fd.open(++fd, lock-path, #create | #excl) {
   //       // Can:T create output file
   //       Sys.stat(lock-path, +out-stat);
   //       in-fd.stat(+in-stat);
   //       var skip;
   //       "#ifdef __APPLE__";
   //          skip = (||, out-stat.mtimespec.sec > in-stat.mtimespec.sec, (&&, out-stat.mtimespec.sec == in-stat.mtimespec.sec, out-stat.mtimespec.nsec > in-stat.mtimespec.nsec));
   //       "#elif defined(__unix__)";
   //          skip = (||, out-stat.mtim.sec > in-stat.mtim.sec, (&&, out-stat.mtim.sec == in-stat.mtim.sec, out-stat.mtim.nsec > in-stat.mtim.nsec));
   //       "#endif";
   //       if skip {
   //          // Skip parsing
   //          C.out.printf("Skipping parsing of %s because the output file is newer than the input file\n", .input-path);
   //          return 0;
   //       }
   //    } else {
   //       // We created the output file, make sure to unlink it when
   //       // the parser gets parsing error
   //       parser-at-exit();
   //    }
   //    fd.close();
   // }
   +in-size = in-fd.seek(0, #end);
   var in-data:u8[] = C.malloc(in-size + 2);
   in-fd.seek(0, #set);
   in-fd.read(in-data, in-size);
   in-data[in-size] = 0;
   in-data[in-size + 1] = 0;
   in-fd.close();

   if (&&, in-data[in-size - 2] == ''\r, in-data[in-size - 1] == ''\n) {
      C.out.printf("Error reading file '%s' because it uses Windows-style line endings\n", .input-path);
      C.out.printf("Please convert the line endings to Unix-style line endings\n");
      C.exit(#failure);
   }
   if in-data[in-size - 1] != ''\n {
      C.out.printf("Error reading file '%s' because it doesn:T end with a new line\n", .input-path);
      C.exit(#failure);
   }
   if true { // Process comments
      +preprocess = false;
      // in-data = convert-old-to-new(in-data, in-size);
      var r-end:Rdr+;
      r-end.reff = in-data;
      r-end.pos += in-size;
      var r:Rdr+;
      r.reff = in-data;
      var new-data = C.malloc(in-size + 1);
      var w:Wtr+;
      w.reff = new-data;
      // Ignore texts outside the top-level curly braces
      // +indent = 0:i32;
      loop r.pos < r-end.pos {
         if r.p1[0] == ''\t {
            get-row-col(+row, +col, r.reff, in-data);
            C.printf("%s:%u:%u: Error, use of tabs is discouraged, please use spaces instead\n", .input-path, row, col);
            C.exit(#failure);
         } elif r.p1[0] == ''/ {
            if r.p1[1] == ''/ {
               if r.reff == in-data {
                  // ok
               } elif (||, r.p1[-1] == '' , r.p1[-1] == ''\n) {
                  // ok
               } else {
                  get-row-col(+row, +col, r.reff, in-data);
                  C.out.printf("%s:%u:%u: There must be a space or tab before the // comment\n", .input-path, row, col);
                  C.exit(#failure);
               }
               // comment
               r.pos += 2;
               loop {
                  if r.p1[0] == ''\n {
                     break;
                  }
                  r.pos++;
               }
               continue;
            }
         } elif (&&,
            r.p1[0] == ''#,
            r.p1[1] == ''i,
            r.p1[2] == ''n,
            r.p1[3] == ''c,
            r.p1[4] == ''l,
            r.p1[5] == ''u,
            r.p1[6] == ''d,
            r.p1[7] == ''e,
            r.p1[8] == '' ,
            r.p1[9] == ''<,
            ) {
            // comment
            r.pos += 10;
            loop {
               if r.p1[0] == ''\n {
                  break;
               }
               r.pos++;
            }
            continue;
         } elif (&&,
            r.p1[0] == ''#,
            r.p1[1] == ''i,
            r.p1[2] == ''m,
            r.p1[3] == ''p,
            r.p1[4] == ''o,
            r.p1[5] == ''r,
            r.p1[6] == ''t,
            r.p1[7] == '' ,
            r.p1[8] == ''",
            ) {
            // comment
            r.pos += 9;
            loop {
               if r.p1[0] == ''\n {
                  break;
               }
               r.pos++;
            }
            continue;
         // } elif r.p1[0] == ''{ {
         //    indent++;
         // } elif r.p1[0] == ''} {
         //    if indent == 0 {
         //       get-row-col(+row, +col, r.ref, in-data);
         //       C.out.printf("%s:%u:%u: Too much '}' detected\n", .input-path, row, col);
         //       C.exit(#failure);
         //    }
         //    indent--;
         // } elif indent == 0 {
         //    if r.p1[0] == ''\n {
         //       w.p1[0] = ''\n;
         //       w.pos++;
         //    }
         //    r.pos++;
         //    continue;
         } elif r.p1[0] == ''\' {
            if r.p1[1] == ''\' {
               // char
               if r.p1[2] == ''\\ {
                  if r.p1[3] == ''" {
                     get-row-col(+row, +col, r.reff, in-data);
                     C.out.printf("%s:%u:%u: char ''\\\" is invalid, please use ''\" instead\n", .input-path, row, col);
                     C.exit(#failure);
                  }
                  w.p1[0] = ''\';
                  w.p1[1] = ''\';
                  w.p1[2] = ''\\;
                  w.p1[3] = r.p1[3];
                  w.pos += 4;
                  r.pos += 4;
                  continue;
               } else {
                  w.p1[0] = ''\';
                  w.p1[1] = ''\';
                  w.p1[2] = r.p1[2];
                  w.pos += 3;
                  r.pos += 3;
                  continue;
               }
            } elif (&&, r.p1[2] == '' , (||, r.p1[1] == ''-, r.p1[1] == ''=)) {
               // string
               w.p1[0] = ''\';
               w.p1[1] = r.p1[1];
               w.p1[2] = r.p1[2];
               w.pos += 3;
               r.pos += 3;
               loop {
                  +c = r.p1[0];
                  w.p1[0] = c;
                  w.pos++;
                  r.pos++;
                  if c == ''\n {
                     break;
                  }
                  if r.pos >= r-end.pos {
                     get-row-col(+row, +col, r.reff, in-data);
                     C.out.printf("%s:%u:%u: String did not end with a new line\n", .input-path, row, col);
                     C.exit(#failure);
                  }
               }
               continue;
               // Codes to check if syntax highlighting for strings are working
               "#if 0";
                  '"hello";
                  '<hello>;
                  '[hello];
                  '{hello};
                  '(hello);
               "#endif";
            } elif r.p1[1] == ''" {
               parse-string(r, w, ''", in-data);
               continue;
            } elif r.p1[1] == ''| {
               parse-string(r, w, ''|, in-data);
               continue;
            } elif r.p1[1] == ''; {
               parse-string(r, w, '';, in-data);
               continue;
            } elif r.p1[1] == ''_ {
               parse-string(r, w, ''_, in-data);
               continue;
            } elif r.p1[1] == ''+ {
               parse-string(r, w, ''+, in-data);
               continue;
            } elif r.p1[1] == ''< {
               parse-string(r, w, ''>, in-data);
               continue;
            } elif r.p1[1] == ''[ {
               parse-string(r, w, ''], in-data);
               continue;
            } elif r.p1[1] == ''{ {
               parse-string(r, w, ''}, in-data);
               continue;
            } elif r.p1[1] == ''( {
               parse-string(r, w, ''), in-data);
               continue;
            }
         } elif r.p1[0] == ''" { // C-string
            w.p1[0] = ''";
            w.pos++;
            r.pos++;
            loop {
               if r.p1[0] == ''\n {
                  get-row-col(+row, +col, r.reff, in-data);
                  C.out.printf("%s:%u:%u: Unterminated string\n", .input-path, row, col);
                  C.exit(#failure);
               } elif r.p1[0] == ''" {
                  w.p1[0] = ''";
                  w.pos++;
                  r.pos++;
                  break;
               } elif r.p1[0] == ''\\ {
                  switch r.p1[1] {
                     case ''0 { }
                     case ''\\ { }
                     case ''" { }
                     case ''\' { }
                     case ''a { }
                     case ''b { }
                     case ''f { }
                     case ''n { }
                     case ''r { }
                     case ''t { }
                     case ''v { }
                     default {
                        get-row-col(+row, +col, r.reff, in-data);
                        C.out.printf("%s:%u:%u: Encountered invalid escape sequence in the string: '\\%c'\n", .input-path, row, col, r.p1[1]);
                        C.exit(#failure);
                     }
                  }
                  w.p1[0] = ''\\;
                  w.p1[1] = r.p1[1];
                  w.pos += 2;
                  r.pos += 2;
               } else {
                  w.p1[0] = r.p1[0];
                  w.pos++;
                  r.pos++;
               }
               if r.pos >= r-end.pos {
                  get-row-col(+row, +col, r.reff, in-data);
                  C.out.printf("%s:%u:%u: Unterminated string\n", .input-path, row, col);
                  C.exit(#failure);
               }
            }
            continue;
         }
         w.p1[0] = r.p1[0];
         w.pos++;
         r.pos++;
      }
      w.p1[0] = ''\0;
      C.free(in-data);
      in-data = new-data;
      var w-begin:Wtr+;
      w-begin.reff = new-data;
      in-size = w.pos - w-begin.pos;

      // C.Fd.open(+fd, "out:parsed.cp1", #write | #truncate | #create, 0o644);
      // fd.write(in-data, in-size);
      // fd.close();
      // C.out.write(in-data, in-size);

      // if preprocess {
      //    preprocess-init();
      //    preprocess(in-data, in-size);
      // }
   }
   var r-end:Rdr+;
   r-end.reff = in-data;
   r-end.pos += in-size;
   parse-str-init(in-size);

   .id-cap = 64;
   malloc-arr(.id-str-v, .id-cap);
   malloc-arr(.id-len-v, .id-cap);
   .include-cap = 64;
   malloc-arr(.include-str-v, .include-cap);
   malloc-arr(.include-len-v, .include-cap);
   .at-cap = 64:At;
   malloc-arr(.at-v, .at-cap);
   .at-c = 2:At;
   .at-v[0].type = #basic;
   .at-v[0].parent = #nil;
   .at-v[0].name.basic = #root;
   .at-v[1].type = #basic;
   .at-v[1].parent = #nil;
   .at-v[1].name.basic = #relative;
   .func-cap = 32:Func;
   malloc-arr(.func-v, .func-cap);
   .struct-cap = 32:Struct;
   malloc-arr(.struct-v, .struct-cap);
   .decl-fvar-cap = 32;
   malloc-arr(.decl-fvar-v, .decl-fvar-cap);

   +psr = Parser.alloc();
   Lexer.init(+lex, in-data, in-size);
   +next-row = 1;
   +next-col = 1;
   .row = 1;
   .col = 1;
   var tok:TokenData+;
   loop {
      tok.row = next-row;
      tok.col = next-col;
      +t = lex.scan();
      if true { // t != #space)
         // when reporting the row and column of tokens, skip the spaces
         +pos = lex.start;
         loop pos < r-end.p1 {
            if pos[0] == ''  {
               tok.col++;
            } elif pos[0] == ''\n {
               tok.row++;
               tok.col = 1;
            } else {
               break;
            }
            pos++;
         }
      }
      .last-row = .row;
      .last-col = .col;
      .row = tok.row;
      .col = tok.col;
      // 'c.out.printf("%s:%u:%u: token %s\n", .input-path, tok.row, tok.col, t.cp1-name());
      // 'c.out.flush();
      // if (&&, t >= #id-quote, t < #id) {
      //    tok.id = lex.get-id(1, 0);
      //    .last-token = t;
      //    psr.parse(t, tok);
      // } else {
         switch t {
            // case #id-lparen {
            //    tok.id = lex.get-id(0, 1);
            //    psr.parse(t, tok);
            // }
            case #char1 {
               var r:Rdr+;
               r.reff = lex.start;
               tok.val.ii32.id = r.p1[2];
               .last-token = t;
               psr.parse(t, tok);
            }
            case #char2 {
               var r:Rdr+;
               r.reff = lex.start;
               tok.val.ii32.id = char-escape-value(r.p1[3]);
               .last-token = t;
               psr.parse(t, tok);
            }
            case #space-at-real-name-str {
               // find the '@' character and start counting from there
               var r-start:Rdr+;
               r-start.reff = lex.start;
               +start = 11;
               loop {
                  start++;
                  r-start.pos++;
                  if r-start.p1[0] == ''@ {
                     break;
                  }
               }
               tok.val.ii32.id = lex.get-id(start, 1);
               .last-token = t;
               psr.parse(t, tok);
            }
            case #num-f32 {
               tok.val.ff32.ff32 = lex.get-f32();
               .last-token = t;
               psr.parse(t, tok);
            }
            case #num-u32 {
               tok.val.ii32.id = lex.get-int(1);
               .last-token = t;
               psr.parse(t, tok);
            }
            case #num-i32 {
               tok.val.ii32.id = lex.get-int(0);
               .last-token = t;
               psr.parse(t, tok);
            }
            case #num-oct {
               tok.val.ii32.id = lex.get-oct();
               .last-token = t;
               psr.parse(t, tok);
            }
            case #num-hex {
               tok.val.ii32.id = lex.get-hex();
               .last-token = t;
               psr.parse(t, tok);
            }
            case #include {
               tok.val.ii32.id = lex.get-include();
               .last-token = t;
               psr.parse(t, tok);
            }
            case #loop {
               +found-semicolon = false;
               if (&&, lex.cursor[0] != '' , lex.cursor[0] != ''\n)  {
                  C.out.printf("%s:%u:%u: There must be a space or new line after the keyword 'loop'\n", .input-path, .row, .col);
                  C.exit(#failure);
               }
               loop i = 0; {
                  if lex.cursor[i] == ''\0 {
                     C.out.printf("%s:%u:%u: Keyword 'loop' was found but was not followed by '{'\n", .input-path, .row, .col);
                     C.exit(#failure);
                  } elif lex.cursor[i] == ''{ {
                     break;
                  } elif lex.cursor[i] == ''; {
                     found-semicolon = true;
                     break;
                  }
                  i++;
               }
               if found-semicolon {
                  t = #loop-with-semicolon;
               }
               .last-token = t;
               psr.parse(t, tok);
            }
            case #id {
               tok.val.ii32.id = lex.get-id(0, 0);
               if lex.cursor[0] == ''( {
                  t = #id-then-open-parenthesis;
               }
               .last-token = t;
               psr.parse(t, tok);
            }
            case #hash-id {
               tok.val.ii32.id = lex.get-id(1, 0);
               .last-token = t;
               psr.parse(t, tok);
            }
            case #dot-id-upper {
               tok.val.ii32.id = lex.get-id(1, 0);
               .last-token = t;
               psr.parse(t, tok);
            }
            case #id-upper {
               tok.val.ii32.id = lex.get-id(0, 0);
               if lex.cursor[0] == ''( {
                  t = #id-then-open-parenthesis;
               }
               .last-token = t;
               psr.parse(t, tok);
            }
            case #space {
               if lex.cursor[0] == ''{ {
                  t = #space-then-open-curly-brace;
               }
               .last-token = t;
               psr.parse(t, tok);
            }
            default {
               .last-token = t;
               psr.parse(t, tok);
            }
         }
      // }
      if t == #end { break }
      +pos = lex.start;
      loop pos < lex.cursor {
         if (pos[0] & 128) == 0 {
            if pos[0] == ''\n {
               next-row++;
               next-col = 1;
            } else {
               next-col++;
            }
         }
         pos++;
      }
   }
   .last-token = #nil;
   psr.parse(#nil, tok);
   psr.free();
   // C.out.printf("parsing finished\n");
   var w-begin:Wtr+;
   w-begin.reff = quick-alloc((in-size << 2) + 1024);
   var w:Wtr+;
   w.reff = w-begin.reff;
   w.n(.id-c);
   loop i = 0; .id-c; i++ {
      w.n1(.id-len-v[i]);
      w.copy(.id-str-v[i], .id-len-v[i]);
      w.n1(0);
   }
   +id-bit8-c = (.id-c + 7) >> 3;
   malloc-arr(.id-in-header-v, id-bit8-c);
   malloc-arr(.id-in-header-idx-v, .id-c);
   malloc-arr(.id-in-header-id-v, .id-c);

   w.n(.include-c);
   // C.out.printf("There are %u includes\n", .include-c);
   loop i = 0; .include-c; i++ {
      w.n1(.include-len-v[i]);
      w.copy(.include-str-v[i], .include-len-v[i]);
      w.n1(0);
   }

   +at-bit8-c = (.at-c + 7) >> 3;
   malloc-arr(.at-in-header-v, at-bit8-c);
   malloc-arr(.at-in-header-idx-v, .at-c);
   malloc-arr(.at-in-header-at-v, .at-c);

   w.n(.at-c);
   loop i = 0; .at-c; i++ {
      +at = .at-v[i];
      at.type.wr(w);
      if at.type == #basic {
         at.name.basic.wr(w);
      } else {
         at.parent.wr(w, false);
         at.name.id.wr(w, false);
      }
   }

   write-cvar(w, false);
   write-gvar(w, false);
   write-enum(w, false);
   write-struct(w, false);
   write-func(w, false);
   
   var out-path:char[] = C.malloc(C.strlen(lock-path) + 4 + 1);
   C.sprintf(out-path, "%s.tmp", lock-path);
   +out-path-len = C.strlen(out-path);
   if !X.Fd.open(++out-fd, out-path, #create | #truncate | #write, 0o644) {
      C.out.printf("Cannot open file for writing: %s\n", out-path);
      C.exit(#failure);
   }
   out-fd.write(w-begin.reff, w.pos - w-begin.pos);
   out-fd.close();

   w.reff = w-begin.reff;
   w.n(.id-in-header-c);
   loop j = 0; .id-in-header-c; j++ {
      +i = .id-in-header-id-v[j];
      w.n1(.id-len-v[i]);
      w.copy(.id-str-v[i], .id-len-v[i]);
      w.n1(0);
   }
   w.n(.include-c);
   loop i = 0; .include-c; i++ {
      w.n1(.include-len-v[i]);
      w.copy(.include-str-v[i], .include-len-v[i]);
      w.n1(0);
   }
   w.n(.at-in-header-c);
   loop j = 0; .at-in-header-c; j++ {
      +i = .at-in-header-at-v[j];
      +at = .at-v[i];
      at.type.wr(w);
      if at.type == #basic {
         at.name.basic.wr(w);
      } else {
         at.parent.wr-header(w);
         at.name.id.wr-header(w);
      }
   }
   write-cvar(w, true);
   write-gvar(w, true);
   write-enum(w, true);
   write-struct(w, true);
   write-func(w, true);

   out-path[out-path-len - 5] = ''h;
   if !X.Fd.open(out-fd, out-path, #create | #truncate | #write, 0o644) {
      C.out.printf("Cannot open file for writing: %s\n", out-path);
      C.exit(#failure);
   }
   out-fd.write(w-begin.reff, w.pos - w-begin.pos);
   out-fd.close();
   var final-path:char[512];
   out-path[out-path-len - 5] = ''b;
   C.memcpy(final-path, out-path, out-path-len - 4);
   final-path[out-path-len - 4] = 0;
   C.rename(out-path, final-path);
   // .lock-path = null; // Do not unlink lock-path at exit
   out-path[out-path-len - 5] = ''h;
   C.memcpy(final-path, out-path, out-path-len - 4);
   final-path[out-path-len - 4] = 0;
   C.rename(out-path, final-path);
   return 0;
}
 

}
