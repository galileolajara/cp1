rule c
 command = clang $flags -O3 -flto -Werror=format -Wno-incompatible-pointer-types -I. -c $in -o $out

rule cpp
 command = clang++ $flags -O3 -flto -Werror=format -Wno-incompatible-pointer-types -I. -c $in -o $out

rule ld-cpp
 command = clang++ $flags -O3 -flto -Werror=format -Wno-incompatible-pointer-types -I. $in -o $out

build out/parser.lc.c.o: c parser.lc.c
build out/parser.c.o: c parser.c | export.h lexer.c lc_parser.c
build bin/parser: ld-cpp out/parser.lc.c.o out/parser.c.o out/hashtable.cpp.o
build out/compiler.lc.c.o: c compiler.lc.c
build out/str.c.o: c str.c
build bin/compiler: ld-cpp out/compiler.lc.c.o out/str.c.o out/hashtable.cpp.o

rule c2
 command = clang $flags -O3 -flto -Werror=format -Wno-incompatible-pointer-types -DGLC_NEW -I. -c $in -o $out

rule cpp2
 command = clang++ $flags -O3 -flto -Werror=format -Wno-incompatible-pointer-types -DGLC_NEW -I. -c $in -o $out

rule ld2
 command = clang $flags -O3 -flto -Werror=format -Wno-incompatible-pointer-types -DGLC_NEW -I. $in -o $out

rule ld-cpp2
 command = clang++ $flags -O3 -flto -Werror=format -Wno-incompatible-pointer-types -DGLC_NEW -I. $in -o $out

rule re2c
 command = re2c --input-encoding utf8 --utf8 $in -o $out

rule ld-unsanitized
 command = clang -I. $in -o $out

rule lemon
 restat = true
 command = out/lemon -dout $in

rule node
 command = node $in $out

rule parser
 restat = true
 command = bin/parser $in

rule compiler
 restat = true
 command = bin/compiler $in $out

rule run
 command = $in $out

build out/hash-table-size: ld-cpp2 hashtable.cpp
 flags = -DGLC_GET_SIZE
build out/hash-table-size.lc: run out/hash-table-size

build stdc/stdio.lc-t stdc/stdio.lc-h: parser stdc/stdio.lc | bin/parser
build stdc/fcntl.lc-t stdc/fcntl.lc-h: parser stdc/fcntl.lc | bin/parser
build stdc/stdlib.lc-t stdc/stdlib.lc-h: parser stdc/stdlib.lc | bin/parser
build stdc/unistd.lc-t stdc/unistd.lc-h: parser stdc/unistd.lc | bin/parser
build stdc/string.lc-t stdc/string.lc-h: parser stdc/string.lc | bin/parser

build lc/compiler.lc-t: parser lc/compiler.lc | bin/parser
build lc/parser.lc-t: parser lc/parser.lc | bin/parser
build lc/export.lc-t: parser lc/export.lc | bin/parser
build lc/var.lc-t: parser lc/var.lc | bin/parser
build lc/enum.lc-t: parser lc/enum.lc | bin/parser
build lc/expr.lc-t: parser lc/expr.lc | bin/parser
build lc/lvar.lc-t: parser lc/lvar.lc | bin/parser
build lc/func.lc-t: parser lc/func.lc | bin/parser
build lc/stmt.lc-t: parser lc/stmt.lc | bin/parser
build lc/struct.lc-t: parser lc/struct.lc | bin/parser
build lc/space.lc-t: parser lc/space.lc | bin/parser
build lc/return.lc-t: parser lc/return.lc | bin/parser
build lc/continue.lc-t: parser lc/continue.lc | bin/parser
build lc/gvar.lc-t: parser lc/gvar.lc | bin/parser
build lc/fvar.lc-t: parser lc/fvar.lc | bin/parser
build lc/assign.lc-t: parser lc/assign.lc | bin/parser
build lc/size.lc-t: parser lc/size.lc | bin/parser
build lc/int.lc-t: parser lc/int.lc | bin/parser
build lc/null.lc-t: parser lc/null.lc | bin/parser
build lc/call.lc-t: parser lc/call.lc | bin/parser
build lc/char.lc-t: parser lc/char.lc | bin/parser
build lc/bool.lc-t: parser lc/bool.lc | bin/parser
build lc/compare.lc-t: parser lc/compare.lc | bin/parser
build lc/while.lc-t: parser lc/while.lc | bin/parser
build lc/do.lc-t: parser lc/do.lc | bin/parser
build lc/if.lc-t: parser lc/if.lc | bin/parser
build lc/switch.lc-t: parser lc/switch.lc | bin/parser
build lc/index.lc-t: parser lc/index.lc | bin/parser
build lc/cast.lc-t: parser lc/cast.lc | bin/parser
build lc/ref.lc-t: parser lc/ref.lc | bin/parser
build lc/unary.lc-t: parser lc/unary.lc | bin/parser
build lc/cvar.lc-t: parser lc/cvar.lc | bin/parser
build lc/str.lc-t: parser lc/str.lc | bin/parser
build lc/bools.lc-t: parser lc/bools.lc | bin/parser
build lc/math.lc-t: parser lc/math.lc | bin/parser
build lc/break.lc-t: parser lc/break.lc | bin/parser
build lc/rdr.lc-t: parser lc/rdr.lc | bin/parser
build lc/wtr.lc-t: parser lc/wtr.lc | bin/parser
build out/token.lc: node token.lc.js | out/lc_parser.h
build out/token.lc-t: parser out/token.lc | bin/parser
build out/hash-table-size.lc-t: parser out/hash-table-size.lc | bin/parser
build out/compiler-common.lc out/parser-common.lc: node split.js lc/common.lc
build out/compiler-common.lc-t: parser out/compiler-common.lc | bin/parser
build out/parser-common.lc-t: parser out/parser-common.lc | bin/parser
build out/parser2.lc.c: compiler lc/parser.lc-t out/token.lc-t lc/break.lc-t lc/math.lc-t lc/bools.lc-t lc/str.lc-t lc/cvar.lc-t lc/unary.lc-t lc/ref.lc-t lc/cast.lc-t lc/index.lc-t lc/switch.lc-t lc/if.lc-t lc/do.lc-t lc/while.lc-t lc/compare.lc-t lc/bool.lc-t lc/char.lc-t lc/call.lc-t lc/null.lc-t lc/int.lc-t lc/size.lc-t lc/assign.lc-t lc/fvar.lc-t lc/gvar.lc-t lc/continue.lc-t lc/return.lc-t lc/space.lc-t lc/export.lc-t lc/rdr.lc-t lc/wtr.lc-t lc/var.lc-t lc/func.lc-t lc/lvar.lc-t lc/enum.lc-t lc/expr.lc-t lc/stmt.lc-t out/parser-common.lc-t lc/struct.lc-t stdc/stdio.lc-t stdc/fcntl.lc-t stdc/stdlib.lc-t stdc/unistd.lc-t stdc/string.lc-t out/hash-table-size.lc-t | bin/compiler
build out/compiler2.lc.c: compiler lc/compiler.lc-t out/compiler-common.lc-t lc/rdr.lc-t lc/wtr.lc-t lc/func.lc-t lc/struct.lc-t lc/enum.lc-t lc/expr.lc-t lc/stmt.lc-t lc/var.lc-t lc/assign.lc-t lc/compare.lc-t lc/bool.lc-t lc/char.lc-t lc/math.lc-t lc/unary.lc-t lc/ref.lc-t lc/cast.lc-t lc/lvar.lc-t lc/fvar.lc-t lc/gvar.lc-t lc/cvar.lc-t lc/bools.lc-t lc/call.lc-t lc/str.lc-t lc/int.lc-t lc/size.lc-t lc/null.lc-t lc/index.lc-t lc/if.lc-t lc/switch.lc-t lc/do.lc-t lc/while.lc-t lc/continue.lc-t lc/break.lc-t lc/return.lc-t lc/space.lc-t lc/export.lc-t stdc/stdio.lc-t stdc/fcntl.lc-t stdc/stdlib.lc-t stdc/unistd.lc-t stdc/string.lc-t out/hash-table-size.lc-t | bin/compiler
build out/export.h: node export.js out/parser2.lc.c
build out/lexer.c: re2c lexer-re2c.c
build out/lemon: ld-unsanitized lemon.c
build out/lc_parser.c out/lc_parser.h: lemon lc_parser.y | out/lemon
build out/parser2.lc.c.o: c2 out/parser2.lc.c
build out/parser2.c.o: c2 parser2.c | out/export.h out/lexer.c out/lc_parser.c
build out/hashtable.cpp.o: cpp2 hashtable.cpp
build out/parser2: ld-cpp2 out/parser2.lc.c.o out/parser2.c.o out/hashtable.cpp.o
build out/compiler2.lc.c.o: c2 out/compiler2.lc.c
build out/str2.c.o: c2 str2.c
build out/compiler2: ld-cpp2 out/compiler2.lc.c.o out/str2.c.o out/hashtable.cpp.o
