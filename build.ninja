rule ld
 command = clang -O3 -Werror=format -Wno-incompatible-pointer-types -I. $in -o $out

build bin/parser: ld parser.glc.c parser.c | export.h lexer.c glc_parser.c
build bin/compiler: ld compiler.glc.c str.c

rule ld2
 command = clang -Werror=format -Wno-incompatible-pointer-types -DGLC_NEW -I. $in -o $out

rule re2c
 command = re2c --input-encoding utf8 --utf8 $in -o $out

rule ld-unsanitized
 command = clang -I. $in -o $out

rule lemon
 restat = true
 command = out/lemon -dout $in

rule node
 command = node $in $out

rule parser
 restat = true
 command = bin/parser $in

rule compiler
 restat = true
 command = bin/compiler $in $out

build stdc/stdio.glc-t stdc/stdio.glc-h: parser stdc/stdio.glc | bin/parser
build stdc/fcntl.glc-t stdc/fcntl.glc-h: parser stdc/fcntl.glc | bin/parser
build stdc/stdlib.glc-t stdc/stdlib.glc-h: parser stdc/stdlib.glc | bin/parser
build stdc/unistd.glc-t stdc/unistd.glc-h: parser stdc/unistd.glc | bin/parser
build stdc/string.glc-t stdc/string.glc-h: parser stdc/string.glc | bin/parser

build compiler.glc-t: parser compiler.glc | bin/parser
build parser.glc-t: parser parser.glc | bin/parser
build export.glc-t: parser export.glc | bin/parser
build var.glc-t: parser var.glc | bin/parser
build enum.glc-t: parser enum.glc | bin/parser
build expr.glc-t: parser expr.glc | bin/parser
build lvar.glc-t: parser lvar.glc | bin/parser
build func.glc-t: parser func.glc | bin/parser
build stmt.glc-t: parser stmt.glc | bin/parser
build struct.glc-t: parser struct.glc | bin/parser
build space.glc-t: parser space.glc | bin/parser
build return.glc-t: parser return.glc | bin/parser
build continue.glc-t: parser continue.glc | bin/parser
build gvar.glc-t: parser gvar.glc | bin/parser
build fvar.glc-t: parser fvar.glc | bin/parser
build assign.glc-t: parser assign.glc | bin/parser
build size.glc-t: parser size.glc | bin/parser
build int.glc-t: parser int.glc | bin/parser
build null.glc-t: parser null.glc | bin/parser
build call.glc-t: parser call.glc | bin/parser
build char.glc-t: parser char.glc | bin/parser
build bool.glc-t: parser bool.glc | bin/parser
build compare.glc-t: parser compare.glc | bin/parser
build while.glc-t: parser while.glc | bin/parser
build do.glc-t: parser do.glc | bin/parser
build if.glc-t: parser if.glc | bin/parser
build switch.glc-t: parser switch.glc | bin/parser
build index.glc-t: parser index.glc | bin/parser
build cast.glc-t: parser cast.glc | bin/parser
build ref.glc-t: parser ref.glc | bin/parser
build unary.glc-t: parser unary.glc | bin/parser
build cvar.glc-t: parser cvar.glc | bin/parser
build str.glc-t: parser str.glc | bin/parser
build bools.glc-t: parser bools.glc | bin/parser
build math.glc-t: parser math.glc | bin/parser
build break.glc-t: parser break.glc | bin/parser
build rdr.glc-t: parser rdr.glc | bin/parser
build wtr.glc-t: parser wtr.glc | bin/parser
build out/token.glc: node token.glc.js | out/glc_parser.h
build out/token.glc-t: parser out/token.glc | bin/parser
build out/compiler-common.glc out/parser-common.glc: node split.js common.glc
build out/compiler-common.glc-t: parser out/compiler-common.glc | bin/parser
build out/parser-common.glc-t: parser out/parser-common.glc | bin/parser
build out/parser2.glc.c: compiler parser.glc-t out/token.glc-t break.glc-t math.glc-t bools.glc-t str.glc-t cvar.glc-t unary.glc-t ref.glc-t cast.glc-t index.glc-t switch.glc-t if.glc-t do.glc-t while.glc-t compare.glc-t bool.glc-t char.glc-t call.glc-t null.glc-t int.glc-t size.glc-t assign.glc-t fvar.glc-t gvar.glc-t continue.glc-t return.glc-t space.glc-t export.glc-t rdr.glc-t wtr.glc-t var.glc-t func.glc-t lvar.glc-t enum.glc-t expr.glc-t stmt.glc-t out/parser-common.glc-t struct.glc-t stdc/stdio.glc-t stdc/fcntl.glc-t stdc/stdlib.glc-t stdc/unistd.glc-t stdc/string.glc-t | bin/compiler
build out/compiler2.glc.c: compiler compiler.glc-t out/compiler-common.glc-t rdr.glc-t wtr.glc-t func.glc-t struct.glc-t enum.glc-t expr.glc-t stmt.glc-t var.glc-t assign.glc-t compare.glc-t bool.glc-t char.glc-t math.glc-t unary.glc-t ref.glc-t cast.glc-t lvar.glc-t fvar.glc-t gvar.glc-t cvar.glc-t bools.glc-t call.glc-t str.glc-t int.glc-t size.glc-t null.glc-t index.glc-t if.glc-t switch.glc-t do.glc-t while.glc-t continue.glc-t break.glc-t return.glc-t space.glc-t export.glc-t stdc/stdio.glc-t stdc/fcntl.glc-t stdc/stdlib.glc-t stdc/unistd.glc-t stdc/string.glc-t | bin/compiler
build out/export.h: node export.js out/parser2.glc.c
build out/lexer.c: re2c lexer-re2c.c
build out/lemon: ld-unsanitized lemon.c
build out/glc_parser.c out/glc_parser.h: lemon glc_parser.y | out/lemon
build out/parser2: ld2 out/parser2.glc.c parser2.c | out/export.h out/lexer.c out/glc_parser.c
build out/compiler2: ld2 out/compiler2.glc.c str2.c
