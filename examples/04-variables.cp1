#include <stdio.h>
#include <stdlib.h>

using 'c = :stdc;
:struct(x:i32, y:i32) {
   init(s:this) {
      s.x = 0;
      s.y = 0;
   }
}
main():intc {
   +an-integer = 1;
   var also-an-integer:i32 = 8;

   var pointer-to-struct:struct;
   pointer-to-struct = 'c.malloc(:struct[:usz]); // allocate the struct on heap

   var pointer-to-another-struct:struct;
   'c.malloc-one(pointer-to-another-struct); // malloc-one automatically computes the size needed

   var struct-in-the-stack:struct+; // notice the plus '+' symbol after /struct
   struct-in-the-stack.x = 7;

   var structs:struct+[];
   'c.malloc-arr(structs, 7); // allocates 7 structs, notice the plus '+' symbol after /struct

   var pointer-to-structs:struct[]; // no '+' symbol after :struct, pointers to structs
   'c.malloc-arr(pointer-to-structs, 7); // which means allocate 7 pointers to struct
   'c.malloc-one(pointer-to-structs[0]); // allocate the first struct

   :struct.init(+another-struct-in-the-stack);
   'c.printf("This must be zero and zero: %d, %d\n", another-struct-in-the-stack.x, another-struct-in-the-stack.y);
   return 0;
}
