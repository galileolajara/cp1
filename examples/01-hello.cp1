require "LibCp1/stdout.cp1";
using C1 = LibCp1;

enum Direction[#right, #up, #left, #down]:u8 { // An 8-bit unsigned enum
   string(e:this):char[] { // An example method for enums
      switch e {
         case #right { return "right" }
         case #up { return "up" }
         case #left { return "left" }
         case #down { return "down" }
         default { return "error" }
      }
   }
}

struct Position[x:i32, y:i32] { // A struct
   go(pos:this, dir:Direction) {
      switch dir {
         case #right { pos.x++ }
         case #up { pos.y++ }
         case #left { pos.x-- }
         case #down { pos.y-- }
      }
   }
}

main():intc { // intc is for compatibility with C's int, prefer to use i32 elsewhere
   C1.stdout{"Hello world!\n"}

   one! = 1; // '!' is the quickest way to declare a variable
   seven! = 7;
   sum! = one + seven;
   C1.stdout{one " + " seven " = " sum "\n"}

   var typed-var:i32 = 9;
   C1.stdout{"typed-var is " typed-var "\n"}

   var pos:Position.; // '.' means this is allocated on the stack
   pos.x = 9;
   pos.y = 11;
   pos.go(#left);
   C1.stdout{"position is at " pos.x ", " pos.y "\n"}

   dir! = Direction#left;
   C1.stdout{"direction is " dir.string() ''\n}
   return 0;
}
