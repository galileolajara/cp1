{alias 'c = %stdc}
{/struct(.x`int, .y`int)
   {{:init(s`this)}
      s.x = 0;
      s.y = 0;
   }
   {{:new(s`this)}
   }
}
{{:main()`int}
   +an-integer = 1;
   {+also-an-integer`int = 8}

   {+pointer-to-struct/struct}
   pointer-to-struct = 'c:malloc(/struct[`size]); `` allocate the struct on heap

   {+pointer-to-another-struct/struct}
   'c:malloc-one(pointer-to-another-struct); `` malloc-one automatically computes the size needed

   {+struct-in-the-stack/struct+} `` notice the plus '+' symbol after /struct
   struct-in-the-stack.x = 7;

   {+structs/struct+[]}
   'c:malloc-arr(structs, 7); `` allocates 7 structs, notice the plus '+' symbol after /struct

   {+pointer-to-structs/struct[]} `` no '+' symbol after /struct
   'c:malloc-arr(pointer-to-structs, 7); `` which means allocate 7 pointers to struct
   'c:malloc-one(pointer-to-structs[0]); `` allocate the first struct

   /struct:init(+another-struct-in-the-stack);
   'c.out:printf("This must be zero and zero: %d, %d\n", another-struct-in-the-stack.x, another-struct-in-the-stack.y);
   {return 0}
}
