#include <stdio.h>

using C = LibC;

struct Coord[x:i32, y:i32] { // a struct
   init(s:this) { // a method
      s.x = 0;
      s.y = 0;
   }
   walk(s:this, dir:Dir) { // a method
      dir.print();
      switch dir {
         case #left {
            s.x++;
         }
         case #up {
            s.y++;
         }
         case #right {
            s.x--;
         }
         case #down {
            s.y--;
         }
      }
   }
}

enum Dir[#left, #up, #right, #down]:u8 { // an 8-bit enum
   print(d:this) { // a method
      switch d {
         case #left {
            C.printf("Going left...\n");
         }
         case #up {
            C.printf("Going up...\n");
         }
         case #right {
            C.printf("Going right...\n");
         }
         case #down {
            C.printf("Going down...\n");
         }
      }
   }
}

using i32 { // access the namespace of 32-bit int, then add a "print" and "increment" method
   print(i:this) {
      C.printf("Int's value is %d\n", i);
   }
   inc(i:this&) {
      i++;
   }
}
main():intc {
   Coord.init(+s); // s is automatically declared as a coord allocated in the stack
   s.walk(#left);
   s.walk(#down);
   C.printf("The location is at (%d, %d)\n", s.x, s.y);
   +i = 7:i32;
   i.print();
   i.inc();
   i.print();
   return 0;
}
