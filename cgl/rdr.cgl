{alias 'glc = :glc}
{alias 'c = :stdc}
{at(:glc)
{:rdr(
   ref:ref,
   pos:usz,
   p1:u8[],
   char:char[],
   p4:u32[],
   ) @union
   {n1(r:this):u8 @inline
      +val = r.p1[0];
      r.pos++;
      :return val;
   }
   {n2(r:this):u32 @inline
      +val = r.p1[0]:u32;
      val |= r.p1[1] << 8;
      r.pos += 2;
      :return val;
   }
   {n4(r:this):u32 @inline
      +val = r.p1[0]:u32;
      val |= r.p1[1] << 8;
      val |= r.p1[2] << 16;
      val |= r.p1[3] << 24;
      r.pos += 4;
      :return val;
   }
   {id(r:this):id @inline
      :return r.n();
   }
   {include("num.c")
      {n(r:this):u32 @real-name(Fgetnum) @no-decl}
   }
   {tok(r:this):token @inline
      :return r.n1();
   }
   {copy(r:this, data:ref, size:i32) @inline
      'c.memcpy(data, r.ref, size);
      r.pos += size;
   }
   {b(r:this):bool @inline
      :return r.n1() != 0;
   }
   {set(r:this, ref:ref) @inline
      r.ref = ref;
   }
}
 

}
