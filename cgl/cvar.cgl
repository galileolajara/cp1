{alias 'glc = %glc}
{alias 'c = %stdc}
{at(%glc)
{:cvar[#nil = -1, #0]:i32
   {rd(c:this&, r:rdr) @inline
      +idx = (r.n() - 1):cvar;
      {if(idx == #nil)
         c = #nil;
      }{else
         c = .cvar-table[idx];
      }
   }
   {wr(g:this, w:wtr) @inline
      w.n(g + 1);
   }
   {process(c:this):bool
      +num = c:u32;
      +n3 = num >> 3;
      +n17 = 1 << (num & 7);
      {if((.cvar-is-outputted[n3] & n17) != 0) :return :true}
      .cvar-is-outputted[n3] |= n17;

      +cvar = c.ptr();

      {if((cvar.flags & #set-expr) != #0)
         {if!(cvar.expr-set.process()) :return :false}
      }{elif(cvar.last-cvar != #nil)
         {if!(cvar.last-cvar.process()) :return :false}
      }

      +at-i = cvar.decl.type;
      {if(at-i != #nil)
         +at = at-i.ptr();
         {if(&&, at.type != #basic, at.decl.struct == #nil)
            'c.out.printf("Error, the type '%s' used in cvar '.%s' was not defined\n", at.name.id.str(), cvar.decl.name.str());
            :return :false;
         }
         at-i.output(cvar.file, cvar.row, cvar.col);
      }

      `` {if((gvar.flags & #no-decl) == #0)
         .cvar-outputted-v[.cvar-outputted-c++] = c;
      `` }
      
      :return :true;
   }
   {ptr(c:this):cvar-data @inline
      :return .cvar-v[c];
   }
   {write(c:this) @inline
      +cvar = c.ptr();
      {if((cvar.decl.flags & #real-name) != #0)
         .out.printf("%s", cvar.decl.real-name.str());
      }{else
         cvar.at.write-space();
         .out.printf("_C%s", cvar.decl.name.c-name());
      }
   }
}
{:cvar-flags[
   #0,
   #set-expr = 1,
   #as-enum = 2,
   `` #real-name = 2,
   ]:u8
   {wr(f:this, w:wtr) @inline
      w.n1(f);
   }
   {rd(f:this&, r:rdr) @inline
      f = r.n1():cvar-flags;
   }
}
{gvar cvar-c:cvar}
{gvar cvar-cap:cvar}
{gvar cvar-v:cvar-data+[]}
{expr-cvar(at:at, name:id):expr-i
   quick-alloc-one(+(e:expr-cvar));
   +e-idx = expr-push(e.base, #cvar);
   e.at = at;
   e.name = name;
   :return e-idx;
}
{at(:expr-i)
   {write-cvar(expr:expr) @case.write() @inline
      {+e:expr-cvar = expr}
      e.cvar.write();
   }
   {wr-cvar(expr:expr, w:wtr, header:bool) @case.wr() @inline
      {+e:expr-cvar = expr}
      e.at.wr(w, header);
      e.name.wr(w, header);
   }
   {rd-cvar(e-idx:expr-i, r:rdr) @case.rd() @inline
      quick-alloc-one(+(e:expr-cvar));
      e-idx.set(e.base, #cvar);
      e.at.rd(r);
      e.name.rd(r);
      e.try = #nil;
   }
   {value-cvar(e:this, ref:i8, paren:bool, v:value, ok:bool&) @case.value() @inline
      {+expr:expr-cvar = e.ptr()}
      +cvar = expr.cvar.ptr();
      v.set(ref, paren, cvar.decl.type, cvar.decl.type-info);
      {if(v.ref == 1)
         v.paren = :false;
      }
      ok = :true;
   }
   {type-cvar(expr:expr, at:at&) @case.type() @inline
      {+e:expr-cvar = expr}
      +cvar = e.cvar.ptr();
      at = cvar.decl.type;
   }
   {process-cvar(expr:expr, ok:bool&) @case.process() @inline
      {+e:expr-cvar = expr}
      +name = e.name;
      {+cvar-c, cvar-v}
      {if(e.try != #nil)
         +at = e.try.ptr();
         cvar-c = at.cvar-c;
         cvar-v = at.cvar-v;
         `` 'c.out.printf("e.try = %d, %s, %s, cvar-c %d\n", e.try, at.name.id.str(), name.str(), cvar-c);
         {do{+i = 0}{(cvar-c) i++}
            +cvar = cvar-v[i];
            `` 'c.out.printf("- %s\n", cvar.ptr().decl.name.str());
            {if(cvar.ptr().decl.name == name)
               {if!(cvar.process()) :return}
               e.cvar = cvar;
               ok = :true;
               :return;
            }
         }
      }
      {if(e.at != #nil)
         e.at = at-validate(e.at, .ctx-func.at);
         +at = e.at.ptr();
         cvar-c = at.cvar-c;
         cvar-v = at.cvar-v;
      }{else
         +at = .ctx-func.at.ptr();
         cvar-c = at.cvar-c;
         cvar-v = at.cvar-v;
      }
      {do{+i = 0}{(cvar-c) i++}
         +cvar = cvar-v[i];
         {if(cvar.ptr().decl.name == name)
            {if!(cvar.process()) :return}
            e.cvar = cvar;
            ok = :true;
            :return;
         }
      }
      'c.out.printf("%s:%u:%u - %u:%u: Cannot find #%s\n",
         .ctx-func.file.path(), .ctx-begin-row, .ctx-begin-col, .ctx-end-row, .ctx-end-col, name.str());
   }
   {try-deduce-cvar(expr:expr, at:at) @case.try-deduce() @inline
      {+e:expr-cvar = expr}
      {if(e.at == #nil)
         e.try = at;
      }
   }
}
 

}
