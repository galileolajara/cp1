{alias 'glc = %glc}
{at(%glc)
{expr-ref(expr:expr-i):expr-i
   quick-alloc-one(+(e:expr-ref));
   +e-idx = expr-push(e.base, #ref);
   e.expr = expr;
   :return e-idx;
}
{at(:expr-i)
   {wr-ref(expr:expr, w:wtr, header:bool) @case.wr() @inline
      {+e:expr-ref = expr}
      e.expr.wr(w, header);
   }
   {rd-ref(e-idx:expr-i, r:rdr) @case.rd() @inline
      quick-alloc-one(+(e:expr-ref));
      e-idx.set(e.base, #ref);
      e.expr.rd(r);
   }
   {write-ref(expr:expr) @case.write() @inline
      {+e:expr-ref = expr}
      e.expr.write-value(e.val);
   }
   {value-ref(e:this, ref:i8, paren:bool, v:value, ok:bool&) @case.value() @inline
      {+expr:expr-ref = e.ptr()}
		v.type = basic-type(#ref);
		v.info.init();
		v.info.array-c = 0;
		v.info.ref-v[0] = 1;
		v.info.star-c = 1;
		v.ref = 1;
      ok = :true;
	}
   {type-ref(expr:expr, at:at&) @case.type() @inline
      at = basic-type(#ref);
   }
   {process-ref(expr:expr, ok:bool&) @case.process() @inline
      {+e:expr-ref = expr}
		{if!(e.expr.value(2, :false, e.val))
			:return;
      }
      ok = :true;
   }
}
 

}
