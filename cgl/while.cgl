{alias 'glc = :glc}
{at(:glc)
{at(:stmt-space)
   {wr-while(stmt:stmt, w:wtr, header:bool) @case.wr() @inline
      {+s:stmt-while = stmt}
      s.expr.wr(w, header);
      {if(s.continue != :null)
         w.b(:true);
         s.continue.wr(w, header);
      }{else
         w.b(:false);
      }
   }
   {rd-while(space:stmt-space, r:rdr) @case.rd() @inline
      quick-alloc-one(+(s:stmt-while));
      s.expr.rd(r);
      space.stmt-push(s.base, .ctx-begin-row, .ctx-begin-col, .ctx-end-row, .ctx-end-col, #while);
      {if(r.b())
         quick-alloc-one(+(space2:stmt-space));
         s.continue = space2;
         space2.rd(r, space);
      }
      .nest-stack-id-v[.nest-stack-c] = .nest-id++;
      .nest-stack-ptr-v[.nest-stack-c].while = s;
      .nest-stack-c++;
   }
   {wr-while-end(stmt:stmt, w:wtr, header:bool) @case.wr() @inline
   }
   {rd-while-end(space:stmt-space, r:rdr) @case.rd() @inline
      +while = .nest-stack-ptr-v[.nest-stack-c -= 1].while;
      quick-alloc-one(+(s:stmt-while-end));
      s.while = while;
      while.end = s;
      space.stmt-push(s.base, 0, 0, 0, 0, #while-end);
   }
}
{at(:stmt)
   {write-while(stmt:stmt) @case.write() @inline
      {+s:stmt-while = stmt}
      .nest-stack-id-v[.nest-stack-c] = .nest-id++;
      .nest-stack-ptr-v[.nest-stack-c].while = s;
      .nest-stack-c++;
      .out.printf("while(");
      s.expr.write();
      .out.printf(") {\n");
   }
   {process-while(stmt:stmt, ok:bool&) @case.process() @inline
      {+s:stmt-while = stmt}
      {if(s.expr != #nil)
         {if!(s.expr.process())
            :return;
         }
      }
      ok = :true;
   }
   {write-while-end(stmt:stmt) @case.write() @inline
      +id = .nest-stack-id-v[.nest-stack-c -= 1];
      {+s:stmt-while-end = stmt}
      .out.printf("continue_%u:;\n", id);
      +continue = s.while.continue;
      {if(continue != :null)
         continue.write();
      }
      .out.printf("}\nbreak_%u:;\n", id);
   }
   {process-while-end(stmt:stmt, ok:bool&) @case.process() @inline
      {+s:stmt-while-end = stmt}
      +continue = s.while.continue;
      {if(continue != :null)
         continue.process();
      }
      ok = :true;
   }
}
{stmt-while-begin()
   stmt-space-begin();
   .decl-func-ctx-space.flags |= #skip-lvar-decl;
}
{:stmt-while(
   base:stmt+,
   expr:expr-i,
   continue:stmt-space,
   end:stmt-while-end,
   )
}
{:stmt-while-end(
   base:stmt+,
   while:stmt-while,
   )
}
{stmt-while-set(expr:expr-i, begin-row:i32, begin-col:i32, end-row:i32, end-col:i32, continue:stmt-space)
   quick-alloc-one(+(s:stmt-while));
   .nest-stack-id-v[.nest-stack-c] = .nest-id++;
   .nest-stack-ptr-v[.nest-stack-c].while = s;
   .nest-stack-c++;
   s.expr = expr;
   s.continue = continue;
   stmt-push(s.base, begin-row, begin-col, end-row, end-col, #while);
   stmt-space-begin();
}
{stmt-while-end()
   .nest-stack-c -= 1;
   stmt-space-end();
   quick-alloc-one(+(s:stmt-while-end));
   stmt-push(s.base, 0, 0, 0, 0, #while-end);
   stmt-space-end();
}
 

}
