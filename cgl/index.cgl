{alias 'glc = :glc}
{alias 'c = :stdc}
{at(:glc)
{expr-index(left:expr-i, right-v:expr-i[], right-c:i32):expr-i
   {do{+i = right-c}(right-c)
      quick-alloc-one(+(e:expr-index));
      ++e-idx = expr-push(e.base, #index);
      e.left = left;
      e.right = right-v[i -= 1];
   }
   :return e-idx;
}
{at(:expr-i)
   {wr-index(expr:expr, w:wtr, header:bool) @case.wr() @inline
      {+e:expr-index = expr}
      e.left.wr(w, header);
      e.right.wr(w, header);
   }
   {write-index(expr:expr) @case.write() @inline
      {+e:expr-index = expr}
      e.left.write-value(e.left-val);
      .out.printf("[");
      e.right.write-value(e.right-val);
      .out.printf("]");
   }
   {rd-index(e-idx:expr-i, r:rdr) @case.rd() @inline
      quick-alloc-one(+(e:expr-index));
      e-idx.set(e.base, #index);
      e.left.rd(r);
      e.right.rd(r);
   }
   {type-index(expr:expr, at:at&) @case.type() @inline
      {+e:expr-index = expr}
      at = e.left.type();
   }
   {value-index(e:this, ref:i8, paren:bool, v:value, ok:bool&) @case.value() @inline
      {+expr:expr-index = e.ptr()}
		v.type = expr.left-val.type;
		v.info.init();
		v.info.copy-from(expr.left-val.info);
		v.info.array-c -= 1;
		+c = v.info.ref-v[v.info.array-c];
		v.ref = (c + 2) - ref;
		v.info.ref-v[v.info.array-c] = ref - 1;
		v.info.count();
		{if(v.ref == 1)
			v.paren = :false;
		}{else
			v.paren = paren;
		}
      ok = :true;
   }
   {process-index(expr:expr, ok:bool&) @case.process() @inline
      {+e:expr-index = expr}
   	{if!(e.left.value(1, :true, e.left-val))
   		:return;
      }
   	{if!(e.right.value(1, :true, e.right-val))
   		:return;
      }
      ok = :true;
   }
}
 

}
