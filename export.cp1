require "LibCp1/stdout.cp1";
require "LibC/stdio.cp1";
require "LibC/stdlib.cp1";
require "LibC/string.cp1";
require "Posix/fcntl.cp1";
require "Posix/unistd.cp1";
using C = LibC;
using C1 = LibCp1;
using X = Posix;
main(arg-c:intc, arg-v:char[][]):intc {
   if arg-c != 3 {
      C.printf("Usage: %s [.c input file] [.h output file]\n", arg-v[0]);
      C.exit(#failure);
   }
   var in-fd;
   if !X.Fd.open(in-fd, arg-v[1], #rdonly) {
      C.printf("Cannot open file for reading: %s\n", arg-v[1]);
      C.exit(#failure);
   }
   in-size! = in-fd.seek(0, #end);
   in-fd.seek(0, #set);
   var in-data:char[] = C.malloc(in-size);
   in-fd.read(in-data, in-size);
   in-fd.close();
   if !(&&, in-size > 0, in-data[in-size - 1] == ''\n) {
      C.printf("Error, file '%s' does not end with a new line\n", arg-v[1]);
      C.exit(#failure);
   }
   pos! = 0;
   get! = false;
   var func-name-v:char[256][];
   var func-len-v:u8[256];
   func-c! = 0;
   loop pos < in-size {
      start! = pos;
      loop {
         if in-data[pos] == ''\n {
            break;
         }
         pos++;
      }
      len! = pos - start;
      var line:char[] = &in-data[start];
      if get {
         if line[0] == ''} {
            break;
         }
         lparen! = -1;
         loop i = 0; len; i++ {
            if line[i] == ''( {
               lparen = i;
               break;
            }
         }
         // C.printf("[%.*s]\n", lparen, line);
         func-name-v[func-c] = line;
         func-len-v[func-c] = lparen;
         func-c++;
      } elif (&&, len == 24, C.memcmp("void _NCp1_Pexport_0() {", line, 24) == 0) {
         get = true;
      }
      pos++;
   }
   out-f! = C.fopen(arg-v[2], "w");
   pos = 0;
   indent! = 0;
   loop pos < in-size {
      start! = pos;
      loop {
         if in-data[pos] == ''\n {
            break;
         }
         pos++;
      }
      len! = pos - start;
      var line:char[] = &in-data[start];
      if len > 0 {
         if line[len - 1] == ''{ {
            indent++;
         } elif (||, line[len - 1] == ''}, (&&, line[len - 2] == ''}, line[len - 1] == '';)) {
            indent--;
         } elif indent == 0 {
            if (&&, line[len - 2] == ''), line[len - 1] == '';) {
               lparen! = -1;
               loop i = 0; len; i++ {
                  if line[i] == ''( {
                     lparen = i;
                     break;
                  }
               }
               name! = lparen;
               loop line[name - 1] != ''  {
                  name--;
               }
               func-len! = lparen - name;
               var func:char[] = &line[name];
               loop i = 0; func-c; i++ {
                  if (&&, func-len == func-len-v[i], C.memcmp(func, func-name-v[i], func-len) == 0) {
                     out-f.printf("%.*s\n", len, line);
                     break;
                  }
               }
            }
         }
      }
      pos++;
   }
   out-f.close();
   return 0;
}
