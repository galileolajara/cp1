include <fcntl.h> {
   using C = LibC;
   using X = Posix;
   using Posix {
      enum Fd[#nil = -1]:intc {
         open(file:this&, path:char[], flags:OpenFlags):bool @inline {
            "#ifdef _WIN32";
            flags |= #binary;
            "#endif";
            +fd = X.open(path, flags);
            if fd != -1 {
               file = fd;
               return true;
            } else {
               return false;
            }
         }
         open(file:this&, path:char[], flags:OpenFlags, mode:intc):bool @inline {
            "#ifdef _WIN32";
            flags |= #binary;
            "#endif";
            +fd = X.open(path, flags, mode);
            if fd != -1 {
               file = fd;
               return true;
            } else {
               return false;
            }
         }
         fopen(file:this, mode:char[]):C.File @inline {
            return C.fdopen(file, mode);
         }
         close(file:this):intc @inline {
            return X.close(file);
         }
         stat(file:this, stat:Sys.Stat):intc @inline {
            return X.fstat(file, stat);
         }
      }
      enum OpenFlags[
         #rdonly @no-decl(O_RDONLY),
         #create @no-decl(O_CREAT),
         #wronly @no-decl(O_WRONLY),
         #binary @no-decl(O_BINARY), // For windows only
         #rdwr @no-decl(O_RDWR),
         #truncate @no-decl(O_TRUNC),
         #excl @no-decl(O_EXCL),
      ]:intc;
      open(path:char[], flags:OpenFlags):Fd @real-name @no-decl;
      open(path:char[], flags:OpenFlags, mode:intc):Fd @real-name @no-decl;
      close(fd:Fd):intc @real-name @no-decl;
   }
}
