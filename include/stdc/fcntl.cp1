{include(<fcntl.h>)
   using 'sys = :sys;
   using 'c = :stdc;
   {at(:stdc)
      :fd[#nil = -1]:intc {
         open(file:this&, path:char[], flags:open-flags):bool @inline {
            +fd = 'c.open(path, flags);
            if (fd != -1) {
               file = fd;
               return true;
            } else {
               return false;
            }
         }
         open(file:this&, path:char[], flags:open-flags, mode:intc):bool @inline {
            +fd = 'c.open(path, flags, mode);
            if (fd != -1) {
               file = fd;
               return true;
            } else {
               return false;
            }
         }
         fopen(file:this, mode:char[]):file @inline {
            return fdopen(file, mode);
         }
         close(file:this):intc @inline {
            return 'c.close(file);
         }
         stat(file:this, stat'sys:stat):intc @inline {
            return 'sys.fstat(file, stat);
         }
      }
      :open-flags[
         #read @no-decl @real-name(O_RDONLY),
         #create @no-decl @real-name(O_CREAT),
         #write @no-decl @real-name(O_WRONLY),
         #rdwr @no-decl @real-name(O_RDWR),
         #truncate @no-decl @real-name(O_TRUNC),
         #excl @no-decl @real-name(O_EXCL),
      ]:intc;
      open(path:char[], flags:open-flags):fd @real-name @no-decl;
      open(path:char[], flags:open-flags, mode:intc):fd @real-name @no-decl;
      close(fd:fd):intc @real-name @no-decl;
   }
}
